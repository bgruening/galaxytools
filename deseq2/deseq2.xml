<tool id="deseq2" name="DESeq2" version="2.0">
  <description>Determines differentially expressed transcripts from read alignments</description>
    <requirements>
        <requirement type="binary">Rscript</requirement>
        <requirement type="R-module">DESeq2</requirement>
        <requirement type="package" version="3.0.1">R_3_0_1</requirement>
        <requirement type="set_environment">DESEQ2_SCRIPT_PATH</requirement>
    </requirements>
    <command interpreter="Rscript">
        deseq2.R
            -o "$deseq_out"
            -p "$plots" 
            -i "$input_matrix"

        #if $filter_sel.filter_sel_opts == 'all_vs_all':
            -s 'all_vs_all'
        #else:
            -s ## build a string like '1:2 5:6'
            "${filter_sel.control_cols} ${filter_sel.experiement_cols}"
        #end if
    </command>
    <stdio>
    <regex match="Execution halted" 
           source="both" 
           level="fatal" 
           description="Execution halted" />
    </stdio>
    <inputs>
        <param format="tabular" name="input_matrix" type="data" label="Countmatrix" help="You can create a count matrix with the tool ..."/>

         <conditional name="filter_sel">
            <param name="filter_sel_opts" type="select" label="Select properties to filter">
              <option value="all_vs_all">All against all</option>
              <option value="specific">specific</option>
            </param>
            <when value="specific">

                <param name="control_cols" label="Select columns containing treatment." type="data_column" data_ref="input_matrix"
                    numerical="True" multiple="true" use_header_names="true" size="120" display="checkboxes">
                    <validator type="no_options" message="Please select at least one column."/>
                </param>

                <param name="experiement_cols" label="Select columns containing treatment." type="data_column" data_ref="input_matrix"
                    numerical="True" multiple="true" use_header_names="true" size="120" display="checkboxes">
                    <validator type="no_options" message="Please select at least one column."/>
                </param>

            </when>
            <when value="all_v_all" />
        </conditional>

    </inputs>

  <outputs>
    <data format="tabular" name="deseq_out" label="DESeq2 result file"/>
    <data format="pdf" name="plots" label="Plot collection"/>
  </outputs>

  <help>

.. class:: infomark

**What it does** 

`DESeq` is a tool for differential expression testing of RNA-Seq data.


**Inputs**

`DESeq` requires three input files to run:

1. Annotation file in GFF3, containing the necessary information about the transcripts that are to be quantified.
2. The BAM alignment files grouped into replicate groups, each containing several replicates. BAM files store the read alignments in a compressed format. They can be generated using the `SAM-to-BAM` tool in the NGS: SAM Tools section. (The script will also work with only two groups containing only a single replicate each. However, this analysis has less statistical power and is  therefor not recommended.)

**Output**

`DESeq` generates a text file containing the gene name and the p-value.

------

**Licenses**

If **DESeq** is used to obtain results for scientific publications it
should be cited as [1]_.

**References** 

.. [1] Anders, S and Huber, W (2010): `Differential expression analysis for sequence count data`_. 

.. _Differential expression analysis for sequence count data: http://dx.doi.org/10.1186/gb-2010-11-10-r106

------

For more information see http://www.sequenceontology.org/gff3.shtml

**SAM/BAM format** The Sequence Alignment/Map (SAM) format is a
tab-limited text format that stores large nucleotide sequence
alignments. BAM is the binary version of a SAM file that allows for
fast and intensive data processing. The format specification and the
description of SAMtools can be found on
http://samtools.sourceforge.net/.

------

DESeq-hts Wrapper Version 0.3 (Feb 2012)

</help>
</tool>
