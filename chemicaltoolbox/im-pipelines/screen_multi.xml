<tool id="ctb_rdkit_screen_multi" name="Screen Multi" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@">
    <description>using RDKit</description>
    <macros>
        <import>macros.xml</import>
        <token name="@GALAXY_VERSION@">0</token>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        screen_multi
        -i '$infile'
        -if '${infile.ext}'
        #if $query_struc_type.query_struc_opts == 'smiles'
            --qsmiles '$querystruc'
            $query_struc_type.titleline
            --qsmilesDelimiter '$query_struc_type.delimiter'
            --qsmilesColumn '$query_struc_type.column_smiles'
            --qsmilesNameColumn '$query_struc_type.column_id'
        #elif $query_struc_type.query_struc_opts == 'sdf'
            --qsdf '$querystruc'
        #else
            --qjson '$querystruc'
        #end if
        #if $property != ''
            --gprop '$property'
        #end if
        --simmin '$simmin'
        --simmax '$simmax'
        -d '$descriptor_opts'
        -m '$metric_opts'
        -f '$fragment_opts'
        #if $hac_min != ''
            --hacmin '$hac_min'
        #end if
        #if $hac_max != ''
            --hacmax '$hac_max'
        #end if
        #if $mw_min != ''
            --mwmin '$mw_min'
        #end if
        #if $mw_max != ''
            --mwmax '$mw_max'
        #end if
        $thin
        $quiet
        --meta
        -o outp
        -of tsv &>> $logfile &&
        cat outp_metrics.txt &>> $logfile &&
        gzip -d outp.tsv.gz
    ]]></command>
    <inputs>
        <param name="infile" type="data" format="sdf" label="Input file" help="Input file in SDF format"/>
        <param name="querystruc" type="data" format="sdf,smi,json" label="Query Structure" help="Can be in JSON, SMILES or SDF format"/>
        <conditional name="query_struc_type">
            <param name="query_struc_opts" type="select" label="Input file type for query structures">
                <option value="smiles" selected="true">smiles</option>
                <option value="sdf">sdf</option>
                <option value="json">json</option>
            </param>
            <when value="smiles">
                <param name="titleline" type="boolean" label="Does the SMILES file have a title line" truevalue="--qsmilesTitleLine" falsevalue=""/>
                <param name="delimiter" type="text" value="\t" label="Delimiter for the SMILES file" help="Default is tab (\t)"/>
                <param name="column_smiles" type="integer" value="0" label="SMILES column index" help="Default is the first column"/>
                <param name="column_id" type="integer" value="1" label="SMILES id column index" help="Default is the second column"/>
            </when>
            <when value="sdf"/>
            <when value="json"/>
        </conditional>
        <param name="property" type="text" optional="true" label="Property name in query molecules" help="If not defined (or property is not present), then name property is not written. JSON format uses the UUID as default'"/>
        <param name="simmin" type="float" value="0.7" label="Lower cutoff for similarity" help="1.0 means identical"/>
        <param name="simmax" type="float" value="1.0" label="Upper cutoff for similarity" help="1.0 means identical"/>
        <param name="descriptor_opts" type="select" label="Descriptor Options" help="Descriptor or fingerprint type (default rdkit)">
            <option value="rdkit" selected="true">rdkit</option>
            <option value="maccs">maccs</option>
            <option value="morgan2">morgan2</option>
            <option value="morgan3">morgan3</option>
        </param>
        <param name="metric_opts" type="select" label="Similarity metric" help="Default is the Tanimoto coefficient">
            <option value="tanimoto" selected="true">tanimoto</option>
            <option value="asymmetric">asymmetric</option>
            <option value="braunblanquet">braunblanquet</option>
            <option value="cosine">cosine</option>
            <option value="dice">dice</option>
            <option value="kulczynski">kulczynski</option>
            <option value="mcconnaughey">mcconnaughey</option>
            <option value="rogotgoldberg">rogotgoldberg</option>
            <option value="russel">russel</option>
            <option value="sokal">sokal</option>
        </param>
        <param name="fragment_opts" type="select" label="Fragment options" help="Find single fragment if more than one (hac = biggest by heavy atom count, mw = biggest by mol weight)">
            <option value="hac" selected="true">hac</option>
            <option value="mw">mw</option>
        </param>
        <param name="hac_min" type="integer" optional="true" label="Minimum heavy atom count" help="ABC"/>
        <param name="hac_max" type="integer" optional="true" label="Maximum heavy atom count" help="ABC"/>
        <param name="mw_min" type="float" optional="true" label="Minimum mol weight" help="ABC"/>
        <param name="mw_max" type="float" optional="true" label="Minimum mol weight" help="ABC"/>
        <param name="thin" type="boolean" label="Thin Mode" truevalue="-t" falsevalue="" help="ABC"/>
        <param name="quiet" type="boolean" label="Quiet Mode" truevalue="-q" falsevalue="" help="ABC"/>
    </inputs>    

    <expand macro="outputs" output_format="tsv" filetype="tabular"/>

    <tests>
        <test>
            <param name="infile" value="dhfr_3d.sdf" ftype="sdf"/>
            <param name="querystruc" value="nci100.data" ftype="json"/>
            <param name="simmin" value="0.55"/>
            <output name="logfile">
                <assert_contents>
                    <has_line_matching expression="Found \d+\ similar molecules"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
        ABCCDEFGHIJKLMNOPQRSTUVWXYZ
    ]]></help>
    <expand macro="citations" />
</tool>