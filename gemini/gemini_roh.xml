<tool id="gemini_@BINARY@" name="GEMINI @BINARY@" version="@version@.0">
    <description>Conducting analyses on genome “windows”.</description>
    <expand macro="requirements" />
    <expand macro="version_command" />
    <macros>
        <import>gemini_macros.xml</import>
        <token name="@BINARY@">roh</token>
    </macros>
    <command>
<![CDATA[
        gemini @BINARY@
            -i "${ infile }"

            -> "${ outfile }"
]]>
    </command>
    <expand macro="stdio" />
    <inputs>
        <param name="infile" type="data" format="sqlite" label="GEMINI database" />
    </inputs>

    <outputs>
        <data name="outfile" format="tabular" label="${tool.name} on ${on_string}" />
    </outputs>
    <tests>
        <test>
        </test>
    </tests>
    <help>

**What it does**

===========================================================================
``ROH``: Identifying runs of homozygosity
===========================================================================
Runs of homozygosity are long stretches of homozygous genotypes that reflect
segments shared identically by descent and are a result of consanguinity or
natural selection. Consanguinity elevates the occurrence of rare recessive 
diseases (e.g. cystic fibrosis) that represent homozygotes for strongly deleterious 
mutations. Hence, the identification of these runs holds medical value. 

The 'roh' tool in GEMINI returns runs of homozygosity identified in whole genome data. 
The tool basically looks at every homozygous position on the chromosome as a possible
start site for the run and looks for those that could give rise to a potentially long 
stretch of homozygous genotypes. 

For e.g. for the given example allowing ``1 HET`` genotype (h) and ``2 UKW`` genotypes (u) 
the possible roh runs (H) would be:


.. code-block:: bash

	genotype_run = H H H H h H H H H u H H H H H u H H H H H H H h H H H H H h H H H H H
	roh_run1     = H H H H h H H H H u H H H H H u H H H H H H H
	roh_run2     =           H H H H u H H H H H u H H H H H H H h H H H H H
	roh_run3     =                     H H H H H u H H H H H H H h H H H H H
	roh_run4     =                                 H H H H H H H h H H H H H

roh returned for --min-snps = 20 would be:

.. code-block:: bash
	
	roh_run1     = H H H H h H H H H u H H H H H u H H H H H H H
	roh_run2     =           H H H H u H H H H H u H H H H H H H h H H H H H


As you can see, the immediate homozygous position right of a break (h or u) would be the possible 
start of a new roh run and genotypes to the left of a break are pruned since they cannot 
be part of a longer run than we have seen before.


@CITATION@
    </help>
    <expand macro="citations"/>
</tool>
