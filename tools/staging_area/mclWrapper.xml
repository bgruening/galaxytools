<tool id="mcl" name="mcl" >
  <description>The Markov Cluster Algorithm</description>
  <command >
	mcl  $inputFile -I $inflation  -o $output $use_tab $tabFile   2> /dev/null ;
</command>
  <inputs>
	<param name="inputFile" type="data" format="txt" label="Graph Matrix" help="Dataset missing? See TIP below"/>
	<param name="use_tab" type="boolean" checked="true" truevalue="-use-tab" falsevalue="" label="use tab" />	
	<param name="tabFile" type="data" format="txt" label="tab file" help="Dataset missing? See TIP below"/>
	<param name='inflation' type='float' value='2.0' ></param>
  </inputs>
  <outputs>
    <data format="txt" name="output" />
  </outputs>
  <tests>
	<test>
	</test>	
 </tests>

<help>


**What it does**

	mcl, a cluster algorithm for graphs. A single parameter controls the granularity of the output clustering, namely the -I inflation option described further below. In standard usage of the program this parameter is the only one that may require changing.If you want to explore cluster structure in graphs with MCL, vary this parameter to obtain clusterings at different levels of granularity. A good set of starting values is 1.4, 2, 4, and 6. 

-----

**Input Formats (Graph Data Format)**

- Native matrix format

	The format that can be read in by any mcl application expecting a matrix argument. The native format closely resembles the layout of matrices as residing in computer memory. There are two distinct encodings, respectively 		interchange and binary. Their relative merits are described further below.


- Raw format
	A file in raw format is simply a listing of vectors without any sectioning structure. No header specification, no domain specification, and no matrix introduction syntax is used - these are supplied to the processing 		application by other means. The end-of-vector token '$' must still be used, and the comment token '#' is still valid. mcxassemble imports a file in raw format, creates a native matrix from the data therein, and writes the 		matrix to (a different) file. It allows customizable behaviour in how to combine repeated entries and repeated vectors. This is typically used in the following procedure. A) Do a one-pass-parse on some external cooccurrence 	file/format, generate raw data during the parse and write it to file (without needing to build a huge data structure in memory). B) mcxassemble takes the raw data and assembles it according to instruction into a native mcl 		matrix.


- Label input:

	Label input is a line based input where two nodes and an optional value are specified on each line. The nodes should be specified by labels. If the labels contain spaces they should be separated by tabs (and the value if 		present should be separated from the second label by a tab as well). The parse code will assume tab-separated labels if it sees a tab character in the input, otherwise it will split the input on any kind of whitespace. Any 		line where the first non-whitespace character is the octothorp (#) is ignored .
	
	Mcl can read in label input and cluster it when it is given the --abc option.

------

**Inflation**

	This value is the main handle for affecting cluster granularity. It is usually chosen somewhere in the range [1.2-5.0]. -I 5.0 will tend to result in fine-grained clusterings, and -I 1.2 will tend to result in very coarse 		grained clusterings. Your mileage will vary depending on the characteristics of your data. That is why it is a good idea to test the quality and coherency of your clusterings using clm dist and clm info. This will most 		likely reveal that certain values of -I are simply not right for your data. The clm dist section contains a discussion of how to use the cluster validation tools shipped with mcl (see the SEE ALSO section).

	With low values for -I, like -I 1.2, you should be prepared to use more resources in order to maintain quality of clusterings, i.e. increase the argument to the -scheme option.


-----

**Clustering similarity graphs encoded in BLAST results**

::

**********************************	 **************	     **************	
*    	        		 *	 *	      *	     *            *	
* cut col 1,2,11 from blast file *  ===> *   mcxload  *	===> *     mcl    * 
*    	        		 *	 *	      *	     *	     	  *  
**********************************	 **************	     **************	

	A specific instance of the workflow above is the clustering of proteins based on their sequence similarities. In the most typical scenario the external format is BLAST output, which needs to be transformed to ABC format. In the examples below the input is in columnar blast format obtained with the blast -m8 option. It requires a version of mcl at least as recent as 09-061. First we create an ABC-formatted file using the external columnar BLAST format, which is assumed to be in a file called seq.cblast.
	cut -f 1,2,11 seq.cblast > seq.abc

	The columnar format in the file seq.cblast has, for a given BLAST hit, the sequence labels in the first two columns and the asssociated E-value in column 11. It is parsed by the standard UNIX cut(1) utility. The format must have been created with the BLAST -m8 option so that no comment lines are present. Alternatively these can be filtered out using grep.

	The newly created seq.abc file is loaded by mcxload, which writes both a network file seq.mci and a dictionary file seq.tab.
	mcxload -abc seq.abc --stream-mirror --stream-neg-log10 -stream-tf 'ceil(200)' -o seq.mci -write-tab seq.tab

	The --stream-mirror option ensures that the resulting network will be undirected, as recommended when using mcl. Omitting this option would result in a directed network as BLAST E-values generally differ between two sequences. The default course of action for mcxload is to use the best value found between a pair of labels. The next option, --abc-neg-log10 tranforms the numerical values in the input (the BLAST E-values) by taking the logarithm in base 10 and subsequently negating the sign. Finally, the transformed values are capped so that any E-value below 1e-200 is set to a maximum allowed edge weight of 200.

	To obtain clusterings from seq.mci and seq.tab one has two choices. The first is to generate an abstract clustering representation and from that obtain the label output, as follows. Below the -o option is not used, so mcl will create meaningful and unique output names by itself. The default way of doing this is to preprend the prefix out. and to append a suffix encoding the inflation value used, with inflation encoded using two digits of precision and the decimal separator removed.
	mcl seq.mci -I 1.4 mcl seq.mci -I 2 mcl seq.mci -I 4 mcl seq.mci -I 6 mcxdump -icl out.seq.mci.I14 -tabr seq.tab -o dump.seq.mci.I14 mcxdump -icl out.seq.mci.I20 -tabr seq.tab -o dump.seq.mci.I20 mcxdump -icl out.seq.mci.I40 -tabr seq.tab -o dump.seq.mci.I40 mcxdump -icl out.seq.mci.I60 -tabr seq.tab -o dump.seq.mci.I60

	Now the file out.seq.tab.I14 and its associates can be used for example to compute the distances between the encoded clusterings with clm dist, to compute a set of strictly reconciled nested clusterings with clm order, or to compute an efficiency criterion with clm info.

	Alternatively, label output can be obtained directly from mcl as follows.
	mcl seq.mci -I 1.4 -use-tab seq.tab mcl seq.mci -I 2 -use-tab seq.tab mcl seq.mci -I 4 -use-tab seq.tab mcl seq.mci -I 6 -use-tab seq.tab

-----

**Example**

* input::

	-Graph Matrix

		mclheader
		mcltype matrix
		dimensions 12x12
		)
		(mclmatrix
		begin
		0 0 $
		1 3 $
		2 6 $
		3 9 $
		4 2 $
		5 4 $
		6 8 $
		7 10 $
		8 5 $
		9 11 $
		10 7 $
		11 1 $
		)

	- Inflation : 2.0

* output::

	(mclheader
	mcltype matrix
	dimensions 12x7
	)
	(mclmatrix
	begin
	0  2 4 5 6 8 $
	1  7 10 $
	2  0 $
	3  1 $
	4  3 $
	5  9 $
	6  11 $
	)

 
 </help>

</tool>
