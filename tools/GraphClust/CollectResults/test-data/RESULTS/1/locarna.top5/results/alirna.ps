%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.2.10
%%CreationDate: Thu Jan 19 13:21:58 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GUAGCCGUGGCCGAGUGGU_UAAGGCGAUGGACUUGAAAUCCAAUGGGGUUUCCCCGCGCAGGUUCGAAUCCUGCCGGCUACG\
) def
/coor [
[105.05254364 224.55171204]
[104.49167633 209.56221008]
[103.93080902 194.57269287]
[103.36994171 179.58319092]
[102.80907440 164.59367371]
[102.24820709 149.60417175]
[101.68733978 134.61465454]
[79.55465698 129.22348022]
[64.97535706 110.87839508]
[64.70485687 86.79402161]
[50.08094025 90.13183594]
[35.45701981 93.46965027]
[31.59990120 108.28117371]
[21.29275894 119.59582520]
[6.90409756 124.81359100]
[-8.25967216 122.73545074]
[-20.71402931 113.83895874]
[-27.59704971 100.16845703]
[-27.32707024 84.86532593]
[-19.96612740 71.44612122]
[-7.20571232 62.99447250]
[8.02192497 61.45250320]
[22.21758461 67.17455292]
[32.11920547 78.84573364]
[46.74312592 75.50791931]
[61.36704254 72.17010498]
[67.87529755 58.65557098]
[61.36704254 45.14103699]
[54.85878754 31.62650490]
[48.35053253 18.11197281]
[41.84227753 4.59743929]
[35.33401871 -8.91709328]
[20.13636208 -12.60018826]
[10.90339947 -25.22106171]
[11.99465656 -40.82052231]
[22.89487457 -52.03298187]
[38.45730209 -53.56426239]
[51.33383942 -44.69133377]
[55.44458008 -29.60372925]
[48.84855270 -15.42534924]
[55.35680771 -1.91081655]
[61.86506653 11.60371685]
[68.37332153 25.11824989]
[74.88157654 38.63278198]
[81.38983154 52.14731598]
[96.29551697 53.82678223]
[105.64786530 42.09931183]
[115.00021362 30.37183762]
[124.35255432 18.64436531]
[129.50086975 2.49100256]
[146.44815063 2.96642709]
[150.68278503 19.38301086]
[136.08003235 27.99671364]
[126.72768402 39.72418594]
[117.37533569 51.45165634]
[108.02298737 63.17913055]
[125.53419495 73.67378235]
[134.59967041 91.34632111]
[132.99847412 110.58877563]
[147.33206177 115.01010132]
[161.66566467 119.43142700]
[175.99925232 123.85276031]
[190.33283997 128.27407837]
[203.36978149 119.63855743]
[218.90153503 121.45468903]
[229.59451294 132.86495972]
[230.39979553 148.48179626]
[220.93716431 160.93139648]
[205.67457581 164.33544922]
[191.81857300 157.08665466]
[185.91151428 142.60768127]
[171.57792664 138.18635559]
[157.24433899 133.76501465]
[142.91073608 129.34368896]
[128.57714844 124.92236328]
[116.67684937 134.05378723]
[117.23771667 149.04330444]
[117.79858398 164.03280640]
[118.35945129 179.02232361]
[118.92031860 194.01182556]
[119.48118591 209.00134277]
[120.04205322 223.99084473]
[122.95143127 243.15293884]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 79]
[5 78]
[6 77]
[7 76]
[10 26]
[11 25]
[12 24]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[46 56]
[47 55]
[48 54]
[49 53]
[59 75]
[60 74]
[61 73]
[62 72]
[63 71]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
2 cmark
81 cmark
3 cmark
80 cmark
4 cmark
79 cmark
5 cmark
78 cmark
6 cmark
77 cmark
7 cmark
76 cmark
11 cmark
25 cmark
12 cmark
24 cmark
27 45 1 gmark
28 cmark
44 cmark
30 cmark
42 cmark
32 cmark
40 cmark
46 56 1 gmark
46 cmark
56 cmark
47 55 1 gmark
47 cmark
55 cmark
48 54 1 gmark
48 cmark
54 cmark
49 53 2 gmark
59 cmark
75 cmark
60 cmark
74 cmark
61 cmark
73 cmark

% End Annotations
% show it
showpage
end
%%EOF
