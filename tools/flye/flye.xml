<tool id="flye" name="Flye" version="@TOOL_VERSION@+galaxy@SUFFIX_VERSION@" profile="20.01">
    <description>de novo assembler for single molecule sequencing reads</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="edam_ontology"/>
    <version_command>flye --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
        #for $counter, $input in enumerate($inputs):
            #if $input.is_of_type('fastqsanger', 'fastq'):
                #set $ext = 'fastq'
            #elif $input.is_of_type('fastqsanger.gz', 'fastq.gz'):
                #set $ext = 'fastq.gz'
            #elif $input.is_of_type('fasta.gz'):
                #set $ext = 'fasta.gz'
            #elif $input.is_of_type('fasta'):
                #set $ext = 'fasta'
            #end if
            ln -s '$input' ./input_${counter}.${ext} &&
        #end for
        flye
        $mode
        #for $counter, $input in enumerate($inputs):
            ./input_${counter}.$ext
        #end for
        -o out_dir
        -t \${GALAXY_SLOTS:-4}
        -i $iterations
        #if $hifi_error:
            --hifi-error $hifi_error
        #end if
        #if $min_overlap:
            -m $min_overlap
        #end if
        #if $asm.asm_select:
            --asm-coverage $asm.asm_coverage
            -g '${asm.genome_size}'
        #end if
        $plasmids
        $meta
        $trestle
    ]]></command>
    <inputs>
        <param name="inputs" type="data" format="fasta,fasta.gz,fastq,fastq.gz,fastqsanger.gz,fastqsanger" multiple="true" label="Input reads" />
        <param name="mode" type="select" label="Mode">
            <option value="--nano-raw">Nanopore raw</option>
            <option value="--nano-corr">Nanopore corrected</option>
            <option value="--pacbio-hifi">PacBio HiFi</option>
            <option value="--pacbio-raw">PacBio raw</option>
            <option value="--pacbio-corr">PacBio corrected</option>
            <option value="--subassemblies">High-quality contig-like input</option>
        </param>
        <param argument="--iterations" type="integer" value="0" label="Number of polishing iterations" 
            help="Polishing is performed as the final assembly stage. By default, Flye runs one polishing iteration. Additional iterations 
                might correct a small number of extra errors (due to improvements on how reads may align to the corrected assembly). If the 
                parameter is set to 0, the polishing is not performed."/>
        <param argument="--min-overlap" type="integer" optional="true" label="Minimum overlap between reads" 
            help="This sets a minimum overlap length for two reads to be considered overlapping. By default it is chosen 
                automatically based on the read length distribution (reads N90) and does not require manual setting. Typical 
                value is 3k-5k (and down to 1k for datasets with shorter read length). Intuitively, we want to set this 
                parameter as high as possible, so the repeat graph is less tangled. However, higher values might lead to assembly gaps.
                In some rare cases it makes sense to manually increase minimum overlap for assemblies of big genomes with long reads and high coverage." />
        <param argument="--hifi-error" type="float" min="0" max="1" optional="true" label="Expected HiFi reads error rate" help="Default: 0.01"/>
        <param argument="--plasmids" type="boolean" truevalue="--plasmids" falsevalue="" checked="False" label="Rescue short unassembled plasmids" />
        <param argument="--keep-haplotypes" type="boolean" truevalue="--keep-haplotypes" falsevalue="" checked="False" label="Do not collapse alternative haplotypes"
            help="By default, Flye collapses graph structures caused by alternative haplotypes (bubbles, superbubbles, roundabouts) to produce longer 
                consensus contigs. This option retains the alternative paths on the graph, producing less contigouos, but more detailed assembly."/>
        <param argument="--trestle" type="boolean" truevalue="--trestle" falsevalue="" 
            checked="False" label="Enable Trestle" 
            help="Trestle is an extra module that resolves simple repeats of multipicity 2 that were not bridged by reads. Depending on the datasets, it might 
                resolve a few extra repeats, which is helpful for small (bacterial genomes). Use --trestle option to enable the module. On large genomes, 
                the contiguity improvements are usually minimal, but the computation might take a lot of time" />
        <param argument="--meta" type="boolean" truevalue="--meta" falsevalue="" checked="False" label="Perform metagenomic assembly" 
            help="It is designed for highly non-uniform coverage and is sensitive to underrepresented sequence at low coverage (as low as 2x).
                In some examples of simple metagenomes, we observed that the normal mode assembled more contigious bacterial 
                consensus sequence, while the metagenome mode was slightly more fragmented, but revealed strain mixtures"/>
        <conditional name="asm">
            <param name="asm_select" type="select" label="Reduced contig assembly coverage">
                <option value="true">Enable reduced coverage for initial disjointing assembly</option>
                <option value="false" selected="true">Disable reduced coverage for initial disjointing assembly</option>
            </param>
            <when value="true">
                <param argument="--asm-coverage" type="integer" min="0" value="30"
                    label="Reduced coverage for initial disjointing assembly" 
                    help="Typically, assemblies of large genomes at high coverage require a hundreds of RAM. For high coverage assemblies, 
                        you can reduce memory usage by using only a subset of longest reads for initial contig extension stage (usually, the memory bottleneck). 
                        The parameter --asm-coverage specifies the target coverage of the longest reads. For a typical assembly, 30x is enough to produce good 
                        initial contigs. Regardless of this parameter, all reads will be used at the later pipeline stages."/>
                <param argument="--genome-size" type="text" optional="true" label="Estimated genome size"
                    help="For example, 5m or 2.6g. No longer required as input. However, it must be used in conjunction with --asm-coverage option.">
                    <validator type="regex" message="Genome size must be a float  or integer, optionally followed by the a unit prefix (kmg)">^([0-9]*[.])?[0-9]+[kmg]?$</validator>
                </param>
            </when>
            <when value="false" />
        </conditional>
    </inputs>
    <outputs>
        <data name="consensus" format="fasta" from_work_dir="out_dir/assembly.fasta" label="${tool.name} on ${on_string}: consensus"/>
        <data name="assembly_graph" format="graph_dot" from_work_dir="out_dir/assembly_graph.gv" label="${tool.name} on ${on_string}: assembly_graph"/>
        <data name="assembly_gfa" format="txt" from_work_dir="out_dir/assembly_graph.gfa" label="${tool.name} on ${on_string}: graphical fragment assembly"/>
        <data name="assembly_info" format="tabular" from_work_dir="out_dir/assembly_info.txt" label="${tool.name} on ${on_string}: assembly info"/>
        <data name="flye_log" format="txt" from_work_dir="out_dir/flye.log" label="${tool.name} on ${on_string}: log"/>
    </outputs>
    <tests>
        <test>
            <param name="inputs" ftype="fasta" value="nanopore.fasta"/>
            <param name="mode" value="--pacbio-raw"/>
            <output name="assembly_info" file="result1_assembly_info.txt" ftype="tabular" compare="sim_size"/>
            <output name="assembly_graph" file="result1_assembly_graph.dot" ftype="graph_dot" compare="sim_size"/>
            <output name="assembly_gfa" file="result1_assembly_graph.gfa" ftype="txt" compare="sim_size"/>
            <output name="consensus" file="result1_assembly.fasta" ftype="fasta" compare="sim_size"/>
        </test>
        <test>
            <param name="inputs" ftype="fasta" value="nanopore.fasta"/>
            <param name="mode" value="--nano-raw"/>
            <output name="assembly_info" file="result2_assembly_info.txt" ftype="tabular" compare="sim_size"/>
            <output name="assembly_graph" file="result2_assembly_graph.dot" ftype="graph_dot" compare="sim_size"/>
            <output name="assembly_gfa" file="result2_assembly_graph.gfa" ftype="txt" compare="sim_size"/>
            <output name="consensus" file="result2_assembly.fasta" ftype="fasta" compare="sim_size"/>
        </test>
        <test>
            <param name="inputs" ftype="fasta" value="nanopore.fasta"/>
            <param name="mode" value="--nano-corr"/>
            <param name="iterations" value="2"/>
            <conditional name="asm">
                <param name="asm_select" value="true" />
                <param name="asm" value="40"/>
                <param name="genome_size" value="10000"/>
            </conditional>
            <output name="assembly_info" file="result3_assembly_info.txt" ftype="tabular" compare="sim_size"/>
            <output name="assembly_graph" file="result3_assembly_graph.dot" ftype="graph_dot" compare="sim_size"/>
            <output name="assembly_gfa" file="result3_assembly_graph.gfa" ftype="txt" compare="sim_size"/>
            <output name="consensus" file="result3_assembly.fasta" ftype="fasta" compare="sim_size"/>
        </test>
        <test>
            <param name="inputs" ftype="fasta" value="nanopore.fasta"/>
            <param name="mode" value="--pacbio-raw"/>
            <param name="iterations" value="1"/>
            <param name="meta" value="true"/>
            <param name="plasmids" value="true"/>
            <param name="no-trestle" value="true"/>
            <output name="assembly_info" file="result4_assembly_info.txt" ftype="tabular" compare="sim_size"/>
            <output name="assembly_graph" file="result4_assembly_graph.dot" ftype="graph_dot" compare="sim_size"/>
            <output name="assembly_gfa" file="result4_assembly_graph.gfa" ftype="txt" compare="sim_size"/>
            <output name="consensus" file="result4_assembly.fasta" ftype="fasta" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**Purpose**


Input reads could be in FASTA or FASTQ format, uncompressed
or compressed with gz. Currenlty, raw and corrected reads
from PacBio and ONT are supported. The expected error rates are
<30% for raw and <2% for corrected reads. Additionally,
--subassemblies option performs a consensus assembly of multiple
sets of high-quality contigs. You may specify multiple
files with reads (separated by spaces). Mixing different read
types is not yet supported.

You must provide an estimate of the genome size as input,
which is used for solid k-mers selection. The estimate could
be rough (e.g. withing 0.5x-2x range) and does not affect
the other assembly stages. Standard size modificators are
supported (e.g. 5m or 2.6g).

    ]]></help>
    <expand macro="citations" />
</tool>
