<tool id="epicseg_segment" name="EpiCSeg - Segment" version="0.1.0">
    <macros>
        <import>macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="1.0">epicseg</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        Rscript '${__tool_directory__}/epicseg.R' segment --regions "$regions"
           --nstates $nstates
           --nthreads $nthreads

        #for $dataset in $datasets#
           --counts ${dataset.name}:${dataset.count_matrix}
        #end for#

           --maxiter $maxiter

        #for $annot in $annotation#
           --annot ${annot.name}:${annot.annotation}
        #end for# &&

        mkdir -p '${ report.files_path }' &&
        cp lmeans.txt '${ report.files_path }' &&
        cp lmeans.png '${ report.files_path }' &&
        cp means.png '${ report.files_path }' &&
        cp nbs.png '${ report.files_path }' &&
        cp table.png '${ report.files_path }' &&
        cp transP.png '${ report.files_path }' &&
        cp model.txt '${ report.files_path }' &&
        cp colors.txt '${ report.files_path }' &&
        cp segmentation.bed '${ report.files_path }' &&
        cp table.txt '${ report.files_path }' &&
        cp report.html $report &&

        #for $annot in $annotation#
        cp annot_${annot.name}.* '${ report.files_path }' &&
        #end for#
        cp segmentation.bed $segmentation
    ]]></command>
    <inputs>
        <param type="data" name="regions" format="bed" label="Regions"
        help="BED file with the genomic regions of interest.
              This file should be the same file as was used to
              construct the count matrix with epicseg_getcounts." />
        <repeat name="datasets" title="Count matrix">
            <param type="text" name="name" label="Count matrix name"
                   value="dataset" />
            <param type="data" name="count_matrix" label="Count matrix"
                   format="txt"
                   help="Count matrix. If multiple count matrices are
                         used, they must share the same number of
                         chromatin marks and genomic regions."/>
        </repeat>
        <param type="integer" name="nstates" label="Number of states"
               min="0" value="7"
               help="Number of chromatin states."/>
        <param type="integer" name="maxiter" value="200"
               help="Maximum number of iterations in training mode."/>
        <param type="integer" name="nthreads" value="1"
               help="Number of threads to use."/>

        <repeat name="annotation" title="Annotation">
            <param type="text" name="name" label="Annotation name"
                   value="genes" />
            <param type="data" name="annotation" label="Annotation"
                   format="bed"
                   help="Bed-file containing the annotation. For example,
                   gene annotation or CpG-islands." />
        </repeat>
    </inputs>
    <outputs>
        <data name="report" format="html" from_work_dir='report.html'/>
        <data name="segmentation" format="bed"
              from_work_dir='segmentation.bed'/>
    </outputs>
    <tests>
      <test>
        <param name="regions" value="chr1.bed"/>
        <repeat name="datasets">
          <param name="name" value="DS1" />
          <param name="count_matrix" value="countmatrix.txt" />
        </repeat>
        <param name="nstates" value="5" />
        <output name="report" file="report.html"/>
        <output name="segmentation" file="segmentation.bed"/>
      </test>
      <test>
        <param name="regions" value="chr1.bed"/>
        <repeat name="datasets">
          <param name="name" value="DS1" />
          <param name="count_matrix" value="countmatrix.txt" />
        </repeat>
        <repeat name="annotation">
          <param name="name" value="cpg" />
          <param name="annotation" value="cpgIslandExt.hg19.bed" />
        </repeat>
        <param name="nstates" value="5" />
        <output name="report" file="report_w_annot.html"/>
        <output name="segmentation" file="segmentation.bed"/>
      </test>
    </tests>
    <help><![CDATA[
.. class:: infomark

**What it does**

**EpiCSeg - Segment** performs chromatin segmentation based on one or more
count matrices which were e.g. produced using
**EpiCSeg - Get counts** or **EpiCSeg - Normalize counts**.

**EpiCSeg - Segment** takes as input

  1. a set of count matrices
  2. a bed file containing the regions of interest (must be the same as was
     used for EpiCSeg - Get counts)
  3. (optional) a set of bed files containing annotation to
     compare the segmentation results with.

It produces

  1. an html report that summarizes the chromatin segmentation results
  2. a bed file that contains the segmentation results.

    ]]></help>
    <expand macro="citations" />
</tool>
