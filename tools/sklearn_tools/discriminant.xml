<tool id="discriminant_classifier" name="Discriminant Analysis" version="@VERSION@">
    <description></description>
    <macros>
        <token name="@VERSION@">0.9</token>
        <macro name="tol" token_default_value="0.00001">
            <param argument="tol" type="float" optional="true" value="@DEFAULT_VALUE@" label="Tollerance"
                help="Rank estimation threshold used in SVD solver. ( default : @DEFAULT_VALUE@ )"/>
        </macro>
        <!--macro name="priors"-->
    </macros>
    <requirements>
        <requirement type="package" version="2.3.0">anaconda</requirement>
    </requirements>
    <stdio>
        <exit_code level="fatal" range="1:"/>
    </stdio>
    <version_command>echo "@VERSION@"</version_command>
    <command><![CDATA[
    export PYTHONPATH=/home/kohvaeip/.local/lib/python2.7/site-packages:/home/kohvaeip/.local/lib/:\$PYTHONPATH
    &&
    cat "$inputs" >&2
    &&
    python "$discriminant_script" '$inputs'
]]>
    </command>
    <configfiles>
        <inputs name="inputs"/>
        <configfile name="discriminant_script">
<![CDATA[
import sys
import json
import numpy as np
import sklearn.discriminant_analysis
import pandas
import pickle

input_json_path = sys.argv[1]
params = json.load(open(input_json_path, "r"))


#if $selected_tasks.selected_task == "load":

classifier_object = pickle.load(open("$infile_model", 'r'))

data = pandas.read_csv("$selected_tasks.infile_data", sep='\t', header=0, index_col=None, parse_dates=True, encoding=None, tupleize_cols=False )
prediction = classifier_object.predict(data)
prediction_df = pandas.DataFrame(prediction)
res = pandas.concat([data, prediction_df], axis=1)
res.to_csv(path_or_buf = "$outfile", sep="\t", index=False)

#else:

data_train = pandas.read_csv("$selected_tasks.infile_train", sep='\t', header=0, index_col=None, parse_dates=True, encoding=None, tupleize_cols=False )
data = data_train.ix[:,0:len(data_train.columns)-1]
labels = np.array(data_train[data_train.columns[len(data_train.columns)-1]])

options = params["selected_tasks"]["selected_algorithms"]["options"]
selected_algorithm = params["selected_tasks"]["selected_algorithms"]["selected_algorithm"]

my_class = getattr(sklearn.discriminant_analysis, selected_algorithm)
classifier_object = my_class(**options)
classifier_object.fit(data,labels)
pickle.dump(classifier_object,open("$outfile", 'w+'))


#end if

]]>
        </configfile>
    </configfiles>
    <inputs>
        <conditional name="selected_tasks">
            <param name="selected_task" type="select" label="Select a Classification Task">
                <option value="load">Load a model and predict</option>
                <option value="train">Train a model</option>
            </param>
            <when value="load">
                <param name="infile_model" type="data" format="txt" label="Models" help="Select a model file." />
                <param name="infile_data" type="data" format="tabular" label="Data (tabular)" help="Select the dataset you want to classify."/>
                <!--TODO : add the following to prediction tasks.-->
                <!--param name="prediction_option" type="select" label="Select the type of prediction">
                    <option value="predict">Predict class labels</option>
                    <option value="predict_proba">Predict probabilities</option>
                    <option value="predict_log_proba">Predict log probabilities</option>
                </param-->
            </when>
            <when value="train">
                <param name="infile_train" type="data" format="tabular" label="Training samples (tabular)" />
                <conditional name="selected_algorithms">
                    <param name="selected_algorithm" type="select" label="Classifier type">
                        <option value="LinearDiscriminantAnalysis">Linear Discriminant Classifier</option>
                        <option value="QuadraticDiscriminantAnalysis">Quadratic Discriminant Classifier</option>
                    </param>
                    <when value="LinearDiscriminantAnalysis">
                        <section name="options" title="Advanced Options" expanded="False">
                            <param argument="solver" type="select" optional="true" label="Solver" help="">
                                <option value="svd" selected="true">Singular Value Decomposition</option>
                                <option value="lsqr">Least Squares Solution</option>
                                <option value="eigen">Eigenvalue Decomposition</option>
                            </param>
                            <!--param name="shrinkage" type="text" optional="true" value="" label="Shrinkage" help="Shrinkage parameter for least-squares and eigen solvers. (Possible values: auto or float between 0 and 1.)"/-->
                            <!--expand macro="priors"/-->
                            <param argument="n_components" type="integer" optional="true" value="" label="Number of components" help="Number of components for dimensionality reduction. ( always less than  n_classes - 1 )"/>
                            <expand macro="tol"/>
                            <param argument="store_covariance" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="false" label="Store covariance" help="Compute class covariance matrix."/>
                        </section>
                    </when>
                    <when value="QuadraticDiscriminantAnalysis">
                        <section name="options" title="Advanced Options" expanded="False">
                            <!--expand macro="priors"/-->
                            <param argument="reg_param" type="float" optional="true" value="0.0" label="Regularization coefficient" help="Covariance estimate regularizer."/>
                            <expand macro="tol"/>
                            <param argument="store_covariances" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="false" label="Store covariances" help="Compute class covariance matrixes."/>
                        </section>
                    </when>
                </conditional>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data format="txt" name="outfile"/>
    </outputs>
    <tests>
        <test>
            <param name="infile_train" value="train_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value="LinearDiscriminantAnalysis"/>
            <param name="solver" value="svd" />
            <param name="store_covariances" value="True" />
            <output name="outfile" file="linear_model01.txt"/>
        </test>
        <test>
            <param name="infile_train" value="train_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value="LinearDiscriminantAnalysis"/>
            <param name="solver" value="lsqr"/>
            <output name="outfile" file="linear_model02.txt"/>
        </test>
        <!--test>
            <param name="infile_train" value="train_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value="LinearDiscriminantAnalysis"/>
            <param name="solver" value="eigen" />
            <output name="outfile" file="linear_model03.txt"/>
        </test-->
        <test>
            <param name="infile_train" value="train_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value="QuadraticAnalysis"/>
            <output name="outfile" file="quadratic_model01.txt"/>
        </test>
        <test>
            <param name="infile_model" value="linear_model01.txt" ftype="txt"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="load"/>
            <output name="outfile" file="linear_prediction_result01.tabular"/>
        </test>
        <test>
            <param name="infile_model" value="linear_model02.txt" ftype="txt"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="load"/>
            <output name="outfile" file="linear_prediction_result02.tabular"/>
        </test>
        <!--test>
            <param name="infile_model" value="linear_model03.txt" ftype="txt"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="load"/>
            <output name="outfile" file="linear_prediction_result03.tabular"/>
        </test-->
        <test>
            <param name="infile_model" value="quadratic_model01.txt" ftype="txt"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="load"/>
            <output name="outfile" file="quad_prediction_result01.tabular"/>
        </test>
    </tests>
    <help><![CDATA[
**What it does**
Linear Discriminant Analysis and Quadratic Discriminant Analysis are two classic classifiers, with, as their names suggest, a linear and a quadratic decision surface, respectively. This module uses sklearn.discriminant_analysis package to implement Discriminant Analysis classification.


    ]]></help>
    <citations>
        <citation type="bibtex">
            @article{scikit-learn,
             title={Scikit-learn: Machine Learning in {P}ython},
             author={Pedregosa, F. and Varoquaux, G. and Gramfort, A. and Michel, V.
                     and Thirion, B. and Grisel, O. and Blondel, M. and Prettenhofer, P.
                     and Weiss, R. and Dubourg, V. and Vanderplas, J. and Passos, A. and
                     Cournapeau, D. and Brucher, M. and Perrot, M. and Duchesnay, E.},
             journal={Journal of Machine Learning Research},
             volume={12},
             pages={2825--2830},
             year={2011}
             url = {https://github.com/scikit-learn/scikit-learn}
            }
        </citation>
    </citations>
</tool>