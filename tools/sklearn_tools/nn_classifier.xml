<tool id="nn_classifier" name="Nearest Neighbors Classification" version="@VERSION@">
    <description></description>
    <macros>
        <token name="@VERSION@">0.9</token>
        <!--macro name="nn_options">
        TODO: switch between n_neighbors and radius params
        </macro-->
    </macros>
    <requirements>
        <requirement type="package" version="2.3.0">anaconda</requirement>
    </requirements>
    <stdio>
        <exit_code level="fatal" range="1:"/>
    </stdio>

    <version_command>echo "@VERSION@"</version_command>
    <command><![CDATA[
    export PYTHONPATH=/home/kohvaeip/.local/lib/python2.7/site-packages:/home/kohvaeip/.local/lib/:\$PYTHONPATH
    &&
    cat "$inputs" >&2
    &&
    python "$nnc_script" '$inputs'
]]>
    </command>
    <configfiles>
        <inputs name="inputs"/>
        <configfile name="nnc_script">
<![CDATA[
import sys
import json
import numpy as np
import sklearn.neighbors
import pandas
import pickle

input_json_path = sys.argv[1]
params = json.load(open(input_json_path, "r"))


#if $selected_tasks.selected_task == "load":

classifier_object = pickle.load(open("$infile_model", 'r'))

data = pandas.read_csv("$selected_tasks.infile_data", sep='\t', header=0, index_col=None, parse_dates=True, encoding=None, tupleize_cols=False )
prediction = classifier_object.predict(data)
prediction_df = pandas.DataFrame(prediction)
res = pandas.concat([data, prediction_df], axis=1)
res.to_csv(path_or_buf = "$outfile", sep="\t", index=False)

#else:

data_train = pandas.read_csv("$selected_tasks.infile_train", sep='\t', header=0, index_col=None, parse_dates=True, encoding=None, tupleize_cols=False )

data = data_train.ix[:,0:len(data_train.columns)-1]
labels = np.array(data_train[data_train.columns[len(data_train.columns)-1]])

options = params["selected_tasks"]["selected_algorithms"]["options"]
selected_algorithm = params["selected_tasks"]["selected_algorithms"]["selected_algorithm"]

if selected_algorithm == "nneighbors":
    classifier = params["selected_tasks"]["selected_algorithms"]["samples"]
elif selected_algorithm == "ncentroid":
    classifier = "NearestCentroid"

my_class = getattr(sklearn.neighbors, classifier)
classifier_object = my_class(**options)
classifier_object.fit(data,labels)

pickle.dump(classifier_object,open("$outfile", 'w+'))

#end if

]]>
        </configfile>
    </configfiles>
    <inputs>
        <conditional name="selected_tasks">
            <param name="selected_task" type="select" label="Select a Classification Task">
                <option value="load">Load a model and predict</option>
                <option value="train">Train a model</option>
            </param>
            <when value="load">
                <param name="infile_model" type="data" format="txt" label="Models" help="Select a model file." />
                <param name="infile_data" type="data" format="tabular" label="Data (tabular)" help="Select the dataset you want to classify."/>
                <conditional name="prediction_options">
                    <param name="prediction_option" type="select" label="Select the type of prediction">
                        <option value="predict">Predict class labels</option>
                        <option value="advanced">Include advanced options</option>
                    </param>
                    <when value="predict">
                    </when>
                    <when value="advanced">
                    </when>
                </conditional>
            </when>
            <when value="train">
                <param name="infile_train" type="data" format="tabular" label="Training samples (tabular)" />
                <conditional name="selected_algorithms">
                    <param name="selected_algorithm" type="select" label="Classifier type">
                        <option value="nneighbors">Nearest Neighbors</option>
                        <option value="ncentroid">Nearest Centroid</option>
                    </param>
                    <when value="nneighbors">
                        <param name="samples" type="select" label="Neighbor selection method">
                            <option value="KNeighborsClassifier" selected="true">K-nearest neighbors</option>
                            <option value="RadiusNeighborsClassifier">Radius-based</option>
                        </param>
                        <section name="options" title="Advanced Options" expanded="False">
                            <param argument="weights" type="select" label="Weight function" help="Used in prediction.">
                                <option value="uniform" selected="true" help="Uniform weights. All points in each neighborhood are weighted equally.">Uniform</option>
                                <option value="distance" help="Weight points by the inverse of their distance.">Distance</option>
                            </param>
                            <param argument="algorithm" type="select" label="Neighbor selection algorithm">
                                <option value="auto" selected="true">Auto</option>
                                <option value="ball_tree">BallTree</option>
                                <option value="kd_tree">KDTree</option>
                                <option value="brute">Brute-force</option>
                            </param>
                            <param argument="leaf_size" type="integer" value="30" label="Leaf size" help="Used with BallTree and KDTree. Affects the time and memory usage of the constructed tree."/>
                        <!--discuss param name="metric" type="text" -->
                        <!--discuss param name="p" type="integer" -->
                        <!--discuss param name="metric_params" type=??? -->
                        </section>
                    </when>
                    <when value="ncentroid">
                        <section name="options" title="Advanced Options" expanded="False">
                            <param argument="metric" type="text" optional="true" value="euclidean" label="Metric" help="The metric to use when calculating distance between instances in a feature array."/>
                            <param argument="shrink_threshold" type="float" optional="true" value="" label="Shrink threshold" help="Floating point number for shrinking centroids to remove features."/>
                        </section>
                    </when>
                </conditional>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data format="txt" name="outfile"/>
    </outputs>
    <tests>
        <test>
            <param name="infile_train" value="train_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value="nneighbors"/>
            <param name="samples" value="KNeighborsClassifier" />
            <param name="algorithm" value="brute" />
            <output name="outfile" file="nn_model01.txt"/>
        </test>
        <test>
            <param name="infile_train" value="train_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value=""/>
            <param name="selected_algorithm" value="nneighbors"/>
            <param name="samples" value="RadiusNeighborsClassifier" />
            <output name="outfile" file="nn_model02.txt"/>
        </test>
        <test>
            <param name="infile_train" value="train_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value="ncentroid"/>
            <output name="outfile" file="nn_model03.txt"/>
        </test>
        <test>
            <param name="infile_model" value="nn_model01.txt" ftype="txt"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="load"/>
            <output name="outfile" file="nn_prediction_result01.tabular"/>
        </test>
        <test>
            <param name="infile_model" value="nn_model02.txt" ftype="txt"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="load"/>
            <output name="outfile" file="nn_prediction_result02.tabular"/>
        </test>
        <test>
            <param name="infile_model" value="nn_model03.txt" ftype="txt"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="selected_task" value="load"/>
            <output name="outfile" file="nn_prediction_result03.tabular"/>
        </test>
    </tests>
    <help><![CDATA[
**What it does**
This module implements the k-nearest neighbors classification algorithms.
For more information check http://scikit-learn.org/stable/modules/neighbors.html
    ]]></help>
    <citations>
        <citation type="bibtex">
            @article{scikit-learn,
             title={Scikit-learn: Machine Learning in {P}ython},
             author={Pedregosa, F. and Varoquaux, G. and Gramfort, A. and Michel, V.
                     and Thirion, B. and Grisel, O. and Blondel, M. and Prettenhofer, P.
                     and Weiss, R. and Dubourg, V. and Vanderplas, J. and Passos, A. and
                     Cournapeau, D. and Brucher, M. and Perrot, M. and Duchesnay, E.},
             journal={Journal of Machine Learning Research},
             volume={12},
             pages={2825--2830},
             year={2011}
             url = {https://github.com/scikit-learn/scikit-learn}
            }
        </citation>
    </citations>
</tool>