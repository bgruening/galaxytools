<tool id="unique_regions" name="Seperating unique regions" version="0.1.0">
    <requirements>
    </requirements>

    <stdio>
        <exit_code range="1:" />
    </stdio>

    <command><![CDATA[
      mkdir output_dir
      &&
      python $__tool_directory__/unique_regions.py
        -i '$infile'
        -o output_dir
    ]]></command>

    <inputs>
        <param type="data" name="infile" format="bed" />
    </inputs>

    <outputs>
        <collection name="bed_file" type="list" label="unique_regions.bed">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.bed" format="bed" directory="output_dir" />
        </collection>
    </outputs>

    <tests>
        <test>
            <param name="infile" value="testbed.bed"/>
            <output_collection name="bed_file">
                <element name="unique_regions_0" file="out/unique_regions_0.bed" ftype="bed" />
                <element name="unique_regions_1" file="out/unique_regions_1.bed" ftype="bed" />
                <element name="unique_regions_2" file="out/unique_regions_2.bed" ftype="bed" />
                <element name="unique_regions_3" file="out/unique_regions_3.bed" ftype="bed" />
                <element name="unique_regions_4" file="out/unique_regions_4.bed" ftype="bed" />
            </output_collection>
        </test>
    </tests>

    <help><![CDATA[
**Unique Regions**

unique_regions is a tool for separating unique regions in .bed files until there is no more overlapping regions. All you need to run unique_regions is a .bed file containing the reading regions. 
Then it will create a number of output files containing unique regions without overlapping.
The number of created files depend on the complexity of overlapping in the origin file.

When the input file contains no overlapping genes, the sole output file should be identical to the input file.
    ]]></help>
</tool>
