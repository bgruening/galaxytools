<tool id="hicup_hicup" name="Pipeline" version="0.1.0">
    <requirements>
        <requirement type="package" version="0.5.9">hicup</requirement>
        <requirement type="package" version="2.2.6">bowtie2</requirement>
        <requirement type="package" version="1.2">samtools</requirement>
    </requirements>
    
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <command><![CDATA[
        BOWTIE_PATH_BASH="\$(which bowtie2)" &&
        #set index_path = ''
        #if str($reference_genome.source) == "history":
            bowtie2-build "$reference_genome.own_file" genome &amp;&amp;
            ln -s "$reference_genome.own_file" genome.fa &amp;&amp;
            #set index_path = 'genome'
        #else:
            #set index_path = $reference_genome.index.fields.path
        #end if
        hicup_digester --re1 '$re1' --genome '$genome'
        #if $advanced_options_digest.re2:
            --re2 '$advanced_options_digest.re2'
        #end if
        #for $file in $input_files_digest:
            $file
        #end for
        && mv *Digest_* digest_file.txt
        && hicup 
        --digest digest_file.txt
        --index '$index_path'
        --bowtie2 \$BOWTIE_PATH_BASH
        $advanced_options.nofill --keep
        
        #if $advanced_options.longest:
            --longest '$advanced_options.longest'
        #end if

        #if $advanced_options.shortest:
            --shortest '$advanced_options.shortest'
        #end if
        
        $input_first_sequence $input_second_sequence
       
        ## process truncater files
        && mv hicup_truncater_summary* hicup_truncater_summary.txt
        && trunc_result=\$(echo '$input_first_sequence' | rev | cut -d'/' -f1 | rev)
        && trunc_result+=".trunc.fastq"
        && echo \$trunc_result
        && echo '$input_first_sequence'
        && mv \$trunc_result dataset1.trunc.fastq
        && trunc_result=\$(echo '$input_second_sequence' | rev | cut -d'/' -f1 | rev)
        && trunc_result+=".trunc.fastq"
        && mv \$trunc_result dataset2.trunc.fastq

        ## process mapper
        && mv hicup_mapper_summary* hicup_mapper_summary.txt
        && mv *.pair.sam result.pair.sam

        ## process filter
        && mv hicup_filter_ditag_rejects* hicup_filter_ditag_rejects
        && mv *filt.sam dataset.filt.sam
        && mv hicup_filter_summary* hicup_filter_summary.txt
        && mv hicup_filter_ditag_rejects/*contiguous.filter.sam hicup_filter_ditag_rejects/dataset.contiguous.filter.sam
        && mv hicup_filter_ditag_rejects/*re_ligation.filter.sam  hicup_filter_ditag_rejects/dataset.re_ligation.filter.sam 
        && mv hicup_filter_ditag_rejects/*same_dangling_ends.filter.sam hicup_filter_ditag_rejects/dataset.same_dangling_ends.filter.sam
        && mv hicup_filter_ditag_rejects/*invalid.filter.sam hicup_filter_ditag_rejects/dataset.invalid.filter.sam 
        && mv hicup_filter_ditag_rejects/*same_circularised.filter.sam hicup_filter_ditag_rejects/dataset.same_circularised.filter.sam
        && mv hicup_filter_ditag_rejects/*same_internal.filter.sam hicup_filter_ditag_rejects/dataset.same_internal.filter.sam
        #if $advanced_options.longest or $advanced_options.shortest: 
        && mv hicup_filter_ditag_rejects/*wrong_size.filter.sam hicup_filter_ditag_rejects/dataset.wrong_size.filter.sam
        #end if
        ## process general output of hicup
        && mv *.hicup.* dataset.hicup
        && mv *html results.html
    ]]></command>
    <inputs>
        <param name="input_first_sequence" type="data" format="fastq,fa" label="First input sequence" help="The first sequence for the truncater."/>
        <param name="input_second_sequence" type="data" format="fastq,fa" label="Second input sequence" help="The second sequence for the truncater."/>
        <param name="input_files_digest" type="data" multiple="true" format="fa" label="Input DNA sequence files that should be digested"/>
        <param argument="--re1" type="text" label="Restriction enzyme" help="Restriction enzyme used to digest the genome (the enzyme that 
            forms the ligation junction) e.g. A^GATCT,BglII.  Some Hi-C protocols may use two enzymes at this stage.  To specify two enzymes: -1 A^GATCT,BglII:A^AGCTT,HindIII."/>
        <param argument="--genome" type="text" label="Genome" help="Name of the genome to be digested (not the path to the genome 
            file or files, but the genome name to include in the output file)"/>
        <section name="advanced_options_digest" title="Advanced options digester">
            <param argument="--re2" type="text" label="Restriction enzyme instead of sonication to shorten di-tags." help="To specify a restriction enzyme instead of sonication to
                shorten di-tags. This restriction site does NOT form a Hi-C ligation junction. 2 .g. AG^CT,AluI. Typically the sonication protocol is followed."/>
        </section>
        
        <conditional name="reference_genome">
            <param name="source" type="select" label="Will you select a reference genome from your history or use a built-in index?" help="Built-ins were indexed using default options. See `Indexes` section of help below">
                <option value="indexed">Use a built-in genome index</option>
                <option value="history">Use a genome from the history and build index</option>
            </param>
            <when value="indexed">
                <param name="index" type="select" label="Select reference genome" help="If your genome of interest is not listed, contact the Galaxy team">
                <options from_data_table="bowtie2_indices">
                    <filter type="sort_by" column="2"/>
                    <validator type="no_options" message="No indexes are available for the selected input dataset"/>
                </options>
                </param>
            </when>
            <when value="history">
                <param name="own_file" type="data" format="fasta" label="Select reference genome" />
                <!--<param name="own_file" type="data" format="fasta" metadata_name="dbkey" label="Select reference genome" />-->

            </when>
        </conditional>
        <section name="advanced_options" title="Advanced options pipeline">
            <param argument="--longest" type="text" value="" label="Max insert size" help="Maximum allowable insert size (bps)"/>
            <param argument="--shortest" type="text" value="" label="Min insert size" help="Minimum allowable insert size (bps)"/>        
            <param argument="--nofill" type="boolean" value="false" truevalue="--nofill" falsevalue="" label="No fill" help="Hi-C protocol did NOT include a fill-in of sticky ends prior to ligation step and therefore FASTQ reads shall be truncated at the Hi-C restriction enzyme cut site 
                (if present) sequence is encountered"/>
        </section>
    </inputs>
    <outputs>
        <!-- Regular output of hicup -->
        <data name="hicup_results" format="html" from_work_dir="results.html" label="HiCUP report"/>
        <data name="dataset_hicup" format="bam,sam" from_work_dir="dataset.hicup" label="HiCUP results"/>
        <collection name="intermediate_results" label="HiCUP intermediate results" type="list">
        <!-- Output of the truncater step if keep is set -->
            <data name="Rplots" format="pdf" label="Rplots.pdf" from_work_dir="Rplots.pdf" />
            <data name="hicup_truncater_summary" format="txt" label="hicup_truncater_summary.txt" from_work_dir="hicup_truncater_summary.txt" />
            <data name="dataset1.trunc" format="fastq" label="dataset1.trunc.fastq" from_work_dir="dataset1.trunc.fastq" />
            <data name="dataset2.trunc" format="fastq" label="dataset2.trunc.fastq" from_work_dir="dataset2.trunc.fastq" />
            <!-- Output of the mapper step if keep is set -->
            <data name="hicup_mapper_summary" format="txt" from_work_dir="hicup_mapper_summary.txt" label="hicup_mapper_summary.txt" />
            <data name="result.pair" format="sam" from_work_dir="result.pair.sam" label="pair.sam" />
            <data name="Rplots_foo" format="pdf" from_work_dir="Rplots.pdf" label="Rplots.pdf" />
            <!-- Output of the filter_2 step if keep is set -->
            
            <data name="dataset_filt" format="sam" from_work_dir="dataset.filt.sam" label="filt.sam" />
            <data name="hicup_filter_summary" format="txt" from_work_dir="hicup_filter_summary.txt" label="hicup_filter_summary.txt" />
            <data name="contiguous_filter" format="sam" from_work_dir="hicup_filter_ditag_rejects/dataset.contiguous.filter.sam" label="contiguous.filter.sam" />
            <data name="re_ligation_filter" format="sam" from_work_dir="hicup_filter_ditag_rejects/dataset.re_ligation.filter.sam" label="re_ligation.filter.sam" />
            <data name="same_dangling_ends_filter" format="sam" from_work_dir="hicup_filter_ditag_rejects/dataset.same_dangling_ends.filter.sam" label="same_dangling_ends.filter.sam" />
            <data name="invalid_filter" format="sam" from_work_dir="hicup_filter_ditag_rejects/dataset.invalid.filter.sam" label="invalid.filter.sam" />
            <data name="same_circularised_filter" format="sam" from_work_dir="hicup_filter_ditag_rejects/dataset.same_circularised.filter.sam" label="same_circularised.filter.sam" />
            <data name="same_internal_filter" format="sam" from_work_dir="hicup_filter_ditag_rejects/dataset.same_internal.filter.sam" label="same_internal.filter.sam" />
            <data name="wrong_size_filter" format="sam" from_work_dir="hicup_filter_ditag_rejects/dataset.wrong_size.filter.sam" label="wrong_size.filter.sam"/>

        </collection>
        
    </outputs>
    <tests>
         <test>
            <param name="digest" value="digester_file.txt" ftype="txt"/>
            <param name="inputFiles" value="filter_input.sam" ftype="sam"/>
            <output name="dataset_filt" file="dataset.filt.sam"/>
            <output name="hicup_filter_summary" file="hicup_filter_summary.txt"/>
            <output name="contiguous_filter" file="dataset.contiguous.filter.sam"/>
            <output name="re_ligation_filter" file="dataset.re_ligation.filter.sam"/>
            <output name="same_dangling_ends_filter" file="dataset.same_dangling_ends.filter.sam"/>
            <output name="invalid_filter" file="dataset.invalid.filter.sam"/>
            <output name="same_circularised_filter" file="dataset.same_circularised.filter.sam"/>
            <output name="same_internal_filter" file="dataset.same_internal.filter.sam"/>
        </test>
    </tests>
    <help><![CDATA[

    For help please consult the documentation of HiCUP: http://www.bioinformatics.babraham.ac.uk/projects/hicup/overview/

    To get more information about the pipeline visit: http://www.bioinformatics.babraham.ac.uk/projects/hicup/scripts_description/#HiCUP
    ]]></help>
    <citations>
        <citation type="bibtex">
            @article{wingett2015hicup,
                title={HiCUP: pipeline for mapping and processing Hi-C data},
                author={Wingett, Steven and Ewels, Philip and Furlan-Magaril, Mayra and Nagano, Takashi and Schoenfelder, Stefan and Fraser, Peter and Andrews, Simon},
                journal={F1000Research},
                volume={4},
                year={2015},
                publisher={Faculty of 1000 Ltd}
                }
        </citation>
    </citations>
</tool>
