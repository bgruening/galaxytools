<tool id="db_to_gff" name="Database to gff" version="@VERSION@">
    
    <description>
    <![CDATA[
        Get information from a gffutils database and create a new gff file. 
    ]]>
    </description>
    
    <macros>
        <import>gff_sqlite_tool_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    
    <version_command> python db_to_gff.py --version </version_command>
    
    <command interpreter="python">
    <![CDATA[
        
      db_to_gff.py 
        #if $gff and $gff is not None:
          --gff "$gff"
        #end if
        
        #if $database and $database is not None:
          --database "$database"
        #end if
        
        #if $source and $source is not None:
            --source "$source"
        #end if
        
        #if $task_selector.selections == "--all":
            $task_selector.selections
        #end if
        
        #if $task_selector.selections == "single_search":
            
            #if $task_selector.seqid and $task_selector.seqid is not None:
                --seqid "$task_selector.seqid"
            #end if
            
            #if $task_selector.features and $task_selector.features is not None:
                --features "$task_selector.features"
            #end if
            
            #if $task_selector.start and $task_selector.start is not None:
                --start "$task_selector.start"
            #end if
            
            #if $task_selector.end and $task_selector.end is not None:
                --end "$task_selector.end"
            #end if
            
            #if $task_selector.strand and $task_selector.strand is not None:
                --strand $task_selector.strand
            #end if
            
            $task_selector.within
        #end if
        
        #if $task_selector.selections == "batch_search":
            #if $task_selector.batch_file and $task_selector.batch_file is not None:
                --batch "$task_selector.batch_file"
            #end if
        #end if
        
    ]]>
    </command>
    
    <inputs>
        <param name="database" type="data" format="sqlite" label="Input sqlite database" help="(--database) With gff_to_db created sqlite database." />
        <param name="source" type="text" label="Filter for source" help="(--source) Only return features with this source." >
            <expand macro="sanitize_query" />
        </param>
        <conditional name="task_selector">
            <param name="selections" type="select" label="Select query task." >
                <option value="--all" selected="True" > Request whole database </option>
                <option value="single_search" > Single database search </option>
                <option value="batch_search" > Batch database search </option>
            </param>
            <when value="single_search">
                <param name="seqid" type="text" label="Search for sequence id" help="(--seqid) Only search for features with this sequence id." >
                    <expand macro="sanitize_query" />
                </param>
                <param name="features" type="text" label="Search for features" help="(--features) Only search for these features. This can be a comma separated list of multiple features." >
                    <expand macro="sanitize_query" />
                </param>
                <param name="start" type="text" label="Search for start position" help="(--start) Only search for features that start with or after this region." >
                    <expand macro="sanitize_query" />
                </param>
                <param name="end" type="text" label="Search for end position" help="(--end) Only search for features that end with or before this region." >
                    <expand macro="sanitize_query" />
                </param>
                <param name="strand" type="select" optional="True" label="Search for strand direction" help="(--strand) Only search for features in strand direction. Use 'x' for unstranded features." >
                    <option value="+">+</option>
                    <option value="-">-</option>
                    <option value="x">x</option>
                </param>
                <param name="within" type="boolean" checked="false" truevalue="--within" falsevalue="" label="Completely within" help="(--within) Only search for features completely within start and/or end region." />
            </when>
            <when value="batch_search">
                <param name="batch_file" type="data" format="tabular" label="Input batch file" help="(--batch) Tabular file with search data. Format: seqid - feature - start - end - strand - within. Values can be empty or use '.' as a place holder. Always provide 5 tabs per line. Use 'x' for unstranded features. Use 'w' for within." />
            </when>
        </conditional>
    </inputs>
    
    <outputs>
        <data name="gff" format="gff" label="GFF data of ${tool.name} on ${on_string}" />
    </outputs>
    
    <tests>
        <test>
            <param name="database" value="FlyBase.sqlite" />
            <output name="gff" file="FlyBaseQuery_all.gff" />
        </test>
        <test>
            <param name="database" value="FlyBase.sqlite" />
            <param name="selections" value="batch_search" />
            <param name="batch_file" value="FlyBaseBatch.txt" />
            <output name="gff" file="FlyBaseQuery_batch.gff" />
        </test>
        <test>
            <param name="database" value="FlyBase.sqlite" />
            <param name="source" value="FlyBase" />
            <param name="selections" value="single_search" />
            <param name="seqid" value="2L" />
            <param name="features" value="intron" />
            <param name="start" value="7529" />
            <param name="end" value="9484" />
            <param name="strand" value="+" />
            <param name="within" value="true" />
            <output name="gff" file="FlyBaseQuery_single.gff" />
        </test>
    </tests>
    
    <help>
<![CDATA[

**Overview**

DB_to_gff is designed to access a with gff_to_db created sqlite database.
It has three different search approaches and can extract the original GFF files.
For this it uses the python module gffutils_.

.. _gffutils: http://pythonhosted.org/gffutils/contents.html

------

**Input**

The input file has to be a with gff_to_db created sqlite database.
If using the batch search option, the batch file has to be a tabular file.

------

**Output**

The output will be a gff file.

------

**Request all**

Simply saves the whole database into a GFF file.
Can be filtered for a specific source.

------

**Single search**

Enter a single search query.
Can be filtered for a specific source.

------

**Batch search**

Make multiple searches with a query file.
Query file has to be a tabular file.
In each line there have to be at least five tabs.
Values can be empty or use '.' as a place holder.
Use 'x' for unstranded features.
Use 'w' for within.
Can be filtered for a specific source.

**Format**::

        seqid feature start end strand within

**Example**::

            gene    7529    9483    +   w
        2L  mRNA    7528    9485    .   w
        2L  exon    7529    .       +   .
            CDS     7680    8116        
        2L  intron  8117                
        2L  exon    8229    9484    +   .

------

**db_to_gff parameter list**

The standalone, command-line version of db_to_gff uses the following parameters::

        --gff       [output GFF file name {gff}]
        --database  [input gff_to_db database file name {sqlite}]
        --batch     [input tabular file name with search data {tabular}]
        --all       returns all database entries
        --features  returns all entries with the requested features
        --source    returns features with the requested source
        --seqid     returns features with the requested seqid
        --start     only returns features that start with this region or after this region
        --end       only returns features that end with this region or before this region
        --strand    returns only features in strand direction
        --within    forces the feature to be completely within the provided --start and/or --end region

@CITATION@

]]>
    </help>
    
    <expand macro="citations"/>
    
</tool>

