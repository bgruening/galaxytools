<macros>
    <token name="@TOOL_VERSION@">4.3.6</token>
    <token name="@VERSION_SUFFIX@">0</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@TOOL_VERSION@">sortmerna</requirement>
            <requirement type="package" version="1.17">samtools</requirement>
        </requirements>
    </xml>
    <xml name="db_prep">
        <param name="seed_length" type="integer" min="0" max="100" value="18" label="Seed length for database indexing" help="(-L)"/>
        <param name="max_pos" type="integer" min="0" max="100000" value="10000" label="Maximum number of positions to store for each k-mer for database indexing" help="With 0, all positions are stored (--max_pos)"/>
    </xml>
    <xml name="output_alignments">
        <param name="print_all_reads" type="boolean" checked="false" truevalue="--print_all_reads" falsevalue="" label="Output null alignment strings for non-aligned reads"/>
        <conditional name="blast">
            <param name="blast_output" type="select" label="Output BLAST report?">
                <option value="True">Yes</option>
                <option value="False" selected="True">No</option>
            </param>
            <when value="True">
                <param name="blast_format" type="select" label="BLAST-like format?">
                    <option value="0">pairwise (--blast '0')</option>
                    <option value="1">tabular BLAST -m 8 format (--blast '1')</option>
                    <option value="1 cigar">tabular + column for CIGAR (--blast '1 cigar')</option>
                    <option value="1 cigar qcov">tabular + columns for CIGAR and query coverage (--blast '1 cigar qcov')</option>
                    <option value="1 cigar qcov qstrand">tabular + columns for CIGAR, query coverage and strand (--blast '1 cigar qcov qstrand')</option>
                </param>
            </when>
            <when value="False"/>
        </conditional>
    </xml>
    <xml name="otu_picking">
        <conditional name="otu">
            <param name="otu_map" type="select" label="Pick OTUs?">
                <option value="True">Yes</option>
                <option value="False" selected="true">No</option>
            </param>
            <when value="True">
                <param argument="--id" type="float" value="0.97" label="Percentage id similarity threshold" help="The alignment must still pass the E-value threshold" />
                <param argument="--coverage" type="float" value="0.97" label="Percentage query coverage threshold" help="The alignment must still pass the E-value threshold" />
                <param name="de_novo_otu" type="boolean" truevalue="True" falsevalue="False" label="FASTA/FASTQ file for reads matching database below percentage id" help="--de_novo_otu" />
            </when>
            <when value="False"/>
        </conditional>
    </xml>
    <xml name="evalue_macro">
        <param name="e_value" argument="-e" type="float" min="0" max="10" value="1" label="E-value threshold" help="Defines the 'statistical significance' of a local alignment. Exponentially 
            correllates with the Minimal Alignment score. Higher E-values (100, 1000, ...) cause more reads to pass the alignment threshold."/>
    </xml>
    <token name="@OTUS@">
        #if $report.otu.otu_map == 'True'
            --otu_map
            --id '$report.otu.id'
            --coverage '$report.otu.coverage'
            --de_novo_otu $report.otu.de_novo_otu
        #end if
    </token>
    <token name="@ALIGNMENTS@">
        $report.print_all_reads
        --sam
        --SQ
        #if $report.blast.blast_output == 'True'
            --blast '$report.blast.blast_format'
        #end if
    </token>
    <token name="@PREPROCESSING@">
        #set $ref = list()
        #if str( $databases_type.databases_selector ) == 'history'
            #for $db in $databases_type.database_name
                $ref.append('%s' % $db )
            #end for
        #else if str( $databases_type.databases_selector ) == 'cached_to_index'
            #for $db in $databases_type.input_databases.fields.path.split(",")
                $ref.append('%s' % $db )
            #end for
        #else
            #for $db in $databases_type.input_databases.fields.path.split(",")
                $ref.append('%s' % $db )
            #end for
        #end if
    </token>
    <xml name="citations">
        <citations>
            <citation type="doi">10.1093/bioinformatics/bts611</citation>
            <citation type="doi">10.1093/nar/gks1219</citation>
            <citation type="doi">10.1093/nar/gks1005</citation>
            <citation type="doi">10.1093/bioinformatics/btq461</citation>
            <citation type="doi">10.1038/nbt.2198</citation>
        </citations>
    </xml>
</macros>
