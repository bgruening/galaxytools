<tool id="viennarna_rnaeval" name="@EXECUTABLE@" version="@VERSION@.0">
    <description>Calculate energy of RNA sequences with given secondary structure</description>
    <macros>
        <token name="@EXECUTABLE@">RNAeval</token>
        <import>macros.xml</import>
    </macros>
     <expand macro="requirements" />
    <expand macro="stdio" />
    <expand macro="version_command" />
    <command>
<![CDATA[
        RNAeval < '$input' > '$tabularFile'
        -T$temperature -d$dangling
        #if $varExists('$advancedOptions.noconversion')
            $advancedOptions.noconversion
            $advancedOptions.verbose
            $advancedOptions.gquad
            $advancedOptions.circ
            $advancedOptions.logml
            $advancedOptions.notetra
            #if str($advancedOptions.shapeOption.shapeSelector) == "isUsed"
                --shape='$advancedOptions.shapeOption.shapeFile'
                #if str($advancedOptions.shapeOption.shapeMethod.methodSelector) == "W"
                    #set $s="W"
                    --shapeMethod=$s
                #else if str($advancedOptions.shapeOption.shapeMethod.methodSelector) == "Z"
                    #set $s="Zb"+str($advancedOptions.shapeOption.shapeMethod.b)
                    --shapeMethod=$s					
                    #if str($advancedOptions.shapeOption.shapeMethod.shapeConversion.conversionSelector) == "C"
                        #set $c="C"+str($advancedOptions.shapeOption.shapeMethod.shapeConversion.c)
                        --shapeConversion=$c
                    #else if str($advancedOptions.shapeOption.shapeMethod.shapeConversion.conversionSelector) == "L"
                        #set $c="Ls"+str($advancedOptions.shapeOption.shapeMethod.shapeConversion.s)+"i"+ str($advancedOptions.shapeOption.shapeMethod.shapeConversion.i)
                        --shapeConversion=$c
                    #else if str($advancedOptions.shapeOption.shapeMethod.shapeConversion.conversionSelector) == "O"
                        #set $c="Os"+str($advancedOptions.shapeOption.shapeMethod.shapeConversion.s)+"i"+ str($advancedOptions.shapeOption.shapeMethod.shapeConversion.i)
                        --shapeConversion=$c
                    #else
                        #set $c=str($advancedOptions.shapeOption.shapeMethod.shapeConversion.conversionSelector)
                        --shapeConversion=$c
                    #end if
                #else if str($advancedOptions.shapeOption.shapeMethod.methodSelector) == "D"
                    #set $s="Dm"+str($advancedOptions.shapeOption.shapeMethod.m)+"b"+str($advancedOptions.shapeOption.shapeMethod.b)
                    --shapeMethod=$s
                #end if
            #end if
        #end if
]]>
    </command>
    <inputs>
        <param format="txt,dbn" name="input" type="data" label="Input file"/>
        <param name="temperature" type="float" value="37.0" label="temperature [°C]" help="-T"/>
        <param name="dangling" type="select" label="how to treat dangling end energies" help="-d">
            <option value="0">0: ignore dangling ends</option>
            <option value="1">1: unpaired bases participate in one dangling end only</option>
            <option value="2" selected="True">2: unpaired bases participate in all dangling ends</option>
            <option value="3">3: allow coaxial stacking</option>
        </param>
        <conditional name="advancedOptions">
            <param name="advancedSelector" type="select" label="advanced options">
                <option value="basic">basic Options</option>
                <option value="advanced">advanced Options</option>
            </param>
            <when value="advanced">
                <param name="verbose" type="boolean" truevalue="--verbose" falsevalue="" checked="false" label="Print out energy of each loop in the structure." help="--verbose"/>
                <param name="gquad" type="boolean" truevalue="--gquad" falsevalue="" checked="false" label="G-quadruplex formation prediction" help="--gquad"/>
                <param name="circ" type="boolean" truevalue="--circ" falsevalue="" checked="false" label="Assume circular RNA" help="--circ"/>
                <param name="logml" type="boolean" truevalue="--logML" falsevalue="" checked="false" label="Logarithmic energy functions for multi-loops" help="--logML"/>
                <param name="notetra" type="boolean" truevalue="" falsevalue="--noTetra" checked="true" label="Allow stabilization for loops, hairpins etc." help=" Include special tabulated stabilizing energies for tri-, tetra- and hexaloop hairpins. Mostly for testing. (--noTetra)"/>
                <param name="noconversion" type="boolean" truevalue="" falsevalue="--noconv" checked="true" label="Convert Thymine to Uracil (T -> U)" help="Avoids confusion with DNA sequences (--noconv)"/>                
                <conditional name="shapeOption">
                    <param name="shapeSelector" type="select" label="Shape reactivity data">
                        <option value="isUsed">Use shape reactivity data</option>
                        <option value="notUsed" selected="true">Don't use shape reactivity data</option>
                    </param>
                    <when value ="isUsed">
                        <param type="data" name="shapeFile" format="shape,*" label="Shape file" argument="--shape"/>
                        <conditional name="shapeMethod">
                            <param name="methodSelector" type="select" label="Shape reactivity data" argument="--shapeMethod">
                                <option value="D" selected="true">D: Convert by using a linear equation according to Deigan et al 2009</option>
                                <option value="Z">Z: Convert SHAPE reactivities to pseudo energies according to Zarringhalam et al 2012.</option>
                                <option value="W">W: Apply a given vector of perturbation energies to unpaired nucleotides according to Washietl et al 2012</option>
                            </param>
                            <when value="D">
                                <param name="m" type="float" value="1.8" label="Slope m"/>
                                <param name="b" type="float" value="-0.6" label="Intercept"/>
                            </when>
                            <when value="Z">
                                <param name="b" type="float" value="-0.6" label="Intercept"/>
                                <conditional name="shapeConversion">
                                    <param name="conversionSelector" type="select" label="shape reactivity data">
                                        <option value="M">M: Use linear mapping according to Zarringhalam et al</option>
                                        <option value="C">C: Use a cutoff−approach to divide into paired and unpaired nucleotides</option>
                                        <option value="S">S: Skip the normalizing step since the input data already represents probabilities for being unpaired rather than raw reactivity values</option>
                                        <option value="L">L: Use a linear model to convert the reactivity into a probability for being unpaired</option>
                                        <option value="O" selected="true">O: Use a linear model to convert the log of the reactivity into a probability for being unpaired</option>
                                    </param>
                                    <when value="M">
                                    </when>
                                    <when value="C">
                                        <param name="c" type="float" value="0.25" label="Cutoff"/>
                                    </when>
                                    <when value="S">
                                    </when>
                                    <when value="L">
                                        <param name="s" type="float" value="0.68" label="Slope"/>
                                        <param name="i" type="float" value="0.2" label="Intercept"/>
                                    </when>
                                    <when value="O">
                                        <param name="s" type="float" value="1.6" label="Slope s"/>
                                        <param name="i" type="float" value="-2.29" label="Intercept"/>
                                    </when>
                                </conditional>
                            </when>
                            <when value="W">
                            </when>
                        </conditional>
                    </when>
                    <when value="notUsed">
                    </when>
                </conditional>
            </when>
            <when value="basic">
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data format="txt" name="tabularFile"/>
    </outputs>
    <tests>
        <test>
            <param name="input" value="rnaeval_input1.dbn"/>
            <output name="out_file" file="rnaeval_result1.txt"/>
        </test>
    </tests>
    <help>
<![CDATA[
**RNAeval**
RNAeval evaluates the free energy of an RNA molecule in fixed secondary structure. Sequences and structures are read alternately from stdin. The energy in Kcal/Mol is written to stdout.

-----

**Input format**

RNAeval requires one input file in a format similar to the Fasta format. The secondary strucures should be added after the sequence in dot-bracket notation. Sequence and structure can be interupted by an '&' to calculate the co-folding of two RNA-strands.


------

**Outputs**

First line: the sequence, second line: the structure with its corresponding energy


]]>
    </help>
    <expand macro="citations" />
</tool>
