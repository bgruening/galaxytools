<tool id="infernal_cmbuild" name="Build covariance models" version="@VERSION@.0">
    <description>from sequence alignments (cmbuild)</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <parallelism method="multi" split_inputs="alignment_infile" split_mode="to_size" split_size="10" merge_outputs="cmfile_outfile"></parallelism>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <command>
<![CDATA[
        cmbuild
            -F
            #if $is_summery_output:
                -o '$summary_outfile'
            #end if
            ## to many outputs, is that one really needed?
            ##-O $annotated_source_alignment_outfile
            $model_construction_opts.model_construction_opts_selector
            #if $model_construction_opts.model_construction_opts_selector == '--fast':
                --symfrac $model_construction_opts.symfrac
            #end if
            $noss
            $relative_weights_opts.relative_weights_opts_selector
            #if $relative_weights_opts.relative_weights_opts_selector == '--wblosum':
                --wid $relative_weights_opts.wid
            #end if            
            --p7ere $controlling_filter_p7_hmm.p7ere
            $controlling_filter_p7_hmm.p7ml
            --EmN $controlling_filter_p7_hmm.EmN
            --EvN $controlling_filter_p7_hmm.EvN
            --ElfN $controlling_filter_p7_hmm.ElfN
            --EgfN $controlling_filter_p7_hmm.EgfN            
            $effective_opts.effective_opts_selector
            #if str($effective_opts.effective_opts_selector) == '--eent':
                #if $effective_opts.ere
                    --ere $effective_opts.ere
                #end if
                #if $effective_opts.eminseq
                    --eminseq $effective_opts.eminseq
                #end if
                #if $effective_opts.ehmmre
                    --ehmmre $effective_opts.ehmmre
                #end if
                #if $effective_opts.eset
                    --eset $effective_opts.eset
                #end if
            #end if
            #if str($refining_opts.refining_opts_selector) == '--refine':
                #if $refining_opts.refine_output:
                    --refine '$refined_multiple_alignment_output'
                #else:
                    --refine /dev/null
                #end if
                $refining_opts.l
                $refining_opts.gibbs_opts.gibbs_opts_selector
                #if str($refining_opts.gibbs_opts.gibbs_opts_selector) == '--gibbs':
                    --seed $refining_opts.gibbs_opts.random_seed
                #end if
                $refining_opts.notrunc
                $refining_opts.cyk
            #end if
            '$cmfile_outfile'
            '$alignment_infile'
]]>
    </command>
        <inputs>
            <!-- Stockholm or SELEX
            SELEX is defined in EMBOSS datatypes
            -->
            <param name="alignment_infile" type="data" format="stockholm,selex" label="Sequence database"/>

            <conditional name="model_construction_opts">
                <param name="model_construction_opts_selector" type="select" label="These options control how consensus columns are defined in an alignment" help="">
                    <option value="--fast" selected="true">automatic (--fast)</option>
                    <option value="--hand">user defined (--hand)</option>
                </param>
                <when value="--fast">
                    <param name="symfrac" type="float" value="0.5"
                        label="Define the residue fraction threshold necessary to define a consensus (--symfrac)" help=""/>
                </when>
                <when value="--hand"/>
            </conditional>

            <param name="noss" truevalue="--noss" falsevalue="" checked="False" type="boolean"
                label="Ignore the secondary structure annotation, if any, in your multiple alignment file (--noss)" help=""/>

            <conditional name="relative_weights_opts">
                <param name="relative_weights_opts_selector" type="select" label="Options controlling relative weights" help="">
                    <option value="--wpb" selected="true">Henikoff (--wgb)</option>
                    <option value="--wgsc">Gerstein/Sonnhammer/Chothia (--wgsc)</option>
                    <option value="--wnone">no sequence weighting (--wnone)</option>
                    <option value="--wgiven">Sequence weight from given in input file (--wgiven)</option>
                    <option value="--wblosum">BLOSUM filtering algorithm (--wblosum)</option>
                </param>
                <when value="--wpb"/>
                <when value="--wgsc"/>
                <when value="--wnone"/>
                <when value="--wgiven"/>
                <when value="--wblosum">
                    <param name="wid" type="float" value="0.5"
                        label="Percent identity for clustering the alignment (--wid)" help=""/>
                </when>
            </conditional>
        
            <section name="controlling_filter_p7_hmm" title="Controlling Filter P7 HMM construction" >
                <param argument="--p7ere" type="float" value="0.38" label="For the filter p7 HMM, set minimum rel entropy/posn to" help="Set the target mean match state relative entropy for the filter p7 HMM"/>
                <param argument="--p7ml" type="boolean" truevalue="--p7ml" falsevalue="" checked="false" label="Define the filter p7 HMM as the ML p7 HMM" help="Use a mzimum likelihood p7 HMM built from the CM as the filter HMM"/>
                <param argument="--EmN" type="integer" value="200" label="Number of sampled seqs to use for p7 local MSV calibration" help=""/>
                <param argument="--EvN" type="integer" value="200" label="Number of sampled seqs to use for p7 local Vit calibration" help=""/>
                <param argument="--ElfN" type="integer" value="200" label="Number of sampled seqs to use for p7 local Fwd calibration" help=""/>
                <param argument="--EgfN" type="integer" value="200" label="Number of sampled seqs to use for p7 glocal Fwd calibration" help=""/>
            </section>
            
            <conditional name="effective_opts">
                <param name="effective_opts_selector" type="select" label="Options controlling effective sequence number" help="">
                    <option value="--eent" selected="true">entropy weighting strategy (--eent)</option>
                    <option value="--enone">Turn off the entropy weighting strategy (--enone)</option>
                </param>
                <when value="--enone"/>
                <when value="--eent">
                    <param name="ere" type="float" value=""
                        label="Set the target mean match state relative entropy" help="(--ere)" optional="true"/>

                    <param name="eminseq" type="integer" value=""
                        label="Define the minimum allowed effective sequence number" help="(--eminseq)" optional="true"/>

                    <param name="ehmmre" type="float" value=""
                        label="Set the target HMM mean match state relative entropy" help="(--ehmmre)" optional="true"/>

                    <param name="eset" type="integer" value=""
                        label="Set the effective sequence number for entropy weighting" help="(--eset)" optional="true"/>
                </when>
            </conditional>


            <conditional name="refining_opts">
                <param name="refining_opts_selector" type="select" label="Options for refining the input alignment" help="">
                    <option value="" selected="true">No refinement</option>
                    <option value="--refine">refine the input alignment</option>
                </param>
                <when value=""/>
                <when value="--refine">

                    <conditional name="gibbs_opts">
                        <param name="gibbs_opts_selector" type="select" label="refinement mode" help="">
                            <option value="" selected="true">expectation-maximization (EM)</option>
                            <option value="--gibbs">Gibbs sampling</option>
                        </param>
                        <when value=""/>
                        <when value="--gibbs">
                            <param name="random_seed" type="integer" value="0" label="Randam Seed" help="" />
                        </when>
                    </conditional>

                    <param name="l" truevalue="-l" falsevalue="" checked="False" type="boolean"
                        label="Turn on the local alignment algorithm" help="... which allows the alignment to span two or more subsequences if necessary"/>

                    <param name="notrunc" truevalue="--notrunc" falsevalue="" checked="False" type="boolean"
                        label="Turn off the truncated alignment algorithm" help=""/>

                    <param name="cyk" type="select" label="Options for refining the input alignment" help="">
                        <option value="" selected="true">optimal accuracy algorithm</option>
                        <option value="--cyk">align with the CYK algorithm</option>
                    </param>

                    <param name="refine_output" truevalue="" falsevalue="" checked="False" type="boolean"
                        label="Output the refined alignment file as it is used to build the covariance model" help=""/>

                </when>
            </conditional>


            <param name="is_summery_output" truevalue="" falsevalue="" checked="False" type="boolean"
                label="Output a summery file?" help=""/>

        </inputs>
    <outputs>

        <data format="text" name="summary_outfile" label="cmbuild summary on ${on_string}">
            <filter>is_summery_output is True</filter>
        </data>
        <!--<data format="stockholm" name="annotated_source_alignment_outfile" label="Annotated alignment from ${on_string}"/>-->
        <data format="cm" name="cmfile_outfile" label="Covariance models from ${on_string}"/>

        <data format="stockholm" name="refined_multiple_alignment_output" label="refined alignment file of ${on_string}">
            <filter>
                ((
                refining_opts['refining_opts_selector'] == "--refine" and
                refining_opts['refine_output'] is True
                ))
            </filter>
        </data>

    </outputs>
    
    <tests>
        <test>
            <param name="alignment_infile" value="cmbuild_input_tRNA5.sto"/>
            <output name="outfile">
                <assert_contents>
                    <has_text text="S     0    -1 0     1     4     0     1    89   108  -7.419  -8.664  -0.055  -5.118"/>
                </assert_contents>
            </output> 
        </test>
    </tests>
    <help>
<![CDATA[


**What it does**

cmbuild belongs to the INFERNAL software package that allows you to make consensus RNA secondary structure profiles, and use them to search nucleic acid sequence databases for homologous RNAs, or to create new structure-based multiple sequence alignments.

cm build builds a covariance model of an RNA multiple alignment. cmbuild uses the consensus structure to determine the architecture of the CM.


**Input**

Input file is a multiple sequence alignment file in Stockholm or SELEX format, and must contain consensus secondary structure annotation.
cmbuild uses the consensus structure to determine the architecture of the CM.

Example: simple example of a multiple RNA sequence alignment with secondary structure annotation

# STOCKHOLM 1.0
tRNA1             GCGGAUUUAGCUCAGUUGGG.AGAGCGCCAGACUGAAGAUCUGGAGGUCC
tRNA2             UCCGAUAUAGUGUAAC.GGCUAUCACAUCACGCUUUCACCGUGGAGA.CC
tRNA3             UCCGUGAUAGUUUAAU.GGUCAGAAUGGGCGCUUGUCGCGUGCCAGA.UC
tRNA4             GCUCGUAUGGCGCAGU.GGU.AGCGCAGCAGAUUGCAAAUCUGUUGGUCC
tRNA5             GGGCACAUGGCGCAGUUGGU.AGCGCGCUUCCCUUGCAAGGAAGAGGUCA
#=GC SS_cons      <<<<<<<..<<<<.........>>>>.<<<<<.......>>>>>.....<


**Output**

The output of cmbuild contains information about the size of your input alignment (in aligned columns
and # of sequences), and about the size of the resulting model.

In addition to writing CM(s) to the output file, cmbuild also outputs a single line for each model created to stdout. 
Each line has the following fields: 
- aln: the index of the alignment used to build the CM 
- idx: the index of the CM in the output file
- name: the name of the CM
- nseq: the number of sequences in the alignment used to build the CM
- eff nseq: the effective number of sequences used to build the model
- alen: the length of the alignment used to build the CM
- clen: the number of columns from the alignment defined as consensus (match) columns
- bps: the number of basepairs in the CM
- bifs: the number of bifurcations in the CM
- rel entropy: CM: the total relative entropy of the model divided by the number of consensus columns
- rel entropy: HMM: the total relative entropy of the model ignoring secondary structure divided by the number of consensus columns
- description: description of the model/alignment.


For further questions please refere to the Infernal Userguide_.

.. _Userguide: http://eddylab.org/infernal/Userguide.pdf


]]>
    </help>
    <expand macro="citations" />
    
</tool>
