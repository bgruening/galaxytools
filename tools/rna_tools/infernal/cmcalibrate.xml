<tool id="infernal_cmcalibrate" name="cmcalibrate" version="@VERSION@.0">
    <description>Fit exponential talis for covariance model E-value determination </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <command>
<![CDATA[
    cp
    ## CM file from the history or stored as database on disc
    #if $cm_opts.cm_opts_selector == "db":
        $cm_opts.database.fields.path
    #else:
        '$cm_opts.cmfile'
    #end if
    '$outfile'
    &&
    cmcalibrate
        -L$L
        #if $Calibrate_or_forecast.selector == "forecast"
            --forecast
            $Calibrate_or_forecast.memreq
            '$outfile'
        #elif $Calibrate_or_forecast.selector == "calibrate"
            #if $Calibrate_or_forecast.output_options_cond.selector == "extra"
                #if str($Calibrate_or_forecast.output_options_cond.output_options) != 'None'
                    #for j in $Calibrate_or_forecast.output_options_cond.output_options.value:
                        --$j ${j}.txt
                    #end for
                #end if
            #end if
            #if $Calibrate_or_forecast.cont_exp_tails_fits.selector == "top_n"
                --gtailn $Calibrate_or_forecast.cont_exp_tails_fits.gtailn
                --ltailn $Calibrate_or_forecast.cont_exp_tails_fits.ltailn
            #elif $Calibrate_or_forecast.cont_exp_tails_fits.selector == "frac"
                --tailp $Calibrate_or_forecast.cont_exp_tails_fits.tailp
            #end if
            --seed $Calibrate_or_forecast.add_opts.seed
            --beta $Calibrate_or_forecast.add_opts.beta
            $Calibrate_or_forecast.add_opts.nonbounded
            $Calibrate_or_forecast.add_opts.nonull3
            $Calibrate_or_forecast.add_opts.random
            #if str($Calibrate_or_forecast.add_opts.gc) != 'None'
                --gc '$Calibrate_or_forecast.add_opts.gc'
            #end if
            --cpu "\${GALAXY_SLOTS:-12}"
            '$outfile'
        #end if
    &&
    for f in /*.txt; do  [ -e '\$f' ] && echo "tar cvf '$additional_output' *.txt"; break; done

]]>
    </command>
    <inputs>
        <conditional name="cm_opts">
            <param name="cm_opts_selector" type="select" label="Subject covariance models">
                <option value="db" >Locally installed covariance models</option>
                <option value="histdb" selected="True">Covariance model from your history</option>
            </param>
            <when value="db">
                <param name="database" type="select" label="Covariance models">
                    <options from_file="infernal.loc">
                        <column name="value" index="0"/>
                        <column name="name" index="1"/>
                        <column name="path" index="2"/>
                    </options>
                </param>
            </when>
            <when value="histdb">
                <param name="cmfile" type="data" format="cm" label="Covariance models file from the history."/>
            </when>
        </conditional>
        <param argument="-L" type="float" value="1.6" min="0.01" max="160" label="Total length of random sequences to search" help="Set random seq length to search in Mb (megabases)"/>
        <conditional name="Calibrate_or_forecast">
            <param name="selector" type="select" label="Calibrate or Forecast">
                <option value="forecast" selected="true">Predict running time and/or required memory</option>
                <option value="calibrate">Calibrate</option>
            </param>
            <when value="forecast">
                <param argument="--memreq" truevalue="--memreq" falsevalue="" checked="false" type="boolean"
                    label="Predict required memory" help=""/>
            </when>
            <when value="calibrate">
                <conditional name="cont_exp_tails_fits" >
                    <param name="selector" type="select" label="Options controlling exponential tail fits">
                        <option value="top_n">Fit the top 'n' hits/Mb in thehistogram</option>
                        <option value="frac">Fit a fraction of the histogram</option>
                    </param>
                    <when value="top_n">
                        <param argument="--gtailn" type="integer" value="250" min="0" label=" Fit the top 'n' hits/Mb in histogram for glocal modes" help=""/>
                        <param argument="--ltailn" type="integer" value="750" min="0" label=" Fit the top 'n' hits/Mb in histogram for local modes" help=""/>
                    </when>
                    <when value="frac">
                        <param argument="--tailp" type="float" min="0" max="0.6" optional="true" label="Set fraction of histogram tail to fit to exp tail" help=""/>
                    </when>
                </conditional>
                <conditional name="output_options_cond">
                    <param name="selector" type="select" label="Output extra files">
                        <option value="extra">Output extra files</option>
                        <option value="none" selected="true">Don't output extra files</option>
                    </param>
                    <when value="extra">
                        <param name="output_options" type="select" label="Optional output files" multiple="true" display="checkboxes">
                            <option value="hfile">save fitted score histogram(s)</option>
                            <option value="sfile">save survival plot </option>
                            <option value="qqfile">save Q-Q plot for score histograms </option>
                            <option value="ffile">save lambdas for different tail fit probs</option>
                            <option value="xfile">save scores in fit tail</option>
                        </param>
                    </when>
                    <when value="none"/>
                </conditional>
                <section name="add_opts" title="Additional Options">
                    <param argument="--seed" type="integer" value="181"
                        label="RNG seed" help="If the seed is nonzero, stochas-tic simulations will be reproducible. If 0, the random number generator is seeded arbitrarily"/>
                    <param argument="--beta" type="float" value="1e-15"
                        label="Tail loss prob. for query dependent banding (QDB)" help="The beta parameter is the amount of probability mass excluded during band calculation, higher values of beta give greater speedups but sacrifice more accuracy than lower values."/>
                    <param argument="--nonbounded" truevalue="--nonbounded" falsevalue="" checked="false" type="boolean"
                        label="Turn off QDB during E-value calibration" help="This will slow down calibration"/>
                    <param argument="--nonull3" truevalue="--nonull3" falsevalue="" checked="false" type="boolean"
                        label="Turn off the null3 post hoc additional null model" help="This is not recommended unless you plan on using the same option to cmsearch and/or cmscan"/>
                    <param argument="--random" truevalue="--random" falsevalue="" checked="false" type="boolean"
                        label="use GC content of random null background model of CM" help="Use the background null model of the CM to generate the random sequences, instead of the more realistic HMM. Unless the CM was built using the --null option to cmbuild, the background null model will be 25% each A, C, G and U"/>
                    <param argument="--gc" type="data" format="*" optional="true" label="Use GC content distribution from file" help="Generate the random sequences using the nucleotide distribution from the sequence file"/>
                </section>
            </when>
        </conditional>





    </inputs>
    <outputs>
        <data  name="outfile" format="cm" label="cmcalibrate on ${on_string}"/>
        <data name="additional_output" format="tar" label="cmcalibrate additional output files on ${on_string}">
            <filter>
                ((
                Calibrate_or_forecast['selector'] == "calibrate" and
                Calibrate_or_forecast['output_options_cond']['selector'] == "extra"
                ))
            </filter>
        </data>
    </outputs>
    <tests>
        <test>
            <conditional name="cm_opts">
                <param name="cm_opts_selector" value="histdb"/>
                <param name="cmfile" value="cmcalibrate_input.cm"/>
            </conditional>
            <conditional name="Calibrate_or_forecast">
                <param name="selector" value="forecast"/>
            </conditional>
            <assert_stdout>
                <has_text text="Forecasting running time for CM calibration"/>
            </assert_stdout>
        </test>
    </tests>
    <help>
<![CDATA[


**What it does**

cmcalibrate determines exponential tail parameters for E-value determination by generating random sequences, searching them with the CM and collecting the scores of the resulting hits. A histogram of the bit scores of the hits is fit to an exponential tail, and the parameters of the fitted tail are saved to the CM file. The exponential tail parameters are then used to estimate the statistical significance of hits found in cmsearch and cmscan.


A CM file must be calibrated with cmcalibrate before it can be used in cmsearch or cmscan, with a single exception: it is not necessary to calibrate CM files that include only models with zero basepairs before running cmsearch.


The E-values parameters determined by cmcalibrate are only used by the cmsearch and cmscan programs. If you are not going to use these programs then do not waste time calibrating your models.


**Output format**

Please check out the `Userguide <http://eddylab.org/infernal/Userguide.pdf>`_, page 75 for details about the additioal output files.

For further questions please refere to the Infernal `Userguide <http://eddylab.org/infernal/Userguide.pdf>`_.


]]>
    </help>

    <expand macro="citations" />


</tool>
