<tool id="intarna" name="IntaRNA" version="3.4.1" profile="23.0">
    <description>Efficient RNA-RNA interaction prediction incorporating accessibility and seeding of interaction sites.</description>
    <macros>
        <macro name="query_macro">
            <param argument="--query" type="data" format="fasta" label="Query sequence(s)" help="Sequences have to use IUPAC nucleotide encoding. File must be in FASTA format"/>
            <conditional name="qAcc_cond">
                <param argument="--qAcc" type="select" label="Accessibility computation" help="">
                    <option value="N">No accessibility contributions ('N')</option>
                    <option selected="true" value="C">Computation of accessibilities ('C')</option>
                    <option value="P">Unpaired probabilities in RNAplfold format from --qAccFile</option>
                    <option value="E">ED values in RNAplfold Pu-like format from --qAccFile</option>
                </param>
                <when value="N"/>
                <when value="C"/>
                <when value="P">
                    <param argument="--qAccFile" type="data" format="txt" label="RNAplfold unpaired probability data" help="Unpaired probabilities for subsequences as computed and reported by RNAplfold or IntaRNA"/>
                </when>
                <when value="E">
                    <param argument="--qAccFile" type="data" format="txt" label="IntaRNA accessibility energy penalties (ED terms)" help="Accessibility energy penalty terms (ED) for subsequences as computed and reported by IntaRNA"/>
                </when>
            </conditional>
            <param argument="--qAccW" type="integer" min="0" max="99999" value="150" label="Max. interaction length" help="... for query accessibility computation. Set to 0 to use full sequence length"/>
            <param argument="--qAccL" type="integer" min="0" max="99999" value="100" label="Max. loop length" help="... for query accessibility computation. 0 defaults to sliding window size 'qAccW"/>
        </macro>
        <macro name="target_macro">
            <param argument="--target" type="data" format="fasta" label="Target sequence(s)" help="Sequences have to use IUPAC nucleotide encoding. File must be in FASTA format"/>
            <conditional name="tAcc_cond">
                <param argument="--tAcc" type="select" label="Accessibility computation" help="">
                    <option value="N">No accessibility contributions ('N')</option>
                    <option selected="true" value="C">Computation of accessibilities ('C')</option>
                    <option value="P">Unpaired probabilities in RNAplfold format from --qAccFile</option>
                    <option value="E">ED values in RNAplfold Pu-like format from --qAccFile</option>
                </param>
                <when value="N"/>
                <when value="C"/>
                <when value="P">
                    <param argument="--tAccFile" type="data" format="txt" label="RNAplfold unpaired probability data" help="Unpaired probabilities for subsequences as computed and reported by RNAplfold or IntaRNA"/>
                </when>
                <when value="E">
                    <param argument="--tAccFile" type="data" format="txt" label="IntaRNA accessibility energy penalties (ED terms)" help="Accessibility energy penalty terms (ED) for subsequences as computed and reported by IntaRNA"/>
                </when>
            </conditional>
            <param argument="--tAccW" type="integer" min="0" max="99999" value="150" label="Max. interaction length" help="... for target accessibility computation. Set to 0 to use full sequence length"/>
            <param argument="--tAccL" type="integer" min="0" max="99999" value="100" label="Max. loop length" help="... for target accessibility computation. 0 defaults to sliding window size 'tAccW"/>
        </macro>
        <macro name="seed_macro">
            <param argument="--noSeed" type="boolean" truevalue="--noSeed" falsevalue="" checked="false" label="Disable seed constraint entirely for computation" help=""/>
            <param argument="--seedBP" type="integer" min="2" max="20" value="7" label="Min. number of basepairs in seed" help="number of inter-molecular base pairs within the seed region"/>
            <param argument="--seedMaxUP" type="integer" min="0" max="10" value="0" label="Max. overall number of unpaired bases in seed" help="Maximal number of unpaired seed bases both in query and target"/>
        </macro>
        <macro name="interaction_macro">
            <param argument="--mode" type="select" label="Prediction mode" help="">
                <option selected="true" value="H">Heuristic ('H')</option>
                <option value="M">Exact but slow ('M')</option>
            </param>
        </macro>
        <macro name="output_macro">
            <param argument="--outCsvCols" type="text" value="id1,start1,end1,id2,start2,end2,subseqDP,hybridDP,E" label="Comma separated list of CSV column IDs to print" help="An empty argument prints all possible columns from the following available ID list:        [id1], [id2], [seq1], [seq2], [subseq1], [subseq2], [subseqDP], [subseqDB], [start1], [end1], [start2], [end2], [hybridDP], [hybridDB], [hybridDPfull], [hybridDBfull], [E], [ED1], [ED2], [Pu1], [Pu2], [E_init], [E_loops], [E_dangleL], [E_dangleR], [E_endL], [E_endR], [E_hybrid], [E_norm], [E_hybridNorm], [E_add], [seedStart1], [seedEnd1], [seedStart2], [seedEnd2], [seedE], [seedED1], [seedED2], [seedPu1], [seedPu2], [w], [Eall], [Zall], [P_E]"/>
            <param argument="--outCsvSort" type="text" value="E" label="Sort CSV output for the given column label from CSV column IDs to print" help="One of the column IDs to be printed that is used to sort the CSV table output"/>
            <param argument="--outNumber" type="integer" min="0" max="1000" value="1" label="Max. number of predictions per query/target pair" help="Number of optimal and suboptimal interaction to predict per query-target pair"/>
            <param argument="--outOverlap" type="select" label="Overlapping of suboptimal predictions" help="Whether or not interactions can overlap">
                <option value="N">in none of the sequences</option>
                <option value="T">in the target only</option>
                <option selected="true" value="Q">in the query only</option>
                <option value="B">in both sequences</option>
            </param>
            <param argument="--outPairwise" type="boolean" truevalue="--outPairwise" falsevalue="" checked="false" label="Enables pairwise sequence processing, i.e. interactions are only computed for each corresponding query-target pair (same index) instead of all-vs-all" help=""/>
        </macro>
    </macros>
    <requirements>
        <requirement type="package" version="3.4.1">intarna</requirement>
    </requirements>
    <version_command>IntaRNA --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
    
        IntaRNA
            ## Multithreading
                --threads "\${GALAXY_SLOTS:-1}"
            ## basic general parameters
                ## Query parameters
                --query '$advancedOptions.query.query'
                --qAcc $advancedOptions.query.qAcc_cond.qAcc
                #if $advancedOptions.query.qAcc_cond.qAcc == "P" or $advancedOptions.query.qAcc_cond.qAcc == "E"
                    --qAccFile '$advancedOptions.query.qAcc_cond.qAccFile'
                #end if
                --qAccW $advancedOptions.query.qAccW
                --qAccL $advancedOptions.query.qAccL
                ## Target param.
                --target '$advancedOptions.target.target'
                --tAcc $advancedOptions.target.tAcc_cond.tAcc
                #if $advancedOptions.target.tAcc_cond.tAcc == "P" or $advancedOptions.target.tAcc_cond.tAcc == "E"
                    --tAccFile '$advancedOptions.target.tAcc_cond.tAccFile'
                #end if
                --tAccW $advancedOptions.target.tAccW
                --tAccL $advancedOptions.target.tAccL
                ## Seed param.
                #if $advancedOptions.seed.noSeed
                    $advancedOptions.seed.noSeed
                #else
                    --seedBP $advancedOptions.seed.seedBP
                    #if $advancedOptions.seed.seedMaxUP > 0
                        --seedMaxUP $advancedOptions.seed.seedMaxUP
                    #end if
                #end if
                ## Prediction param.
                --mode $advancedOptions.interaction.mode
                --energy V
                ## Output param.
                --out $outfile
                --outMode C
                --outSep "`printf "\t"`"
                --outNumber $advancedOptions.output.outNumber
                --outOverlap $advancedOptions.output.outOverlap
                --outCsvCols '$advancedOptions.output.outCsvCols'
                --outCsvSort '$advancedOptions.output.outCsvSort'
                $advancedOptions.output.outPairwise
            #if $advancedOptions.advancedSelector == "advanced"
                ## Query parameters
                --qIntLoopMax $advancedOptions.query.qIntLoopMax
                #if $advancedOptions.query.qRegion
                    --qRegion '$advancedOptions.query.qRegion'
                #end if
                ## Target param.
                --tIntLoopMax $advancedOptions.target.tIntLoopMax
                #if $advancedOptions.target.tRegion
                    --tRegion '$advancedOptions.target.tRegion'
                #end if
                ## Seed param.
                #if not $advancedOptions.seed.noSeed
                    --seedMaxE $advancedOptions.seed.seedMaxE
                    --seedMinPu $advancedOptions.seed.seedMinPu
                    #if $advancedOptions.seed.seedQMaxUP
                        --seedQMaxUP $advancedOptions.seed.seedQMaxUP
                    #end if
                    #if $advancedOptions.seed.seedTMaxUP
                        --seedTMaxUP $advancedOptions.seed.seedTMaxUP
                    #end if
                    #if $advancedOptions.seed.seedQRange
                        --seedQRange '$advancedOptions.seed.seedQRange'
                    #end if
                    #if $advancedOptions.seed.seedTRange
                        --seedTRange '$advancedOptions.seed.seedTRange'
                    #end if
                #end if
                ## SHAPE param.
                #if $advancedOptions.shape.qShape
                    --qShape '$advancedOptions.shape.qShape'
                #end if
                #if $advancedOptions.shape.tShape
                    --tShape '$advancedOptions.shape.tShape'
                #end if
                ## Prediction param.
                --model $advancedOptions.interaction.model
                --energyVRNA '$advancedOptions.interaction.energyVRNA'
                --temperature $advancedOptions.interaction.temperature
                #if $advancedOptions.interaction.windowWidth
                    --windowWidth $advancedOptions.interaction.windowWidth
                    --windowOverlap $advancedOptions.interaction.windowOverlap
                #end if
                ##Output param.
                --outMaxE $advancedOptions.output.outMaxE
                --outDeltaE $advancedOptions.output.outDeltaE
                ## add additional output files
                #if $advancedOptions.output.add_output_cond.selector == "add"
                  #if str($advancedOptions.output.add_output_cond.add_output.value) != 'None'
                    #for $outFile in $advancedOptions.output.add_output_cond.add_output.value:
                      #if $outFile == 'qAcc' or $outFile == 'tAcc'
                        #set curOutFile = str($outFile) + ':intarna_' + str($outFile) + '.led'
                      #else
                      #if $outFile == 'qAcc' or $outFile == 'tAcc' or $outFile == 'qPu' or $outFile == 'tPu'
                        #set curOutFile = str($outFile) + ':intarna_' + str($outFile) + '.lpu'
                      #else
                        #set curOutFile = str($outFile) + ':intarna_' + str($outFile) + '.tabular'
                      #end if
                      #end if
                      --out '$curOutFile'
                    #end for
                  #end if
                #end if
            #end if
]]>  
    </command>
    <inputs>
        <conditional name="advancedOptions">
            <param name="advancedSelector" type="select" label="Options">
                <option value="basic">Basic Options</option>
                <option value="advanced">Advanced Options</option>
            </param>
            <when value="advanced">
                <section expanded="True" name="query" title="Query Parameters">
                    <expand macro="query_macro"/>
                    <param argument="--qIntLoopMax" type="integer" min="0" max="30" value="16" label="Maximal number of unpaired bases between neighbored interacting bases" help="... to be considered in interactions within the query"/>
                    <param argument="--qRegion" type="text" optional="true" label="Query regions to be considered for interaction prediction" help="In the format 'from1-to1,from2-to2,..' assuming indexing starts with 1"/>
                </section>
                <section expanded="True" name="target" title="Target Parameters">
                    <expand macro="target_macro"/>
                    <param argument="--tIntLoopMax" type="integer" min="0" max="30" value="16" label="Maximal number of unpaired bases between neighbored interacting bases" help="... to be considered in interactions within the target"/>
                    <param argument="--tRegion" type="text" optional="true" label="Target regions to be considered for interaction prediction" help="In the format 'from1-to1,from2-to2,..' assuming indexing starts with 1"/>
                </section>
                <section name="seed" title="Seed Parameters">
                    <expand macro="seed_macro"/>
                    <param argument="--seedQMaxUP" type="integer" min="-1" max="20" value="-1" label="Max. number of unpaired bases within the query's seed region" help=""/>
                    <param argument="--seedTMaxUP" type="integer" min="-1" max="20" value="-1" label="Max. number of unpaired bases within the target's seed region" help=""/>
                    <param argument="--seedMaxE" type="integer" min="-999" max="999" value="0" label="Max. energy a seed region may have" help=""/>
                    <param argument="--seedMinPu" type="float" min="0" max="1" value="0" label="Min. unpaired probability (per sequence)" help=""/>
                    <param argument="--seedQRange" type="text" value="" optional="true" label="Interval(s) in the query to search for seeds" help="in format 'from1-to1,from2-to2,...' (Note, only for single query)"/>
                    <param argument="--seedTRange" type="text" value="" optional="true" label="Interval(s) in the target to search for seeds" help="in format 'from1-to1,from2-to2,...' (Note, only for single query)"/>
                </section>
                <section name="shape" title="SHAPE Input Parameters">
                    <param argument="--qShape" type="data" format="txt" optional="true" label="SHAPE reactivity data to guide the query's accessibility computation" help="Two column text file with sequence positions (1-based) and normalized reactivity values. Missing values may be left out, or assigned a negative score"/>
                    <param argument="--tShape" type="data" format="txt" optional="true" label="SHAPE reactivity data to guide the query's accessibility computation" help="Two column text file with sequence positions (1-based) and normalized reactivity values. Missing values may be left out, or assigned a negative score"/>
                </section>
                <section name="interaction" title="Prediction Parameters">
                    <expand macro="interaction_macro"/>
                    <param argument="--model" type="select" label="Prediction target" help="Sets what to optimize for">
                        <option value="S">Single-site minimum-free-energy interaction (IntaRNA v1+2 mode)</option>
                        <option selected="true" value="X">Single-site minimum-free-energy interaction (via seed-extension)</option>
                        <option value="P">Single-site interaction with minimal free ensemble energy per site</option>
                    </param>
                    <param argument="--energyVRNA" type="select" label="Energy parameter" help="">
                        <option value="Turner99">Turner-1999</option>
                        <option selected="true" value="Turner04">Turner-2004</option>
                        <option value="Andronescu07">Andronescu-2007</option>
                    </param>
                    <param argument="--temperature" type="integer" min="0" max="100" value="37" label="Temperature [Celsius]" help="Temperature scaling of ViennaRNA energy parameters"/>
                    <param argument="--windowWidth" type="integer" min="10" max="99999" optional="True" label="Window-based computation: window width" help="If set, large sequences are decomposed in overlapping windows of the given size to reduce the memory consumption of IntaRNA."/>
                    <param argument="--windowOverlap" type="integer" min="10" max="99999" value="150" label="Window-based computation: window overlap" help="If window width is set, this specifies the overlap of the windows. Note, it has to exceed the maximal interaction length of both query and target."/>
                </section>
                <section name="output" title="Output Options">
                    <expand macro="output_macro"/>
                    <param argument="--outMaxE" type="float" value="0" label="Max. absolute energy of an interaction" help="Only interactions with E ≤ maxE are reported"/>
                    <param argument="--outDeltaE" type="float" value="100" label="Max. delta energy above mfe of an interaction" help="suboptimal output: only interactions with E ≤ (minE+deltaE) are reported"/>
                    <conditional name="add_output_cond">
                        <param name="selector" type="select" label="Additional output files">
                            <option value="add">Output additional files</option>
                            <option selected="true" value="none">Don't output additional files</option>
                        </param>
                        <when value="add">
                            <param name="add_output" type="select" label="Additional output files" help="Written in a format similar to RNAplfold unpaired probability output." display="checkboxes" multiple="True">
                                <option value="spotProb">Spot probabilities of all index combinations (spotProb)</option>
                                <option value="qSpotProb">Spot probabilities for all query indices (qSpotProb)</option>
                                <option value="tSpotProb">Spot probabilities for all target indices (tSpotProb)</option>
                                <option value="pMinE">For all index combinations: minimal energy of any interaction covering the index pair (pMinE)</option>
                                <option value="qMinE">For all query indices: minimal energy of any interaction covering the position (qMinE)</option>
                                <option value="tMinE">For all target indices: minimal energy of any interaction covering the position (tMinE)</option>
                                <option value="qAcc">The query's ED values (qAcc)</option>
                                <option value="tAcc">The target's ED values (tAcc) </option>
                                <option value="qPu">The query's unpaired probabilities used for ED values (qPu) </option>
                                <option value="tPu">The target's unpaired probabilities used for ED values (tPu)</option>
                            </param>
                        </when>
                        <when value="none"/>
                    </conditional>
                </section>
            </when>
            <when value="basic">
                <section expanded="True" name="query" title="Query Parameters">
                    <expand macro="query_macro"/>
                </section>
                <section expanded="True" name="target" title="Target Parameters">
                    <expand macro="target_macro"/>
                </section>
                <section name="seed" title="Seed Parameters">
                    <expand macro="seed_macro"/>
                </section>
                <section name="interaction" title="Interaction Parameters">
                    <expand macro="interaction_macro"/>
                </section>
                <section name="output" title="Output Options">
                    <expand macro="output_macro"/>
                </section>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data format="tabular" label="IntaRNA on ${on_string}" name="outfile"/>
        <collection label="Spot probability of all index combinations, on ${on_string}" name="spotProb_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'spotProb' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="tabular" pattern="intarna_(?P&lt;designation&gt;spotProb.*)\.tabular" visible="true"/>
        </collection>
        <collection label="Spot probability for all query indices, on ${on_string}" name="qSpotProb_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'qSpotProb' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="tabular" pattern="intarna_(?P&lt;designation&gt;qSpotProb.*)\.tabular" visible="true"/>
        </collection>
        <collection label="Spot probability for all target indices, on ${on_string}" name="tSpotProb_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'tSpotProb' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="tabular" pattern="intarna_(?P&lt;designation&gt;tSpotProb.*)\.tabular" visible="true"/>
        </collection>
        <collection label="For all query indices: minimal energy of any interaction covering the position, on ${on_string}" name="qMinE_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'qMinE' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="tabular" pattern="intarna_(?P&lt;designation&gt;qMinE.*)\.tabular" visible="true"/>
        </collection>
        <collection label="For all target indices: minimal energy of any interaction covering the position, on ${on_string}" name="tMinE_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'tMinE' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="tabular" pattern="intarna_(?P&lt;designation&gt;tMinE.*)\.tabular" visible="true"/>
        </collection>
        <collection label="For all index combinations: minimal energy of any interaction covering the index pair, on ${on_string}" name="pMinE_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'pMinE' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="tabular" pattern="intarna_(?P&lt;designation&gt;pMinE.*)\.tabular" visible="true"/>
        </collection>
        <collection label="Query local accessibility penalties (ED values), on ${on_string}" name="qAcc_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'qAcc' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="txt" pattern="intarna_(?P&lt;designation&gt;qAcc.*)\.led" visible="true"/>
        </collection>
        <collection label="Target local accessibility penalties (ED values), on ${on_string}" name="tAcc_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'tAcc' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="txt" pattern="intarna_(?P&lt;designation&gt;tAcc.*)\.led" visible="true"/>
        </collection>
        <collection label="Query local unpaired probabilities, on ${on_string}" name="qPu_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'qPu' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="txt" pattern="intarna_(?P&lt;designation&gt;qPu.*)\.lpu" visible="true"/>
        </collection>
        <collection label="Target local unpaired probabilities, on ${on_string}" name="tPu_output" type="list">
            <filter>
                ((
                advancedOptions['advancedSelector'] == "advanced" and
                advancedOptions['output']['add_output_cond']['selector'] == "add" and
                'tPu' in advancedOptions['output']['add_output_cond']['add_output']
                ))
            </filter>
            <discover_datasets format="txt" pattern="intarna_(?P&lt;designation&gt;tPu.*)\.lpu" visible="true"/>
        </collection>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <conditional name="advancedOptions">
                <param name="advancedSelector" value="basic"/>
                <section name="query">
                    <param name="query" value="intarna_query.fa"/>
                </section>
                <section name="target">
                    <param name="target" value="intarna_target.fa"/>
                </section>
            </conditional>
            <output file="intarna_result.tabular" name="outfile"/>
        </test>
        <test expect_num_outputs="5">
            <conditional name="advancedOptions">
                <param name="advancedSelector" value="advanced"/>
                <section name="query">
                    <param name="query" value="intarna_query.fa"/>
                </section>
                <section name="target">
                    <param name="target" value="intarna_target.fa"/>
                </section>
                <section name="output">
                    <conditional name="add_output_cond">
                        <param name="selector" value="add"/>
                        <param name="add_output" value="spotProb,qMinE,tAcc,qPu"/>
                    </conditional>
                </section>
            </conditional>
            <output file="intarna_result.tabular" name="outfile"/>
            <output_collection count="4" name="spotProb_output" type="list">
            </output_collection>
            <output_collection count="4" name="qMinE_output" type="list">
            </output_collection>
            <output_collection count="2" name="qPu_output" type="list">
            </output_collection>
            <output_collection count="2" name="tAcc_output" type="list">
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[

**What it does**
Efficient RNA-RNA interaction prediction incorporating accessibility and seeding of interaction sites
During the last few years, several new small regulatory RNAs (sRNAs) have been discovered in bacteria. Most of them act as post-transcriptional regulators by base pairing to a target mRNA, causing translational repression or activation, or mRNA degradation. Numerous sRNAs have already been identified, but the number of experimentally verified targets is considerably lower. Consequently, computational target prediction is in great demand. Many existing target prediction programs neglect the accessibility of target sites and the existence of a seed, while other approaches are either specialized to certain types of RNAs or too slow for genome-wide searches.
IntaRNA, developed by `Prof. Backofen's bioinformatics group at Freiburg University <http://www.bioinf.uni-freiburg.de/>`_, is a general and fast approach to the prediction of RNA-RNA interactions incorporating both the accessibility of interacting sites as well as the existence of a user-definable seed interaction. We successfully applied IntaRNA to the prediction of bacterial sRNA targets and determined the exact locations of the interactions with a higher accuracy than competing programs.
.. class:: infomark
Please refer to  `IntaRNA github repository <https://github.com/BackofenLab/IntaRNA>`_ for use cases and additional information.
**Input**
RNA sequences in *FASTA* format
**Output**
RNA-RNA interaction information in CSV format and additional information/files on demand

]]>
    </help>
    <citations>
        <citation type="doi">10.1093/nar/gkx279</citation>
        <citation type="doi">10.1093/nar/gku359</citation>
        <citation type="doi">10.1093/bioinformatics/btn544</citation>
    </citations>
</tool>
