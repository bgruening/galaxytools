<tool id="optuna_finetune" name="Optuna Hyperparameter Search for Finetuning model" version="0.1.0">
    <requirements>
        <requirement type="package" version="3.9.18">python</requirement>
        <requirement type="package" version="2.1.1">torch</requirement>
        <requirement type="package" version="0.16.1">torchvision</requirement>
        <requirement type="package" version="2.1.1">torchaudio</requirement>
        <requirement type="package" version="4.35.2">transformers</requirement>
        <requirement type="package" version="2.15.0">datasets</requirement>
        <requirement type="package" version="1.26.2">numpy</requirement>
        <requirement type="package" version="2.1.3">pandas</requirement>
        <requirement type="package" version="1.11.4">scipy</requirement>
        <requirement type="package" version="1.3.2">scikit-learn</requirement>
        <requirement type="package" version="3.8.2">matplotlib</requirement>
        <requirement type="package" version="0.13.0">seaborn</requirement>
        <requirement type="package" version="0.5.5">umap-learn</requirement>
        <requirement type="package" version="1.81">biopython</requirement>
        <requirement type="package" version="3.6.1">optuna</requirement>
        <requirement type="package" version="4.66.1">tqdm</requirement>
        <requirement type="package" version="0.24.1">accelerate</requirement>
        <requirement type="package" version="0.4.1">evaluate</requirement>
    </requirements>
    <command><![CDATA[
        python '$__tool_directory__/test.py'
        --format '$input_type.format'
        #if $input_type.file_number.file_count == 'single':
        --input '$input_type.file_number.input_file'
        --train_percent '$input_type.file_number.train_percent'
        --test_percent '$input_type.file_number.test_percent'
        --val_percent '$input_type.file_number.val_percent'
        #else:
            --train_val '$input_type.file_number.train_val_file'
            --test '$input_type.file_number.test_file'
            --train_percent '$input_type.file_number.train_percent'
        #end if
        --percentage_summary '$percentage_summary'
        --hyperparameter_method '$hyperparameter_method.method'
        #if $hyperparameter_method.method == 'manual':
            --lr '$hyperparameter_method.lr'
            --batch '$hyperparameter_method.batch'
            --accum '$hyperparameter_method.accum'
            --dropout '$hyperparameter_method.dropout'
            --weight_decay '$hyperparameter_method.weight_decay'
            --warmup_pct '$hyperparameter_method.warmup_pct'
            --lora_rank '$hyperparameter_method.lora_rank'
            --lora_init_scale '$hyperparameter_method.lora_init_scale'
            --lora_scaling_rank '$hyperparameter_method.lora_scaling_rank'
            --epochs '$hyperparameter_method.epochs'
        #else:
            --n_trials '$hyperparameter_method.n_trials'
            --lr '$hyperparameter_method.lr'
            --batch '$hyperparameter_method.batch'
            --accum '$hyperparameter_method.accum'
            --dropout '$hyperparameter_method.dropout'
            --weight_decay '$hyperparameter_method.weight_decay'
            --warmup_pct '$hyperparameter_method.warmup_pct'
            --lora_rank '$hyperparameter_method.lora_rank'
            --lora_init_scale '$hyperparameter_method.lora_init_scale'
            --lora_scaling_rank '$hyperparameter_method.lora_scaling_rank'
            --epochs_per_trial '$hyperparameter_method.epochs_per_trial'
        #end if
        --seed '$seed'
    ]]>
    </command>
    <inputs>
        <conditional name="input_type">
            <param name="format" type="select" label="Input file format">
                <option value="csv">CSV</option>
                <option value="fasta">FASTA</option>
            </param>
            <when value="csv">
                <conditional name="file_number">
                    <param name="file_count" type="select" label="Number of input files">
                        <option value="single">Single file (for train/test/val)</option>
                        <option value="double">Two files (one for train/val, one for test)</option>
                    </param>
                    <when value="single">
                        <param name="input_file" type="data" format="csv" label="CSV input file" help="Select your input CSV file for train/test/val"/>
                        <param name="train_percent" type="float" value="0.7" min="0" max="1" label="Training data percentage" help="Proportion of data to use for training (between 0 and 1)"/>
                        <param name="test_percent" type="float" value="0.15" min="0" max="1" label="Testing data percentage" help="Proportion of data to use for testing (between 0 and 1)"/>
                        <param name="val_percent" type="float" value="0.15" min="0" max="1" label="Validation data percentage" help="Proportion of data to use for validation (between 0 and 1)"/>
                        <!-- <validator type="expression" message="Percentages must sum to 1">float($train_percent) + float($test_percent) + float($val_percent) == 1</validator> -->
                    </when>
                    <when value="double">
                        <param name="train_val_file" type="data" format="csv" label="CSV input file for train/val" help="Select your input CSV file for train/val"/>
                        <param name="test_file" type="data" format="csv" label="CSV input file for test" help="Select your input CSV file for test"/>
                        <param name="train_percent" type="float" value="0.8" min="0" max="1" label="Training data percentage" help="Proportion of train/val data to use for training (between 0 and 1)"/>
                        <!-- <validator type="expression" message="Training percentage must be less than 1">float($train_percent) < 1</validator> -->
                    </when>
                </conditional>
            </when>
            <when value="fasta">
                <conditional name="file_number">
                    <param name="file_count" type="select" label="Number of input files">
                        <option value="single">Single file (for train/test/val)</option>
                        <option value="double">Two files (one for train/val, one for test)</option>
                    </param>
                    <when value="single">
                        <param name="input_file" type="data" format="fasta" label="FASTA input file" help="Select your input FASTA file for train/test/val"/>
                        <param name="train_percent" type="float" value="0.7" min="0" max="1" label="Training data percentage" help="Proportion of data to use for training (between 0 and 1)"/>
                        <param name="test_percent" type="float" value="0.15" min="0" max="1" label="Testing data percentage" help="Proportion of data to use for testing (between 0 and 1)"/>
                        <param name="val_percent" type="float" value="0.15" min="0" max="1" label="Validation data percentage" help="Proportion of data to use for validation (between 0 and 1)"/>
                        <!-- <validator type="expression" message="Percentages must sum to 1">float($train_percent) + float($test_percent) + float($val_percent) == 1</validator> -->
                    </when>
                    <when value="double">
                        <param name="train_val_file" type="data" format="fasta" label="FASTA input file for train/val" help="Select your input FASTA file for train/val"/>
                        <param name="test_file" type="data" format="fasta" label="FASTA input file for test" help="Select your input FASTA file for test"/>
                        <param name="train_percent" type="float" value="0.8" min="0" max="1" label="Training data percentage" help="Proportion of train/val data to use for training (between 0 and 1)"/>
                        <!-- <validator type="expression" message="Training percentage must be less than 1">float($train_percent) < 1</validator> -->
                    </when>
                </conditional>
            </when>
        </conditional>
        <conditional name="hyperparameter_method">
            <param name="method" type="select" label="Hyperparameter Selection Method">
                <option value="manual">Manual Selection</option>
                <option value="optuna">Optuna Hyperparameter Search</option>
            </param>
            <when value="manual">
                <param name="lr" type="float" value="3e-5" label="Learning Rate" help="Learning rate for the optimizer"/>
                <param name="batch" type="select" label="Batch Size" help="Number of samples processed together">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="4">4</option>
                    <option value="8" selected="true">8</option>
                    <option value="16">16</option>
                </param>
                <param name="accum" type="select" label="Gradient Accumulation Steps" help="Number of steps to accumulate gradients before updating">
                    <option value="1">1</option>
                    <option value="2" selected="true">2</option>
                    <option value="4">4</option>
                    <option value="8">8</option>
                </param>
                <param name="dropout" type="float" value="0.1" min="0" max="1" label="Dropout Rate" help="Fraction of units to drop for regularization"/>
                <param name="weight_decay" type="float" value="0.01" min="0" max="1" label="Weight Decay" help="L2 regularization term"/>
                <param name="warmup_pct" type="float" value="0.1" min="0" max="1" label="Warmup Percentage" help="Fraction of total steps for learning rate warmup"/>
                <param name="lora_rank" type="integer" value="4" min="1" label="LoRA Rank" help="Rank for Low-Rank Adaptation"/>
                <param name="lora_init_scale" type="float" value="0.01" min="0" max="1" label="LoRA Init Scale" help="Initial scale for LoRA weights"/>
                <param name="lora_scaling_rank" type="integer" value="1" min="1" label="LoRA Scaling Rank" help="Scaling rank for LoRA"/>
                <param name="epochs" type="integer" value="20" min="1" label="Number of Epochs" help="Number of training epochs"/>
            </when>
            <when value="optuna">
                <param name="n_trials" type="integer" value="10" min="1" label="Number of trials" help="Number of parameter settings that are sampled"/>
                <param name="lr" type="text" value="(1e-5,1e-2)" label="Learning Rate Range" help="(min,max) values for learning rate (log scale)"/>
                <param name="batch" type="text" value="[1,2,4,8]" label="Batch Size Options" help="[option1,option2,...] for batch size"/>
                <param name="accum" type="text" value="[2,4,8]" label="Gradient Accumulation Options" help="[option1,option2,...] for gradient accumulation steps"/>
                <param name="dropout" type="text" value="(0.1,0.9)" label="Dropout Rate Range" help="(min,max) values for dropout rate"/>
                <param name="weight_decay" type="text" value="(1e-5,1e-3)" label="Weight Decay Range" help="(min,max) values for weight decay (log scale)"/>
                <param name="warmup_pct" type="text" value="(0.01,0.3)" label="Warmup Percentage Range" help="(min,max) values for warmup percentage"/>
                <param name="lora_rank" type="text" value="(4,32,4)" label="LoRA Rank Range" help="(min,max,step) values for LoRA rank"/>
                <param name="lora_init_scale" type="text" value="(1e-4,1e-1)" label="LoRA Init Scale Range" help="(min,max) values for LoRA init scale (log scale)"/>
                <param name="lora_scaling_rank" type="text" value="(1,4)" label="LoRA Scaling Rank Range" help="(min,max) values for LoRA scaling rank"/>
                <param name="epochs_per_trial" type="integer" value="5" min="1" label="Number of Epochs per Trial" help="Number of training epochs for each Optuna trial"/>
            </when>
        </conditional>
        <param name="seed" type="integer" value="42" min="0" label="Random Seed" help="Set a seed for reproducibility (default: 42)"/>
    </inputs>
    <outputs>
        <data name="percentage_summary" format="txt" label="Percentage Summary"/>
    </outputs>
    <help><![CDATA[
.. class:: infomark

**What it does**

This tool performs protein sequence classification using a fine-tuned ProtT5 model with LoRA (Low-Rank Adaptation). It can be used for binary classification tasks on protein sequences.

-----

**Inputs**

1. Input Files:
- For single file mode: One FASTA file containing both positive and negative examples.
- For two file mode: Two FASTA files, one for train/validation and one for testing.

2. Training Parameters:
- Train Percentage: Proportion of data to use for training (e.g., 0.8 for 80% training data).
- Test and Validation Percentages (for single file mode): Proportions for test and validation sets.

3. Hyperparameter Selection:
- Manual: Set specific values for learning rate, batch size, etc.
- Optuna: Define ranges for hyperparameter optimization.

-----

**Outputs**

1. Trained Model: The best performing model saved during training.
2. Performance Metrics: Accuracy, loss, and other relevant metrics.
3. (Optional) Optuna Study Results: If using Optuna, a summary of the hyperparameter search.

-----

**How to use**

1. Select your input file(s) and set the data split percentages.
2. Choose between manual hyperparameter selection or Optuna optimization.
3. If manual, input your desired hyperparameter values.
4. If using Optuna, define the ranges for each hyperparameter.
5. Run the tool and review the output metrics and model performance.

-----

**Note**

- Ensure your FASTA files are properly formatted with labels.
- The tool uses GPU acceleration if available, which can significantly reduce processing time.
- For large datasets or extensive hyperparameter searches, the tool may take a considerable amount of time to run.    
]]></help>
</tool>
