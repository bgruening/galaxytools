<tool name="panaroo" id="panaroo" version="1.3.2">
  <!--Source in git at: https://github.com/fubar2/galaxy_tf_overlay-->
  <!--Created by toolfactory@galaxy.org at 04/09/2023 16:34:40 using the Galaxy Tool Factory.-->
  <description>panaroo - an updated pipeline for pangenome investigation</description>
  <requirements>
    <requirement version="1.3.2" type="package">panaroo</requirement>
  </requirements>
  <stdio>
    <exit_code range="137" level="fatal_oom" description="Out of memory error."/>
    <exit_code range=":-1" level="fatal" description="Please check Tool Standard Error using the result i(information) link - the tool failed"/>
    <exit_code range="1:" level="fatal" description="Please check Tool Standard Error using the result i(information) link - the tool failed"/>
  </stdio>
  <version_command><![CDATA[echo "1.3.2"]]></version_command>
  <command><![CDATA[mkdir -p results &&
bash $runme]]></command>
  <configfiles>
    <configfile name="runme"><![CDATA[
#### run panaroo with a list of gff files
touch ./inlist.txt
#for i, afile in enumerate($gff_list)
  #set renafile = "renamed_%d.gff" % i
  ln -s $afile $renafile
  echo "$renafile" >> ./inlist.txt 
#end for
panaroo --clean-mode $clean_mode.value -i ./inlist.txt -o results 
 ]]></configfile>
  </configfiles>
  <inputs>
    <param name="gff_list" type="data" optional="false" label="Select the one or more gff inputs for this analysis" help="WARNING: In strict mode, Panaroo can fail with ValueError: max() arg is an empty sequence if there is only one small input." format="gff3" multiple="true"/>
    <param name="clean_mode" type="select" label="Set the mode for Panaroo cleaning. Strict is generally a reliable start." help="">
      <option value="strict"> strict (warning - can lead to Panaroo failing with a value_error - not a bug in this tool!</option>
      <option value="moderate">moderate</option>
      <option value="sensitive">sensitive</option>
    </param>
  </inputs>
  <outputs>
    <collection name="results" type="list" label="Panaroo outputs">
      <discover_datasets pattern="__name_and_ext__" directory="results" visible="false"/>
    </collection>
  </outputs>
  

<tests>
    <test>
      <output_collection name="results">
     <element file="gene_presence_absence.csv" name="gene_presence_absence" compare="sim_size" delta_frac="0.05"/>
      </output_collection>
      <param name="gff_list" value="gff_list_1_sample,gff_list_2_sample,gff_list_3_sample"/>
      <param name="clean_mode" value="strict"/>
    </test>
 </tests>


  <help><![CDATA[
 See the `Panaroo`_ git hub repository for more details 
 
 *Mode*
 
 By default Panaroo runs in its strictest (most conservative) mode. We have found that for most use cases this removes potential sources of contamination and error whilst retaining the majority of genes researchers are interested in.
 
 Very rare plasmids are difficult to distinguish from contamination. Thus, if you are interested in retaining such plasmids at the expense of added contamination we recommend running panaroo using its most sensitive mode
 
 *Different input formats*
 
 Panaroo now supports multiple input formats. To use non-standard GFF3 files you must profile the input file as a list in a text file (one per line). Separate GFF and FASTA files can be provided per isolate by providing each file delimited by a space or a tab. Genbank file formats are also supported with extensions '.gbk', '.gb' or '.gbff'. These must compliant with Genbank/ENA/DDJB. This can be forced in Prokka by specifying the --compliance parameter.
 
 NOTE: Some annotations file such as those from RefSeq include annotations that break some of the assumptions of Panaroo. These include gene annotations of unusual length or that with premature stop codons (pseudogenes). By default Panaroo will throw an error if it encounters these annotations. You can automatically filter out such annotations by calling panaroo with the --remove-invalid-genes flag.
 Pre-processing scripts
 
 It is usually a good idea to perform some rudimentary quality checks on the input data prior to running Panaroo. This can be accomplished using the pre-processing script provided.
 
 The reference mash database can be downloaded from https://mash.readthedocs.io/en/latest/tutorials.html
 
 *Running Prokka*
 
 Panaroo is designed to correct for many sources of error introduced during annotation. This includes refinding genes in cases were there are inconsistencies in the annotation of the same genetic sequence in different genomes.
 
 It is also possible to force Prokka to use the same gene model for each genome. This will improve the consistency of annotations but any biases present in the model will be present in all genome annotations.
 
 To run Prokka in this way you can build an initial model by running Prodigal on a genome assembly you believe is a reliable representative of you data set.
 
 Annotations can then be generated by running Prokka with the --prodigaltf parameter
 
 
 .. _Panaroo: https://github.com/gtonkinhill/panaroo/
  ]]></help>
  <citations>
    <citation type="doi">10.1186/s13059-020-02090-4</citation>
    <citation type="doi">10.1093/bioinformatics/bts573</citation>
  </citations>
</tool>

