<tool id="nanopolish_variants" name="Finds SNPs and polishes" version="0.1.0">
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        cp $input_reads_fa reads.fasta && cp $input_index reads.fasta.index  &&
        cp $input_index_fai reads.fasta.index.fai  && cp $input_index_gzi  reads.fasta.index.gzi  &&
        cp $input_index_readdb reads.fasta.index.readdb && 
        cp $input_reads_bam reads.bam && cp $input_reads_bai reads.bam.bai &&
        nanopolish variants --consensus polished.fa -w "tig00000001:200000-202000" -r reads.fasta -b reads.bam -g $input_genome_fa
    ]]></command>
    <inputs>
        <param type="data" name="input_reads_fa" format="fasta" />
        <param type="data" name="input_reads_bam" format="bam" />
        <param type="data" name="input_reads_bai" format="bai" />
        <param type="data" name="input_genome_fa" format="fasta" />
        <param type="data" name="input_index" format="zip" />
        <param type="data" name="input_index_fai" format="zip" />
        <param type="data" name="input_index_gzi" format="zip" />
        <param type="data" name="input_index_readdb" format="zip" />
    </inputs>
    <outputs>
        <data name="output1" format="fasta" from_work_dir="polished.fa" />
    </outputs>
    <tests>
        <test>
            <param name="input_reads_fa" value="reads.fasta"/>
            <param name="input_reads_bam" value="reads.sorted.bam"/>
            <param name="input_reads_bai" value="reads.sorted.bam.bai"/>
            <param name="input_genome_fa" value="draft.fa"/>
            <param name="input_index" value="reads.fasta.index" />
            <param name="input_index_fai" value="reads.fasta.index.fai" />
            <param name="input_index_gzi" value="reads.fasta.index.gzi" />
            <param name="input_index_readdb" value="reads.fasta.index.readdb" />
            <output name="output1" file="polished.fa"/>
        </test>
    </tests>
    <help><![CDATA[
        Usage: nanopolish variants [OPTIONS] --reads reads.fa --bam alignments.bam --genome genome.fa
        Find SNPs using a signal-level HMM
        -v, --verbose                        display verbose output
        --snps                           only call SNPs
        --consensus=FILE                 run in consensus calling mode and write polished sequence to FILE
        --fix-homopolymers               run the experimental homopolymer caller
        --faster                         minimize compute time while slightly reducing consensus accuracy
        -w, --window=STR                     find variants in window STR (format: <chromsome_name>:<start>-<end>)
        -r, --reads=FILE                     the 2D ONT reads are in fasta FILE
        -b, --bam=FILE                       the reads aligned to the reference genome are in bam FILE
        -e, --event-bam=FILE                 the events aligned to the reference genome are in bam FILE
        -g, --genome=FILE                    the reference genome is in FILE
        -p, --ploidy=NUM                     the ploidy level of the sequenced genome
        -q  --methylation-aware=STR          turn on methylation aware polishing and test motifs given in STR (example: -q dcm,dam)
        --genotype=FILE                  call genotypes for the variants in the vcf FILE
        -o, --outfile=FILE                   write result to FILE [default: stdout]
        -t, --threads=NUM                    use NUM threads (default: 1)
        -m, --min-candidate-frequency=F      extract candidate variants from the aligned reads when the variant frequency is at least F (default 0.2)
        -d, --min-candidate-depth=D          extract candidate variants from the aligned reads when the depth is at least D (default: 20)
        -x, --max-haplotypes=N               consider at most N haplotype combinations (default: 1000)
        --max-rounds=N                   perform N rounds of consensus sequence improvement (default: 50)
        -c, --candidates=VCF                 read variant candidates from VCF, rather than discovering them from aligned reads
        -a, --alternative-basecalls-bam=FILE if an alternative basecaller was used that does not output event annotations then use basecalled sequences from FILE. The signal-level events will still be taken from the -b bam.
        --calculate-all-support          when making a call, also calculate the support of the 3 other possible bases
        --models-fofn=FILE               read alternative k-mer models from FILE
    ]]></help>
    <expand macro="citations" />
</tool>