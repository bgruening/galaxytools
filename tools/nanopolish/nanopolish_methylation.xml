<tool id="nanopolish_methylation" name="Nanopolish methylation" version="@VERSION@+galaxy0">
    <description>- Classify nucleotides as methylated or not.</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        ln -s '$input_merged' reads.fasta && 
        
        #if $input_reads_raw.extension == 'fast5':
            mkdir fast5_files && ln -s '$input_reads_raw' fast5_files/read1.fast5 &&

        #else if $input_reads_raw.extension == 'fast5.tar':
            ln -s '$input_reads_raw' fast5_files.tar &&
            mkdir fast5_files && tar -xf fast5_files.tar -C fast5_files &&

        #else if $input_reads_raw.extension == 'fast5.tar.bz2':
            ln -s '$input_reads_raw' fast5_files.tar.bz2 &&
            mkdir fast5_files && tar -xjf fast5_files.tar.bz2 -C fast5_files &&

        #else:
            ln -s '$input_reads_raw' fast5_files.tar.gz &&
            mkdir fast5_files && tar -xzf fast5_files.tar.gz -C fast5_files &&

        #end if

        nanopolish index 
        -d fast5_files/
        #if $adv.input_seq_summary:
          -s '$adv.input_seq_summary'
        #end if 
        reads.fasta &&

        ln -s '$b' reads.bam &&
        ln -s '${b.metadata.bam_index}' reads.bam.bai &&
        #if $reference_source.reference_source_selector == 'history':
            ln -f -s '$reference_source.ref_file' genome.fa &&
        #else:
            ln -f -s '$reference_source.ref_file.fields.path' genome.fa &&
        #end if
        
        nanopolish call-methylation
        -r reads.fasta
        -b reads.bam
        -g genome.fa
        #if str($batchsize):
            -K $batchsize
        #end if
        --threads "\${GALAXY_SLOTS:-4}"        
        #if $w and str($w).strip():
          -w "${w}"
        #end if  
        > methylation_calls.tsv
    ]]></command>
    <inputs>
      <!-- index inputs -->
        <param type="data" name="input_merged" format="fasta,fastq" label="Basecalled merged reads.fa"/>
        <param type="data" name="input_reads_raw" format="fast5.tar.gz,fast5.tar.bz2,fast5.tar" label="Flat archive file of raw fast5 files"/>

        <!-- variants consensus inputs -->
        <param type="data" argument="-b" format="bam" label="Reads aligned to the reference genome" />
        <conditional name="reference_source">
          <param name="reference_source_selector" type="select" label="Load reference genome from">
            <option value="cached">Local cache</option>
            <option value="history">History</option>
          </param>
          <when value="cached">
            <param name="ref_file" type="select" label="Using reference genome" help="REFERENCE_SEQUENCE">
              <options from_data_table="all_fasta">
              </options>
              <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
            </param>
          </when>
          <when value="history">
            <param name="ref_file" type="data" format="fasta" label="Use the following dataset as the reference sequence" help="REFERENCE_SEQUENCE; You can upload a FASTA sequence to the history and use it as reference" />
          </when>
        </conditional>

        <section name="adv" title="Optional data inputs">
            <!-- optional inputs -->
            <param type="data" name="input_seq_summary" format="txt" optional="true" label="Sequencing summary file from albacore" help="(-s)"/>       
        </section>        

        <param argument="-w" type="text" optional="true"
            label="find variants in window of region chromsome:start-end" />
        <param name="batchsize" type="integer" optional="true" value="" label="Batch size" help="(-K)"/>

    </inputs>

    <outputs>
      <!-- variants consensus outputs -->
        <data name="output_methylation_calls" format="tabular" from_work_dir="methylation_calls.tsv" label="called methylation sites" />
    </outputs>
    <tests>
        <test>
            <param name="input_merged" ftype="fasta" value="reads.fasta" />
            <param name="input_reads_raw" ftype="fast5.tar.gz" value="fast5_files.tar.gz" />
            <param name="b" value="reads.sorted.bam" />
            <param name="reference_source_selector" value="history" />
            <param name="ref_file" value="draft.fa" />
            <param name="w" value="tig00000001:200000-202000" />
            <param name="batchsize" value="512" />
            <output name="output_methylation_calls" file="methylation_calls.tsv" />
        </test>
         <test>
            <param name="input_merged" ftype="fasta" value="reads.fasta" />
            <param name="input_reads_raw" ftype="fast5.tar.gz" value="fast5_files.tar.gz" />
            <param name="reference_source_selector" value="history" />
            <param name="ref_file" value="draft.fa"/>
            <param name="b" value="reads.sorted.bam" />
            <param name="w" value="tig00000001:200000-202000" />
            <param name="batchsize" value="512" />
            <output name="output_methylation_calls" file="methylation_calls.tsv" />
        </test>
    </tests>    
    <help><![CDATA[
        Usage: nanopolish call-methylation [OPTIONS] --reads reads.fa --bam alignments.bam --genome genome.fa
        Classify nucleotides as methylated or not.
        
        Quickstart tutorial and manual available at:
        http://nanopolish.readthedocs.io/en/latest/quickstart_call_methylation.html

    ]]></help>
    <expand macro="citations" />
</tool>
