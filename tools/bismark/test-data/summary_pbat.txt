Create a temporary index with the offered files from the user. Utilizing the script: bismark_genome_preparation
Generating index with: 'bismark_genome_preparation --bowtie2 /tmp/tmp8kpqo9nd'
Writing bisulfite genomes out into a single MFA (multi FastA) file

Bisulfite Genome Indexer version v0.23.1 (last modified: 27 Jan 2021)

Step I - Prepare genome folders - completed



Total number of conversions performed:
C->T:	146875
G->A:	150504

Step II - Genome bisulfite conversions - completed


Bismark Genome Preparation - Step III: Launching the Bowtie 2 indexer
Please be aware that this process can - depending on genome size - take several hours!
Settings:
  Output files: "BS_CT.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  genome_mfa.CT_conversion.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 189039
Using parameters --bmax 141780 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 141780 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 108022 (target: 141779)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (141780) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 103681 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 103682 for bucket 1
Getting block 2 of 7
  Reserving size (141780) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 45007 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 45008 for bucket 2
Getting block 3 of 7
  Reserving size (141780) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 132948 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 132949 for bucket 3
Getting block 4 of 7
  Reserving size (141780) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 130718 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 130719 for bucket 4
Getting block 5 of 7
  Reserving size (141780) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 97734 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 97735 for bucket 5
Getting block 6 of 7
  Reserving size (141780) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 138784 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 138785 for bucket 6
Getting block 7 of 7
  Reserving size (141780) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 107281 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 107282 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 235897
fchr[G]: 235897
fchr[T]: 386401
fchr[$]: 756159
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4446745 bytes to primary EBWT file: BS_CT.1.bt2
Wrote 189044 bytes to secondary EBWT file: BS_CT.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 756159
    bwtLen: 756160
    sz: 189040
    bwtSz: 189040
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 47260
    offsSz: 189040
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3939
    numLines: 3939
    ebwtTotLen: 252096
    ebwtTotSz: 252096
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 189039
Using parameters --bmax 141780 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 141780 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 94519 (target: 141779)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (141780) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 101773 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 101774 for bucket 1
Getting block 2 of 8
  Reserving size (141780) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 122588 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 122589 for bucket 2
Getting block 3 of 8
  Reserving size (141780) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 84364 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 84365 for bucket 3
Getting block 4 of 8
  Reserving size (141780) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 89930 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 89931 for bucket 4
Getting block 5 of 8
  Reserving size (141780) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 84688 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 84689 for bucket 5
Getting block 6 of 8
  Reserving size (141780) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 85925 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 85926 for bucket 6
Getting block 7 of 8
  Reserving size (141780) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 137417 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 137418 for bucket 7
Getting block 8 of 8
  Reserving size (141780) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 49467 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 49468 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 235897
fchr[G]: 235897
fchr[T]: 386401
fchr[$]: 756159
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4446745 bytes to primary EBWT file: BS_CT.rev.1.bt2
Wrote 189044 bytes to secondary EBWT file: BS_CT.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 756159
    bwtLen: 756160
    sz: 189040
    bwtSz: 189040
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 47260
    offsSz: 189040
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3939
    numLines: 3939
    ebwtTotLen: 252096
    ebwtTotSz: 252096
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Settings:
  Output files: "BS_GA.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  genome_mfa.GA_conversion.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 189039
Using parameters --bmax 141780 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 141780 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 8; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 94519 (target: 141779)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (141780) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 40586 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 40587 for bucket 1
Getting block 2 of 8
  Reserving size (141780) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 111565 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 111566 for bucket 2
Getting block 3 of 8
  Reserving size (141780) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 68975 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 68976 for bucket 3
Getting block 4 of 8
  Reserving size (141780) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 139056 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 139057 for bucket 4
Getting block 5 of 8
  Reserving size (141780) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 48909 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48910 for bucket 5
Getting block 6 of 8
  Reserving size (141780) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 119865 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 119866 for bucket 6
Getting block 7 of 8
  Reserving size (141780) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 99941 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 99942 for bucket 7
Getting block 8 of 8
  Reserving size (141780) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 127255 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 127256 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 386401
fchr[G]: 533276
fchr[T]: 533276
fchr[$]: 756159
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4446745 bytes to primary EBWT file: BS_GA.1.bt2
Wrote 189044 bytes to secondary EBWT file: BS_GA.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 756159
    bwtLen: 756160
    sz: 189040
    bwtSz: 189040
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 47260
    offsSz: 189040
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3939
    numLines: 3939
    ebwtTotLen: 252096
    ebwtTotSz: 252096
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 189039
Using parameters --bmax 141780 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 141780 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 3, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 3; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 94519 (target: 141779)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (141780) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 116725 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 116726 for bucket 1
Getting block 2 of 8
  Reserving size (141780) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 112262 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 112263 for bucket 2
Getting block 3 of 8
  Reserving size (141780) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 35604 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 35605 for bucket 3
Getting block 4 of 8
  Reserving size (141780) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 134848 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 134849 for bucket 4
Getting block 5 of 8
  Reserving size (141780) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 119200 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 119201 for bucket 5
Getting block 6 of 8
  Reserving size (141780) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 29827 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 29828 for bucket 6
Getting block 7 of 8
  Reserving size (141780) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 115430 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 115431 for bucket 7
Getting block 8 of 8
  Reserving size (141780) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 92256 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 92257 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 386401
fchr[G]: 533276
fchr[T]: 533276
fchr[$]: 756159
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4446745 bytes to primary EBWT file: BS_GA.rev.1.bt2
Wrote 189044 bytes to secondary EBWT file: BS_GA.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 756159
    bwtLen: 756160
    sz: 189040
    bwtSz: 189040
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 47260
    offsSz: 189040
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3939
    numLines: 3939
    ebwtTotLen: 252096
    ebwtTotSz: 252096
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
Running bismark with: 'bismark --bam --temp_dir /tmp/tmpkx0_3my8 -o /tmp/tmpkx0_3my8/results --quiet --fastq -L 20 -D 15 -R 2 --pbat --un --ambiguous /tmp/tmp8kpqo9nd input_1.fq'
Bowtie 2 seems to be working fine (tested command 'bowtie2 --version' [2.4.4])
Output format is BAM (default)
Alignments will be written out in BAM format. Samtools found here: '/home/simon/miniconda3/envs/mulled-v1-90e2e4231aa5d6120bc8a9da9b0bb870674da22450b0d9176f9d0e34b79acf38/bin/samtools'
Reference genome folder provided is /tmp/tmp8kpqo9nd/	(absolute path is '/tmp/tmp8kpqo9nd/)'
FastQ format specified

Input files to be analysed (in current folder '/tmp/tmpst55kl8c/job_working_directory/000/25/working'):
input_1.fq
Library was specified as PBAT-Seq (Post-Bisulfite Adapter Tagging), only performing alignments to the complementary strands (CTOT and CTOB)
Created output directory /tmp/tmpkx0_3my8/results/!

Output will be written into the directory: /tmp/tmpkx0_3my8/results/

Using temp directory: /tmp/tmpkx0_3my8
Temporary files will be written into the directory: /tmp/tmpkx0_3my8/
Setting parallelization to single-threaded (default)

Summary of all aligner options:	-q -L 20 -D 15 -R 2 --score-min L,0,-0.2 --ignore-quals --quiet
Current working directory is: /tmp/tmpst55kl8c/job_working_directory/000/25/working

Now reading in and storing sequence information of the genome specified in: /tmp/tmp8kpqo9nd/

chr chrY_JH584300_random (182347 bp)
chr chrY_JH584301_random (259875 bp)
chr chrY_JH584302_random (155838 bp)
chr chrY_JH584303_random (158099 bp)

Single-core mode: setting pid to 1

Single-end alignments will be performed
=======================================

Input file is in FastQ format
Writing a G -> A converted version of the input file input_1.fq to /tmp/tmpkx0_3my8/input_1.fq_G_to_A.fastq

Created G -> A converted version of the FastQ file input_1.fq (44115 sequences in total)

Input file is input_1.fq_G_to_A.fastq (FastQ)

Now running 2 instances of Bowtie 2 against the bisulfite genome of /tmp/tmp8kpqo9nd/ with the specified options: -q -L 20 -D 15 -R 2 --score-min L,0,-0.2 --ignore-quals --quiet

Now starting the Bowtie 2 aligner for GAreadCTgenome (reading in sequences from /tmp/tmpkx0_3my8/input_1.fq_G_to_A.fastq with options -q -L 20 -D 15 -R 2 --score-min L,0,-0.2 --ignore-quals --quiet --nofw)
Using Bowtie 2 index: /tmp/tmp8kpqo9nd/Bisulfite_Genome/CT_conversion/BS_CT

Found first alignment:	1_1	4	*	0	0	*	*	0	0	TTATATATATTAAATAAATTAATTTTTTTTATTTATATATTAAATTTTTTAATTAATTTATTAATATTTTATAAATTTTTAAATA	AAAAAEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAEEAEEEEEE	YT:Z:UU
Now starting the Bowtie 2 aligner for GAreadGAgenome (reading in sequences from /tmp/tmpkx0_3my8/input_1.fq_G_to_A.fastq with options -q -L 20 -D 15 -R 2 --score-min L,0,-0.2 --ignore-quals --quiet --norc)
Using Bowtie 2 index: /tmp/tmp8kpqo9nd/Bisulfite_Genome/GA_conversion/BS_GA

Found first alignment:	1_1	4	*	0	0	*	*	0	0	TTATATATATTAAATAAATTAATTTTTTTTATTTATATATTAAATTTTTTAATTAATTTATTAATATTTTATAAATTTTTAAATA	AAAAAEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEAEEAEEEEEE	YT:Z:UU

>>> Writing bisulfite mapping results to /tmp/tmpkx0_3my8/results/input_1_bismark_bt2.bam <<<

Unmapped sequences will be written to /tmp/tmpkx0_3my8/results/input_1.fq_unmapped_reads.fq.gz
Ambiguously mapping sequences will be written to /tmp/tmpkx0_3my8/results/input_1.fq_ambiguous_reads.fq.gz

Reading in the sequence file input_1.fq
Processed 44115 sequences in total


Successfully deleted the temporary file /tmp/tmpkx0_3my8/input_1.fq_G_to_A.fastq

Final Alignment report
======================
Sequences analysed in total:	44115
Number of alignments with a unique best hit from the different alignments:	13
Mapping efficiency:	0.0%

Sequences with no alignments under any condition:	44059
Sequences did not map uniquely:	43
Sequences which were discarded because genomic sequence could not be extracted:	0

Number of sequences with unique best (first) alignment came from the bowtie output:
CT/CT:	0	((converted) top strand)
CT/GA:	0	((converted) bottom strand)
GA/CT:	11	(complementary to (converted) top strand)
GA/GA:	2	(complementary to (converted) bottom strand)

Final Cytosine Methylation Report
=================================
Total number of C's analysed:	307

Total methylated C's in CpG context:	1
Total methylated C's in CHG context:	3
Total methylated C's in CHH context:	227
Total methylated C's in Unknown context:	0

Total unmethylated C's in CpG context:	1
Total unmethylated C's in CHG context:	4
Total unmethylated C's in CHH context:	71
Total unmethylated C's in Unknown context:	0

C methylated in CpG context:	50.0%
C methylated in CHG context:	42.9%
C methylated in CHH context:	76.2%
Can't determine percentage of methylated Cs in Unknown context (CN or CHN) if value was 0


Bismark completed in 0d 0h 0m 6s

====================
Bismark run complete
====================

