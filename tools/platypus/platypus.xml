<tool id="bg_platypus" name="Platypus" version="0.0.11">
    <description>efficient and accurate variant-detection in high-throughput sequencing data</description>
    <requirements>
        <requirement type="package">platypus</requirement>
    </requirements>
    <stdio>
        <!-- Anything other than zero is an error -->
        <exit_code range="1:" />
        <exit_code range=":-1" />
    </stdio>
    <command interpreter="python">
<![CDATA[
      Platypus.py callVariants
        -output $outfile
        --refFile $reference_genome
            --nCPU \${GALAXY_SLOTS:-4}


  --regions=REGIONS     region as comma-separated list of chr:start-end, or just list of chr, or nothing
  --skipRegionsFile=SKIPREGIONSFILE
                        region as comma-separated list of chr:start-end, or just list of chr, or nothing
  --bamFiles=BAMFILES   (Required) Comma-delimited list of bam file names

##  --bufferSize=BUFFERSIZE
##                        Data will be buffered in regions of this size


  --minReads=$minReads
        <param name="minReads" type="integer" value="" label="Minimum number of supporting reads required before a variant candidate will be considered"
            help="(--minReads)">
            <validator type="in_range" min="0"/>
        </param>

  --maxReads=$maxReads
        <param name="maxReads" type="integer" value="" label="Maximium coverage in window"
            help="(--maxReads)">
            <validator type="in_range" min="0"/>
        </param>


##  --verbosity=VERBOSITY
##                        Level of logging
  --printAlignments=PRINTALIGNMENTS
                        If 1, then alignments of reads to haplotypes will be
                        printed to the log file


  --maxReadLength=$maxReadLength
        <param name="maxReadLength" type="integer" value="" label="Maximum read length"
            help="(--maxReadLength)">
            <validator type="in_range" min="0"/>
        </param>

##  --logFileName=LOGFILENAME
##                        Name of log file
  --source=SOURCEFILE   vcf file(s) to get candidates from

  --parseNCBI=PARSENCBI

##    --compressReads=COMPRESSREADS
##                        If this is set to 1, then all reads will be
##                        compressed, and decompressd on demand. This will slow
##                        things down, but reduce memory usage.

##  --qualBinSize=QUALBINSIZE
##                        This sets the granularity used when compressing quality scores. If > 1 then quality compression is lossy

  --maxSize=$maxSize
        <param name="maxSize" type="integer" value="" label="Largest variant to consider"
            help="(--maxSize)">
            <validator type="in_range" min="0"/>
        </param>

  $largeWindows
        <param name="largeWindows" type="boolean" label="Window size can be up to the maximum size of variants (maxsize)"
            truevalue="--largeWindows=1" falsevalue="--largeWindows=0" checked="false"
            help="(--largeWindows)"/>

  --maxVariants=$maxVariants
        <param name="maxVariants" type="integer" value="" label="Maximium variants to consider in a given window"
            help="(--maxVariants)">
            <validator type="in_range" min="0"/>
        </param>


  --coverageSamplingLevel=$coverageSamplingLevel
        <param name="coverageSamplingLevel" type="integer" value="" label="Downsample to this level of coverage when filtering haplotypes in divergent regions"
            help="(--coverageSamplingLevel)">
            <validator type="in_range" min="0"/>
        </param>

  --maxHaplotypes=$maxHaplotypes
        <param name="maxHaplotypes" type="integer" value="" label="Maximium haplotypes to consider in a given window"
            help="(--maxHaplotypes)">
            <validator type="in_range" min="0"/>
        </param>

  $skipDifficultWindows
        <param name="skipDifficultWindows" type="boolean" label="Skip windows with > maxVariants candidates"
            truevalue="--skipDifficultWindows=1" falsevalue="--skipDifficultWindows=0" checked="false"
            help="(--skipDifficultWindows)"/>

##  --getVariantsFromBAMs=GETVARIANTSFROMBAMS
##                        If set to TRUE (default), variant candidates will be
##                        generated from BAMs as well as any other inputs


  $genSNPs
        <param name="genSNPs" type="boolean" label="SNP candidates will be considered"
            truevalue="--genSNPs=TRUE" falsevalue="--genSNPs=FALSE" checked="false"
            help="(--genSNPs)"/>

  $genIndels
        <param name="genIndels" type="boolean" label="Indel candidates will be considered"
            truevalue="--genIndels=TRUE" falsevalue="--genIndels=FALSE" checked="false"
            help="(--genIndels)"/>



  --mergeClusteredVariants=MERGECLUSTEREDVARIANTS
                        If set to 1, variant-containing windows which are
                        close together will be merged, resulting in slower,
                        more accurate variant calls in diverse regions
  --useIndelErrorModel=USEINDELERRORMODEL
                        If set to 1, the new indel error model will be used
  --minFlank=MINFLANK   Flank size for indel candidates
  --filterVarsByCoverage=FILTERVARSBYCOVERAGE
                        If 1, Platypus filters variants in difficult regions
                        by the number of times each variant is seen.
  --filteredReadsFrac=FILTEREDREADSFRAC
                        If > this fraction of reads are filtered in a given
                        window, the 'badReads filter is triggered.
  --maxVarDist=MAXVARDIST
                        Max distance between variants to be considered in the
                        same window
  --minVarDist=MINVARDIST
                        Min distance allowed between windows
  --useEMLikelihoods=USEEMLIKELIHOODS
                        If 1, likelihoods computed from EM algorithm will be
                        used to call genotypes for each sample, otherwise
                        likelihoods from individual sample will be used.
  --countOnlyExactIndelMatches=COUNTONLYEXACTINDELMATCHES
                        If 1, only exactly matching indels will be counted in
                        the NV field
  --assemble=ASSEMBLE   If 1, Cortex will be used to assemble variant
                        candidates for Platypus to call.
  --assembleAll=ASSEMBLEALL
                        If 1 then Platypus will assemble all regions.'.
  --assemblyRegionSize=ASSEMBLYREGIONSIZE
                        Size of region to assemble with Cortex
  --assembleBadReads=ASSEMBLEBADREADS
                        If 1, then use filtered 'bad' reads for local assembly
  --assemblerKmerSize=ASSEMBLERKMERSIZE
                        Kmer size to use for cortex assembly'.
  --assembleBrokenPairs=ASSEMBLEBROKENPAIRS
                        If 1, then use broken read pairs for local assembly
  --noCycles=NOCYCLES   If 1, then don't allow cycles in the graph
  --minMapQual=MINMAPQUAL
                        Minimum mapping quality of read. Any reads with map
                        qual below this are ignored
  --minBaseQual=MINBASEQUAL
                        Minimum allowed base-calling quality. Any bases with
                        qual below this are ignored in SNP-calling
  --minGoodQualBases=MINGOODQUALBASES
                        Min bases per read that must have base-quality >= 20.



  --maxGOF=$maxGOF
        <param name="maxGOF" type="float" value="" label="Max allowed value for goodness-of-fit test. Higher than this triggers GOF filter"
            help="Value is a Phred-score (--maxGOF)">
            <validator type="in_range" min="0"/>
        </param>

  --minPosterior=$minPosterior
        <param name="minPosterior" type="float" value="" label="Only variants with posterior >= will be outpu to the VCF"
            help="Value is a Phred-score (--minPosterior)">
            <validator type="in_range" min="0"/>
        </param>

  --sbThreshold=$sbThreshold

        <param name="sbThreshold" type="float" value="" label="P-value for strand-bias filtering"
            help="(--sbThreshold)">
            <validator type="in_range" min="0"/>
        </param>

  --scThreshold=$scThreshold

        <param name="scThreshold" type="float" value="" label="Cut-off for SC filter"
            help="(--scThreshold)">
            <validator type="in_range" min="0"/>
        </param>

  --abThreshold=$abThreshold

        <param name="abThreshold" type="float" value="" label="P-value for allele-bias filtering"
            help="(--abThreshold)">
            <validator type="in_range" min="0"/>
        </param>

  --minVarFreq=$minVarFreq

        <param name="minVarFreq" type="float" value="" label="Variants below this frequency will be flagged as allele-biased"
            help="(--minVarFreq)">
            <validator type="in_range" min="0"/>
        </param>

  --badReadsWindow=$badReadsWindow

        <param name="badReadsWindow" type="float" value="" label="Size of window around variant to look for low-quality bases"
            help="(--badReadsWindow)">
            <validator type="in_range" min="0"/>
        </param>

  --badReadsThreshold=$rmsmqThreshold

        <param name="rmsmqThreshold" type="float" value="" label="Variants where the median minimum quality in a window of badReadsWindow around the variant position falls below this value will be filtered with the flag 'badReads'"
            help="(--rmsmqThreshold)">
            <validator type="in_range" min="0"/>
        </param>

  --rmsmqThreshold=$rmsmqThreshold

        <param name="rmsmqThreshold" type="float" value="" label="RMSMQ filter triggers when root-mean-square mapping quality across region containing variant is below this"
            help="(--rmsmqThreshold)">
            <validator type="in_range" min="0"/>
        </param>

  --qdThreshold=$qdThreshold

        <param name="qdThreshold" type="float" value="" label="QD filter triggers quality/depth for variant is below this"
            help="(--qdThreshold)">
            <validator type="in_range" min="0"/>
        </param>

  --hapScoreThreshold=$hapScoreThreshold

        <param name="hapScoreThreshold" type="float" value="" label="HapScore filter triggers HapScore for variant is above this"
            help="(--hapScoreThreshold)">
            <validator type="in_range" min="0"/>
        </param>

#bool

  $outputRefCalls
  $trimAdapter
  $trimOverlapping
  $filterDuplicates
  $filterReadsWithUnmappedMates
  $filterReadsWithDistantMates
  $filterReadPairsWithSmallInserts

        <param name="outputRefCalls" type="boolean" label="Block reference calls in output"
            truevalue="--outputRefCalls=1" falsevalue="--outputRefCalls=0" checked="false"
            help="(--outputRefCalls)"/>

        <param name="trimAdapter" type="boolean" label="Set the qual to 0 for any part of read which exceeds the mapped fragment length"
            truevalue="--trimAdapter=1" falsevalue="--trimAdapter=0" checked="false"
            help="This is mainly useful for trimming adapter sequences. (--trimAdapter)"/>

        <param name="trimOverlapping" type="boolean" label="Set the qual to 0 for any overlap in paired end reads"
            truevalue="--trimOverlapping=1" falsevalue="--trimOverlapping=0" checked="false"
            help="(--trimOverlapping)"/>

        <param name="filterDuplicates" type="boolean" label="Duplicate reads will be removed based on the read-pair start and end"
            truevalue="--filterDuplicates=1" falsevalue="--filterDuplicates=0" checked="false"
            help="(--filterDuplicates)"/>

        <param name="filterReadsWithUnmappedMates" type="boolean" label="Reads with un-mapped mates will be removed"
            truevalue="--filterReadsWithUnmappedMates=1" falsevalue="--filterReadsWithUnmappedMates=0" checked="false"
            help="(--filterReadsWithUnmappedMates)"/>

        <param name="filterReadsWithDistantMates" type="boolean" label="Reads with mates mapped far away will be removed"
            truevalue="--filterReadsWithDistantMates=1" falsevalue="--filterReadsWithDistantMates=0" checked="false"
            help="(--filterReadsWithDistantMates)"/>

        <param name="filterReadPairsWithSmallInserts" type="boolean" label="Read pairs with insert sizes smaller one read length will be removed"
            truevalue="--filterReadPairsWithSmallInserts=1" falsevalue="--filterReadPairsWithSmallInserts=0" checked="false"
            help="(--filterReadPairsWithSmallInserts)"/>


]]>
    </command>
    <inputs>
        <param name="fasta_file" type="data" format="fasta" label="FASTA file of protein sequences"/>
        <!--
        <param name="version" type="select" display="radio" label="Model version">
            <option value="">Version 1 (old)</option>
            <option value="" selected="True">Version 2 (default)</option>
        </param>
        -->

        <param name="reference_genome" type="select" label="Using reference genome" help="Name of the reference FASTA file used for variant calling. (--refFile)">
              <options from_data_table="fasta_indexes">
                <filter type="data_meta" ref="infile" key="dbkey" column="1" />
                <validator type="no_options" message="No reference genome is available for the build associated with the selected input dataset" />
              </options>
        </param>
        <!--param name="intervals_file" type="data" format="bed" optional="True" label="File containing list of intervals" /-->
        <param name="outputRefCalls" type="integer" value="10000" label="Window size for local sorting of variants"
            help="(--outputRefCalls)">
            <validator type="in_range" min="0"/>
        </param>

    </inputs>
    <outputs>
        <data name="outfile" format="vcf" label="${tool.name} on ${on_string}" />
    </outputs>

    <tests>
    </tests>
    <help>
<![CDATA[

**What it does**

Platypus is a tool designed for efficient and accurate variant-detection in high-throughput sequencing data.
By using local realignment of reads and local assembly it achieves both high sensitivity and high specificity.
Platypus can detect SNPs, MNPs, short indels, replacements and (using the assembly option) deletions up to several kb.


]]>
    </help>
    <citations>
        <citation type="doi">doi:10.1038/ng.3036</citation>
    </citations>
</tool>
