<tool id="tgsgapcloser" name="TGS_GapCloser" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01">
    <description>A gap-closing software tool that fills the N-gap of error-prone long reads generated by third-generation-sequence techniques or preassembled contigs </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <expand macro="xrefs"/>
    <version_command>tgsgapcloser --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
         tgsgapcloser    --scaff SCAFF_FILE --reads TGS_READS_FILE --output OUT_PREFIX [options...]
      required :
          --scaff     <scaffold_file>      the input scaffold file.
          --reads     <tgs_reads_file>     the input TGS reads file.
          --output    <output_prefix>      the output prefix.
      part required :
          --ne                             do not error correct. error correct by default.
          or
          --racon     <racon>              the installed racon.
          or
          --ngs       <ngs_reads>          the ngs reads used for pilon
          --pilon     <pilon>              the installed pilon.
          --samtools  <samtools>           the installed samtools.
          --java      <java>               the installed java.
      optional:
          --tgstype   <pb/ont>             TGS type . ont by default.
          --min_idy   <min_idy>            min_idy for filter reads .
                                           0.3 for ont by default.
                                           0.2 for pb by default.
          --min_match <min_idy>            min match length for filter reads .
                                           300bp for ont by default.
                                           200bp for pb by default.
          --thread    <t_num>              thread uesd . 16 by default.
          --chunk     <chunk_num>          split candidate into chunks to error-correct separately.
          --pilon_mem <t_num>              memory used for pilon , 300G for default.
          --p_round   <pilon_round>        pilon error-correction round num . 3 by default.
          --r_round   <racon_round>        racon error-correction round num . 1 by default.
          --g_check                        gapsize diff check , none by default.
    ]]></command>
    <inputs>
        <param name="inputs" type="data" format="fasta,fasta.gz" multiple="true" label="Input reads" />
        <param name="mode" type="select" label="Mode">
            <option value="--ont-reads">Nanopore raw</option>
            <option value="--pacbio-hifi">PacBio HiFi</option>
            <option value="--pacbio-raw">PacBio raw</option>
            <option value="--pacbio-corr">PacBio corrected</option>            
        </param>			          
    </inputs>
    <outputs>
        <data name="your-prefix.scaff_seq" format="tabular" from_work_dir="user/scaff.txt" label="${tool.name} on ${on_string}: final assembly info"/>
        <data name="your-prefix.gap_fill_details" format="txt" from_work_dir="user/gap_fill.txt" label="${tool.name} on ${on_string}: gap filling and assembly details"/>
        </data>
    </outputs>
    <tests>
        <!--Test 01-->
        <test expect_num_outputs="3">
            <param name="inputs" ftype="fasta" value="input.scaff.fasta"/>
            <param name="mode" value="--pacbio-raw"/>
            <output name="assembly_info" file="final_assembly_info.txt" ftype="tabular" 
            <output name="gap_filling_info" file="gap_filling_details.txt" ftype="txt" 
            </test>
        <!--Test 02-->
		<test expect_num_outputs="3">
			<param name="inputs" ftype="fasta" value="ngs.reads.fastq"/>
			<param name="mode" value="--pacbio-raw"/>
			<output name="assembly_info" file="final_assembly_info.txt" ftype="tabular" 
			<output name="gap_filling_info" file="gap_filling_details.txt" ftype="txt" 
		</test>         
        <!--Test 03-->
		<test expect_num_outputs="3">
			<param name="inputs" ftype="fasta" value="ont.reads.fasta"/>
			<param name="mode" value="--pacbio-raw"/>
			<output name="assembly_info" file="final_assembly_info.txt" ftype="tabular" 
			<output name="gap_filling_info" file="gap_filling_details.txt" ftype="txt" 
			</test>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**Purpose**

TGS-GapCloser is a gap-closing software tool that uses error-prone long reads generated by third-generation-sequence techniques (Pacbio,
Oxford Nanopore, etc.) or preassembled contigs to fill N-gap in the genome assembly. This tool can close gaps in large genome assemblies
 using raw long reads quickly and cost-effectively. The final assemblies generated by TGS-GapCloser have improved contiguity and 
completeness while maintaining high accuracy.

----

.. class:: infomark

**Quick usage**

Input reads can only be in FASTA format. Both raw reads and pre-error-corrected reads are acceptable as input. If only raw long reads are 
provided, it polishes raw TGS reads by calling Racon.If additional NGS short reads are available, it polishes raw TGS reads by calling Pilon.

----

.. class:: infomark

**Outputs**

The main output files are:
    ::
	-your-prefix.scaff_seq (this is the final assembly after gap filling)
	-your-prefix.gap_fill_details (details about how the final assembly was assemblied)

Format of a detailed information of your-prefix.gap_fill_details
	-each scaffold name is followed by its data lines.
	-a data line consists of 3 or 5 columns and describes the source of each segment in the final sequence:
		-column 1 is the segment's first bp position in the final sequence.
		-column 2 is the segment's last bp position in the final sequence.
		-column 3 is the segment's type , 'S' , 'N' or 'F'.
			-'S' means this segment is a segment of the input sequence and this line includes other two more columns:
		-column 4 is the segment's first bp position in the input sequence.
		-column 5 is the segment's last bp position in the input sequence.
		-'N' means this segment is a N area.
		-'F' means this segment is a filled sequence from TGS reads.

----

.. class:: infomark

**Algorithm and implementation of TGS-GapCloser**

This is a brief description of the TGS-GapCloser algorithm. Please refer to the manuscript for more detailed information.
TGS-GapCloser is coded in the C++ programing language (requires GCC 4.4+). It uses minimap2 to obtain alignments, and Pilon (requires Java runtime 1.7+)
or Racon (requires GCC 4.8+) to correct candidate fragments. The algorithm automatically identifies gaps and tries to find the best matched long-read 
fragments to close gaps or merge adjacent scaftigs. To accelerate the gap closure without losing efficiency and accuracy, TGS-GapCloser only selects a 
limited number of fragmented long reads as candidates for subsequent error correction and competition.

TGS-GapCloser can accept as input any type of TGS long reads or other pre-assembled contigs to fill gaps in a draft assembly in the 4 steps 
	(i) identification of gap regions in the draft assembly; 
	(ii) acquisition of candidates from the alignments of long reads against gaps; 
	(iii) base-level error correction of alternative sub-long reads; and 
	(iv) gap closure using the error-corrected candidates with the highest score for each gap or linkage of the neighboring scaftigs with overlaps.

----

  ]]></help>
    <expand macro="citations" />
</tool>
