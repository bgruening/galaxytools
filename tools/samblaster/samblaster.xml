<tool id="samblaster" name="samblaster" version="0.1.22">
    <description>for marking duplicates in read-id grouped paired-end SAM files</description>
    <requirements>
        <requirement type="package" version="0.1.22">samblaster</requirement>
    </requirements>
    <stdio>
        <exit_code range="1:" />
        <exit_code range=":-1" />
        <regex match="Error:" />
        <regex match="Exception:" />
    </stdio>
    <version_command>samblaster --version</version_command>
    <command><![CDATA[
        samblaster
        -i $input
        -o $outfile

        #if 'split' in str($outputs).split(','):
            --splitterFile splitterFile.sam
        #end if
        #if 'discordant' in str($outputs).split(','):
            --discordantFile discordantFile.sam
        #end if
        #if 'unmapped' in str($outputs).split(','):
            --unmappedFile unmappedFile
        #end if

        #if $advanced_options.advanced_options_select == "yes":
            $advanced_options.acceptDupMarks
            $advanced_options.excludeDups
            $advanced_options.removeDups
            $advanced_options.addMateTags
            $advanced_options.ignoreUnmated
            $advanced_options.M
            --minClipSize $advanced_options.minClipSize
            --minNonOverlap $advanced_options.minNonOverlap
            --minIndelSize $advanced_options.minIndelSize
            --maxUnmappedBases $advanced_options.maxUnmappedBases
            --maxSplitCount $advanced_options.maxSplitCount
        #end if
    ]]></command>
    <inputs>
        <param name="input" multiple="False" type="data" format="sam" label="Paired-end SAM file"
            help="Input sam file must contain paired end data, contain sequence header and be sorted by read ids. (-i)"/>

        <param name="outputs" type="select" display="checkboxes" multiple="True" optional="True" label="Additional output options">
            <option value="discordant">Discordant read pairs (--discordantFile)</option>
            <option value="split">Split reads (--splitterFile)</option>
            <option value="unmapped">Unmapped/clipped reads as FASTQ (--unmappedFile)</option>
        </param>

        <conditional name="advanced_options">
            <param name="advanced_options_select" type="select" label="Advanced options">
                <option value="">Hide advanced options</option>
                <option value="yes">Display advanced options</option>
            </param>
            <when value="yes">
                <param argument="acceptDupMarks" type="boolean" checked="false" truevalue="--acceptDupMarks" falsevalue=""
                    label="Accept duplicate marks already in input file instead of looking for duplicates in the input."/>

                <param argument="excludeDups" type="boolean" checked="false" truevalue="--excludeDups" falsevalue=""
                    label="Exclude reads marked as duplicates from discordant, splitter, and/or unmapped file."/>

                <param argument="removeDups" type="boolean" checked="false" truevalue="--removeDups" falsevalue=""
                    label="Remove duplicates reads from all output files. (Implies exclude duplicates)."/>

                <param argument="addMateTags" type="boolean" checked="false" truevalue="--addMateTags" falsevalue=""
                    label="Add MC and MQ tags to all output paired-end SAM lines."/>

                <param argument="ignoreUnmated" type="boolean" checked="false" truevalue="--ignoreUnmated" falsevalue=""
                    label="Suppress abort on unmated alignments. Use only when sure input is read-id grouped and alignments have been filtered."/>

                <param argument="M" type="boolean" checked="false" truevalue="-M" falsevalue=""
                    label="Run in compatibility mode; both 0x100 and 0x800 are considered chimeric. Similar to BWA MEM -M option."/>

                <param argument="maxSplitCount" type="integer" value="2"
                    label="Maximum number of split alignments for a read to be included in splitter file."/>

                <param argument="maxUnmappedBases" type="integer" value="50"
                    label="Maximum number of un-aligned bases between two alignments to be included in splitter file."/>

                <param argument="minIndelSize" type="integer" value="50"
                    label="Minimum structural variant feature size for split alignments to be included in splitter file."/>

                <param argument="minNonOverlap" type="integer" value="20"
                    label="Minimum non-overlaping base pairs between two alignments for a read to be included in splitter file."/>

                <param argument="minClipSize" type="integer" value="20"
                    label="Minumum number of bases a mapped read must be clipped to be included in unmapped file."/>
            </when>
        </conditional>
    </inputs>
    <outputs>
            <data name="outfile" format="sam" />
            <data name="outfile_discordantFile" format="sam" from_work_dir="discordantFile.sam" label="${tool.name} on ${on_string} (discordant file)">
                <filter>'discordant' in outputs</filter>
            </data>
            <data name="outfile_splitterFile" format="sam" from_work_dir="splitterFile.sam" label="${tool.name} on ${on_string} (splitter file)">
                <filter>'split' in outputs</filter>
            </data>
            <data name="outfile_unmappedFile" format="fasta,fastq" from_work_dir="unmappedFile" label="${tool.name} on ${on_string} (unmapped file)">
                <filter>'unmapped' in outputs</filter>
            </data>
    </outputs>
    <tests>
        <test>
            <param name="input" value="test-input.sam" ftype="sam"/>
            <param name="outputs" value="unmapped,split,discordant"/>
            <param name="advanced_options_select" value="yes"/>
            <param name="excludeDups" value="--excludeDups"/>
            <param name="addMateTags" value="--addMateTags"/>
            <output name="outfile" file="test2_output_default.sam" ftype="sam"/>
            <output name="outfile_discordantFile" file="test2_discordantFile.sam" ftype="sam"/>
            <output name="outfile_splitterFile" file="test2_splitterFile.sam" ftype="sam"/>
            <output name="outfile_unmappedFile" file="test2_unmappedFile" ftype="fasta,fastq"/>
        </test>
    </tests>
    <help><![CDATA[

**WHAT IT DOES**

Tool to mark duplicates and optionally output split reads and/or discordant pairs. Input sam file must contain paired end data, contain sequence header and be sorted by read ids.
Output will be all alignments in the same order as input, with duplicates marked with FLAG 0x400.

-----

**USAGE**

By default, samblaster reads SAM input from stdin and writes SAM to stdout. Input SAM files usually contain paired end data (see Duplicate Identification below), must contain a sequence header, and must be read-id grouped1. By default, the output SAM file will contain all the alignments in the same order as the input, with duplicates marked with SAM FLAG 0x400. The remove Duplicate option will instead remove duplicate alignments from the output file.

A read-id grouped SAM file is one in which all alignments for a read-id (QNAME) are grouped together in adjacent lines. Aligners naturally produce such files. They can also be created by sorting a SAM file by read-id. But as shown below, sorting the input to samblaster by read-id is not required if the alignments are already grouped.

-----

**DEFINITIONS**


**alignment type definitions**

Below, we will use the following definitions for alignment types. Starting with samblaster release 0.1.22, these definitions are affected by the use of the -M option. By default, samblaster will use the current definitions of alignment types as specified in the SAM Specification. Namely, alignments marked with FLAG 0x100 are considered secondary, while those marked with FLAG 0x800 are considered supplemental. If the compatibility mode option is specified, alignments marked with either FLAG 0x100 or 0x800 are considered supplemental, and no alignments are considered secondary. A primary alignment is always one that is neither secondary nor supplemental. Only primary and supplemental alignments are used to find chimeric (split-read) mappings. The -M flag is used for backward compatibility with older SAM/BAM files in which "chimeric" alignments were marked with FLAG 0x100, and should also be used with output from more recent runs of bwa mem using its -M option.


**duplicate identification**

A duplicate read pair is defined as a pair that has the same signature for each mapped read as a previous read pair in the input SAM file. The signature is comprised of the combination of the sequence name, strand, and the reference offset where the 5' end of the read would fall if the read were fully aligned (not clipped) at its 5' end. The 5' aligned reference position is calculated using a combination of the POS field, the strand, and the CIGAR string. This definition of signature matches that used by Picard MarkDuplicates.

1. For pairs in which both reads are mapped, both signatures must match.

2. For pairs in which only one side is mapped (an "orphan"), the signature of the mapped read must match a previously seen orphan. In an orphan pair, the unmapped read need not appear in the input file. In addition, mapped non-paired single read alignments will be treated the same as an orphan pair with a missing unmapped read.

3. No doubly unmapped pair will be marked as a duplicate.

4. Any secondary or supplemental alignment associated with a duplicate primary alignment will also be marked as a duplicate.


**discordant read pair identification**

A discordant read pair is one which meets all of the following criteria:

1. Both side of the read pair are mapped (neither FLAG 0x4 or 0x8 is set).

2. The properly paired FLAG (0x2) is not set.

3. Secondary or supplemental alignments are never output as discordant, although a discordant read pair can have such alignments associated with them.

4. Duplicate read pairs that meet the above criteria will be output as discordant unless the *--excludeDups* option is used.


**split read identification**

Split Read alignments are derived from a single read when one portion of the read aligns to a different region of the reference genome than another portion of the read. Such pairs of alignments often define a structural variant (SV) breakpoint, and are therefore useful input to SV detection algorithms such as LUMPY. samblaster uses the following strategy to identify split reads alignments.

1. Identify reads that have between two and --maxSplitCount primary and supplemental alignments.

2. Sort these alignments by their strand-normalized position along the read.

3. Two alignments are output as splitters if they are adjacent on the read, and meet these criteria:

    - 1.each covers at least --minNonOverlap base pairs of the read that the other does not.

    - 2.the two alignments map to different reference sequences and/or strands.

    - 3.the two alignments map to the same sequence and strand, and represent a SV that is at least --minIndelSize in length, and have at most --maxUnmappedBases of un-aligned base pairs between them.

4. Split read alignments that are part of a duplicate read will be output unless the *--excludeDups* option is used.


**unmapped/clipped read identification**

An unmapped or clipped read is a primary alignment that is unaligned over all or part of its length respectively. The lack of a full alignment may be caused by a SV breakpoint that falls within the read. Therefore, samblaster will optionally output such reads to a FASTQ file for re-alignment by a tool, such as YAHA, geared toward finding split-read mappings. samblaster applies the following strategy to identify and output unmapped/clipped reads:

1. An unmapped read has the unmapped read FLAG set (0x4).

2. A clipped read is a mapped read with a CIGAR string that begins or ends with at least --minClipSize unaligned bases (CIGAR code S and/or H), and is not from a read that has one or more supplemental alignments.

3. In order for samblaster to output the entire sequence for clipped reads, the input SAM file must have soft clipped primary alignments.

4. samblaster will output unmapped/clipped reads into a FASTQ file if QUAL information is available in the input file, and a FASTA file if not.

5. Unmapped/clipped reads that are part of a duplicate read pair will be output unless the *--excludeDups* option is used.

-----

**samblaster** is a Free and Open Source Software, see more details on the samblaster_ Website.

.. _samblaster: https://github.com/GregoryFaust/samblaster

    ]]></help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btu314</citation>
    </citations>
</tool>
