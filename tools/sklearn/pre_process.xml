<tool id="sklearn_data_preprocess" name="Preprocess" version="@VERSION@">
    <description>raw feature vectors into standardized datasets</description>
    <macros>
        <import>main_macros.xml</import>
    </macros>
    <expand macro="python_requirements"/>
    <expand macro="macro_stdio"/>
    <version_command>echo "@VERSION@"</version_command>
    <command>
        <![CDATA[
        python "$pre_processor_script" '$inputs'
        ]]>
    </command>
    <configfiles>
        <inputs name="inputs" />
        <configfile name="pre_processor_script">
            <![CDATA[
import sys
import json
import pandas
import numpy as np
from sklearn import preprocessing

input_json_path = sys.argv[1]
params = json.load(open(input_json_path, "r"))

my_function = getattr(datasets, params["sample_generators"]["selected_generator"])
options = params["sample_generators"]["options"]
my_points, my_targets = my_function(**options)

points_df = pandas.DataFrame(my_points)
targets_df = pandas.DataFrame(my_targets)

points_df.to_csv(path_or_buf = "$outfile_points", sep="\t", index=False, header=False)
targets_df.to_csv(path_or_buf = "$outfile_targets", sep="\t", index=False, header=False)
            ]]>
        </configfile>
    </configfiles>
    <inputs>
        <conditional name="input_type">
            <param name="selected_input_type" type="select" label="Select the type of your input data:">
                <option value="tabular" selected="true">Tabular data (.tabular, .txt)</option>
                <option value="sparse">Sparse matrix (.mtx)</option>
            </param>
            <when value="tabular">
                <conditional name="pre_processors">
                    <expand macro="sparse_preprocessors">
                        <option value="KernelCenterer">Center a kernel matrix</option>
                        <option value="LabelBinarizer">Binarize labels in one-vs-all fashion</option>
                        <option value="LabelEncoder">Encode numeric and non_numerical labels</option>
                        <option value="MultiLabelBinarizer">Unite iterable labels in a single multilable format</option>
                        <option value="MinMaxScaler">Scale features to a range</option>
                        <option value="PolynomialFeatures">Generate polynomial and interaction features</option>
                        <option value="RobustScaler">Scale features using outlier-invariance statistics</option>
                    </expand>
                    <expand macro="sparse_preprocessor_options">
                        <when value="KernelCenterer">
                        </when>
                        <when value="LabelBinarizer">
                            <section name="options" title="Advanced Options" expanded="False">
                                <param argument="neg_label" type="integer" optional="true" value="0" label="Negative labels encoder " help=" "/>
                                <param argument="pos_label" type="integer" optional="true" value="1" label="Positive labels encoder " help=" "/>
                                <param argument="sparse_output" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="false" label="Return output in sparse format" help="True if the returned array from transform is desired to be in sparse CSR format. "/>
                            </section>
                        </when>           
                        <when value="LabelEncoder">
                        </when>
                        <when value="MultiLabelBinarizer">
                            <section name="options" title="Advanced Options" expanded="False">
                                <!--classes-->
                                <param argument="sparse_output" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="false" label="Return output in sparse format" help="True if the returned array from transform is desired to be in sparse CSR format. "/>
                            </section>
                        </when>
                        <when value="MinMaxScaler">
                            <section name="options" title="Advanced Options" expanded="False">
                                <!--feature_range-->
                                <param argument="copy" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="true" label="Use a copy of data for precomputing normalization" help=" "/>
                            </section>
                        </when>            
                        <when value="PolynomialFeatures">
                            <section name="options" title="Advanced Options" expanded="False">
                                <param argument="degree" type="integer" optional="true" value="2" label="The degree of the polynomial features " help=""/>
                                <param argument="interaction_only" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="false" label="Produce interaction features only" help="(Features that are products of at most degree distinct input features) "/>
                                <param argument="include_bias" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="true" label="Include a bias column" help="Feature in which all polynomial powers are zero "/>
                            </section>
                        </when>            
                        <when value="RobustScaler">
                            <section name="options" title="Advanced Options" expanded="False">
                                <!--=True, =True, copy=True-->
                                <param argument="with_centering" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="true" label="Center the data before scaling" help=" "/>
                                <param argument="with_scaling" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="true" label="Scale the data to interquartile range" help=" "/>
                                <param argument="copy" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolflase" checked="true" label="Use a copy of data for inplace scaling" help=" "/>
                            </section>
                        </when>            
                    </expand>
                </conditional>
            </when>
            <when value="sparse">
                <conditional name="pre_processors">
                    <expand macro="sparse_preprocessors"/>
                    <expand macro="sparse_preprocessor_options"/>
                </conditional>
            </when>            
        </conditional>
        <param name="outputs" type="select" display="checkboxes" multiple="true" label="Select the task(s) to be performed:">
            <option value="model" selected="True">Train a preprocessor on data and return the model</option>
            <option value="points" selected="True">Transform the data and output the results</option>
        </param>
    </inputs>
    <outputs>
        <data format="zip" name="outfile_model"/>
        <data format="tabular" name="outfile_data"/>
    </outputs>
    <tests>
        <test>
            <param name="selected_generator" value="make_swiss_roll"/>
            <param name="random_state" value="100"/>
            <output name="outfile_points" file="swiss_r_points.txt"/>
            <output name="outfile_targets" file="swiss_r.targets.txt"/>
        </test>
    </tests>
    <help>
        <![CDATA[
**What it does**

This tool provides several transformer classes to change raw feature vectors into a representation that is more suitable for the downstream estimators. The library is provided by sklearn.preprocessing package.
        ]]>
    </help>
    <expand macro="sklearn_citation"/>
</tool>