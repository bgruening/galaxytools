	Parameter	Value
*	memory	memory: None
*	steps	"steps: [('featureagglomeration', FeatureAgglomeration(affinity='euclidean', compute_full_tree='auto',
           connectivity=None, linkage='ward', memory=None, n_clusters=3,
           pooling_func=<function mean at 0x1123f1620>)), ('adaboostclassifier', AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None))]"
@	featureagglomeration	"featureagglomeration: FeatureAgglomeration(affinity='euclidean', compute_full_tree='auto',
           connectivity=None, linkage='ward', memory=None, n_clusters=3,
           pooling_func=<function mean at 0x1123f1620>)"
@	adaboostclassifier	"adaboostclassifier: AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=1.0, n_estimators=50, random_state=None)"
@	featureagglomeration__affinity	featureagglomeration__affinity: 'euclidean'
@	featureagglomeration__compute_full_tree	featureagglomeration__compute_full_tree: 'auto'
@	featureagglomeration__connectivity	featureagglomeration__connectivity: None
@	featureagglomeration__linkage	featureagglomeration__linkage: 'ward'
*	featureagglomeration__memory	featureagglomeration__memory: None
@	featureagglomeration__n_clusters	featureagglomeration__n_clusters: 3
@	featureagglomeration__pooling_func	featureagglomeration__pooling_func: <function mean at 0x1123f1620>
@	adaboostclassifier__algorithm	adaboostclassifier__algorithm: 'SAMME.R'
@	adaboostclassifier__base_estimator	adaboostclassifier__base_estimator: None
@	adaboostclassifier__learning_rate	adaboostclassifier__learning_rate: 1.0
@	adaboostclassifier__n_estimators	adaboostclassifier__n_estimators: 50
@	adaboostclassifier__random_state	adaboostclassifier__random_state: None
	Note:	@, searchable params in searchcv too.
