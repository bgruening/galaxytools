	Parameter	Value
*	memory	memory: None
@	powertransformer	powertransformer: PowerTransformer(copy=True, method='yeo-johnson', standardize=True)
*	steps	"steps: [('powertransformer', PowerTransformer(copy=True, method='yeo-johnson', standardize=True)), ('transformedtargetregressor', TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=RandomForestRegressor(bootstrap=True,
                                                           criterion='mse',
                                                           max_depth=None,
                                                           max_features='auto',
                                                           max_leaf_nodes=None,
                                                           min_impurity_decrease=0.0,
                                                           min_impurity_split=None,
                                                           min_samples_leaf=1,
                                                           min_samples_split=2,
                                                           min_weight_fraction_leaf=0.0,
                                                           n_estimators='warn',
                                                           n_jobs=1,
                                                           oob_score=False,
                                                           random_state=10,
                                                           verbose=0,
                                                           warm_start=False),
                           transformer=QuantileTransformer(copy=True,
                                                           ignore_implicit_zeros=False,
                                                           n_quantiles=1000,
                                                           output_distribution='uniform',
                                                           random_state=10,
                                                           subsample=100000)))]"
@	transformedtargetregressor	"transformedtargetregressor: TransformedTargetRegressor(check_inverse=True, func=None, inverse_func=None,
                           regressor=RandomForestRegressor(bootstrap=True,
                                                           criterion='mse',
                                                           max_depth=None,
                                                           max_features='auto',
                                                           max_leaf_nodes=None,
                                                           min_impurity_decrease=0.0,
                                                           min_impurity_split=None,
                                                           min_samples_leaf=1,
                                                           min_samples_split=2,
                                                           min_weight_fraction_leaf=0.0,
                                                           n_estimators='warn',
                                                           n_jobs=1,
                                                           oob_score=False,
                                                           random_state=10,
                                                           verbose=0,
                                                           warm_start=False),
                           transformer=QuantileTransformer(copy=True,
                                                           ignore_implicit_zeros=False,
                                                           n_quantiles=1000,
                                                           output_distribution='uniform',
                                                           random_state=10,
                                                           subsample=100000))"
@	verbose	verbose: False
@	powertransformer__copy	powertransformer__copy: True
@	powertransformer__method	powertransformer__method: 'yeo-johnson'
@	powertransformer__standardize	powertransformer__standardize: True
@	transformedtargetregressor__check_inverse	transformedtargetregressor__check_inverse: True
@	transformedtargetregressor__func	transformedtargetregressor__func: None
@	transformedtargetregressor__inverse_func	transformedtargetregressor__inverse_func: None
@	transformedtargetregressor__regressor	"transformedtargetregressor__regressor: RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,
                      max_features='auto', max_leaf_nodes=None,
                      min_impurity_decrease=0.0, min_impurity_split=None,
                      min_samples_leaf=1, min_samples_split=2,
                      min_weight_fraction_leaf=0.0, n_estimators='warn',
                      n_jobs=1, oob_score=False, random_state=10, verbose=0,
                      warm_start=False)"
@	transformedtargetregressor__regressor__bootstrap	transformedtargetregressor__regressor__bootstrap: True
@	transformedtargetregressor__regressor__criterion	transformedtargetregressor__regressor__criterion: 'mse'
@	transformedtargetregressor__regressor__max_depth	transformedtargetregressor__regressor__max_depth: None
@	transformedtargetregressor__regressor__max_features	transformedtargetregressor__regressor__max_features: 'auto'
@	transformedtargetregressor__regressor__max_leaf_nodes	transformedtargetregressor__regressor__max_leaf_nodes: None
@	transformedtargetregressor__regressor__min_impurity_decrease	transformedtargetregressor__regressor__min_impurity_decrease: 0.0
@	transformedtargetregressor__regressor__min_impurity_split	transformedtargetregressor__regressor__min_impurity_split: None
@	transformedtargetregressor__regressor__min_samples_leaf	transformedtargetregressor__regressor__min_samples_leaf: 1
@	transformedtargetregressor__regressor__min_samples_split	transformedtargetregressor__regressor__min_samples_split: 2
@	transformedtargetregressor__regressor__min_weight_fraction_leaf	transformedtargetregressor__regressor__min_weight_fraction_leaf: 0.0
@	transformedtargetregressor__regressor__n_estimators	transformedtargetregressor__regressor__n_estimators: 'warn'
*	transformedtargetregressor__regressor__n_jobs	transformedtargetregressor__regressor__n_jobs: 1
@	transformedtargetregressor__regressor__oob_score	transformedtargetregressor__regressor__oob_score: False
@	transformedtargetregressor__regressor__random_state	transformedtargetregressor__regressor__random_state: 10
@	transformedtargetregressor__regressor__verbose	transformedtargetregressor__regressor__verbose: 0
@	transformedtargetregressor__regressor__warm_start	transformedtargetregressor__regressor__warm_start: False
@	transformedtargetregressor__transformer	"transformedtargetregressor__transformer: QuantileTransformer(copy=True, ignore_implicit_zeros=False, n_quantiles=1000,
                    output_distribution='uniform', random_state=10,
                    subsample=100000)"
@	transformedtargetregressor__transformer__copy	transformedtargetregressor__transformer__copy: True
@	transformedtargetregressor__transformer__ignore_implicit_zeros	transformedtargetregressor__transformer__ignore_implicit_zeros: False
@	transformedtargetregressor__transformer__n_quantiles	transformedtargetregressor__transformer__n_quantiles: 1000
@	transformedtargetregressor__transformer__output_distribution	transformedtargetregressor__transformer__output_distribution: 'uniform'
@	transformedtargetregressor__transformer__random_state	transformedtargetregressor__transformer__random_state: 10
@	transformedtargetregressor__transformer__subsample	transformedtargetregressor__transformer__subsample: 100000
	Note:	@, params eligible for search in searchcv tool.
