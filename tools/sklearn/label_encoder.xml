<tool id="sklearn_label_encoder" name="Label encoder" version="@VERSION@" profile="@PROFILE@">
    <description>Encode target labels with value between 0 and n_classes-1</description>
    <macros>
        <import>main_macros.xml</import>
    </macros>
    <expand macro="python_requirements"/>
    <expand macro="macro_stdio"/>
    <version_command>echo "@VERSION@"</version_command>
    <command detect_errors="exit_code"><![CDATA[
        python '$__tool_directory__/label_encoder.py'
            --inputs '$inputs'
            --infile '$infile'
            --outfile '$outfile'
        #if $export
            --encoder_outfile '$encoder_outfile'
        #end if
        #if $tasks.selected_task == 'load':
            --model '$infile_model'
        #end if
    ]]>
    </command>
    <configfiles>
        <inputs name="inputs" />
    </configfiles>
    <inputs>
      <conditional name="tasks">
      <param name="selected_task" type="select" label="Select a Encoding Task">
        <option value="train" selected="true">Fit an encoder</option>
        <option value="load">Load an encoder and transform</option>
      </param>
      <when value="load">
        <param name="infile_model" type="data" format="h5mlm" label="Prefitted encoder" help="Select an prefitted model." />
      </when>
      <when value="train">
      </when>
    </conditional>
        <param name="infile" type="data" format="tabular" label="Input file"/>
        <param name="header0" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="true" label="Does the dataset contain header?"/>
        <param name="export" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="true" label="Export fitted encoder." help="The fitted encoder can be used to encode data with similar classes using the same translation logic."/>
    </inputs>
    <outputs>
        <data name="outfile" format="tabular"/>
        <data name="encoder_outfile" format="h5mlm">
            <filter>export</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <param name="selected_task" value="train"/>
            <param name="infile" value="le_input_w_header.tabular" ftype="tabular"/>
            <param name="header0" value="true"/>
            <output name="outfile" file="le_output.tabular" ftype="tabular"/>
        </test>
        <test>
            <param name="selected_task" value="train"/>
            <param name="infile" value="le_input_wo_header.tabular" ftype="tabular"/>
            <param name="header0" value="false"/>
            <output name="outfile" file="le_output.tabular" ftype="tabular"/>
        </test>
        <test>
            <param name="selected_task" value="load"/>
            <param name="infile" value="le_input_wo_header.tabular" ftype="tabular"/>
            <param name="infile_model" value="encoded_labels.h5mlm" ftype="h5mlm"/>
            <param name="header0" value="false"/>
            <output name="outfile" file="le_output.tabular" ftype="tabular"/>
        </test>
    </tests>
    <help><![CDATA[
**What it does**

class sklearn.preprocessing.LabelEncoder

Encode target labels with value between 0 and n_classes-1.

This transformer should be used to encode target values, i.e. y, and not the input X.

Attributes: classes : ndarray of shape (n_classes,)
Hold the label for each class.
LabelEncoder can be used to normalize labels.

It can also be used to transform non-numerical labels (as long as they are hashable and comparable) to numerical labels.

Methods

fit_transform(y)

Fit label encoder and return encoded labels.

Parameters: y: array-like of shape (n_samples,)

Returns: y: array-like of shape (n_samples,)

    ]]></help>
    <expand macro="sklearn_citation"/>
</tool>
