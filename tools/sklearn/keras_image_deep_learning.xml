<tool id="keras_image_deep_learning" name="Image Deep Learning" version="@VERSION@">
    <description>performs training, evaluation and predictions using image data generator</description>
    <macros>
        <import>main_macros.xml</import>
        <import>keras_macros.xml</import>
        <macro name="fitted_model_input">
            <param name="infile_estimator" type="data" format="zip" label="Choose the dataset containing model skeleton"/>
            <param name="infile_weights" type="data" format="h5" label="Choose the dataset containing weights for the model above"/>
        </macro>
        <macro name="save_outputs">
            <param name="save" type="select" multiple='true' display="checkboxes" label="Save the fitted model" optional="true" help="Evaluation scores will be output by default.">
                <option value="save_estimator" selected="true">Fitted estimator in skeleton and weights, separately</option>
                <option value="save_prediction">True labels and prediction results from evaluation for downstream analysis</option>
            </param>
        </macro>
    </macros>
    <expand macro="python_requirements"/>
    <expand macro="macro_stdio"/>
    <version_command>echo "@VERSION@"</version_command>
    <command>
        <![CDATA[
        export HDF5_USE_FILE_LOCKING='FALSE';
        #for $f in $input_options.infile_images#
            unzip -o -q '$f' -d "./images";
        #end for
        python '$__tool_directory__/keras_image_deep_learning.py'
            --inputs '$inputs'
            --estimator '$experiment_schemes.infile_estimator'
            --infile_images '$input_options.infile_images'
            --infile_dataframe '$input_options.infile_dataframe'
            --outfile_result '$outfile_result'
            #if $experiment_schemes.selected_exp_scheme in ['model_eval', 'model_predict']
            --infile_weights '$experiment_schemes.infile_weights'
            #end if
            #if $experiment_schemes.save and 'save_estimator' in str($experiment_schemes.save)
            --outfile_object '$outfile_object'
            --outfile_weights '$outfile_weights'
            #end if
            #if $experiment_schemes.save and 'save_prediction' in str($experiment_schemes.save)
            --outfile_y_true '$outfile_y_true'
            --outfile_y_preds '$outfile_y_preds'
            #end if
            #if $experiment_schemes.selected_exp_scheme in ['train_val', 'train_val_test'] and $experiment_schemes.test_split.split_algos.shuffle == 'group'
            --groups '$experiment_schemes.test_split.split_algos.groups_selector.infile_g'
            #end if

        ]]>
    </command>
    <configfiles>
        <inputs name="inputs" />
    </configfiles>
    <inputs>
        <conditional name="experiment_schemes">
            <param name="selected_exp_scheme" type="select" label="Select a scheme">
                <option value="train_val" selected="true">Train and Validate</option>
                <option value="train_val_test">Train, Validate and and Evaluate</option>
                <option value="model_eval">Load a Fitted Model and Evaluate Performances on a New Dataset</option>
                <option value="model_predict">Load a Fitted Model and Do Predictions</option>
            </param>
            <when value="train_val">
                <expand macro="estimator_and_hyperparameter"/>
                <section name="test_split" title="Validation holdout" expanded="false">
                    <expand macro="train_test_split_params">
                        <expand macro="cv_groups"/>
                    </expand>
                </section>
                <section name="metrics" title="Metrics from scikit-learn" expanded="false">
                    <expand macro="scoring_selection"/>
                </section>
                <expand macro="save_outputs"/>
            </when>
            <when value="train_val_test">
                <expand macro="estimator_and_hyperparameter"/>
                <section name="test_split" title="Test holdout" expanded="false">
                    <expand macro="train_test_split_params">
                        <expand macro="cv_groups"/>
                    </expand>
                </section>
                <section name="val_split" title="Validation holdout (recommend using the same splitting method as for test holdout)" expanded="false">
                    <expand macro="train_test_split_params"/>
                </section>
                <section name="metrics" title="Metrics from scikit-learn" expanded="false">
                    <expand macro="scoring_selection"/>
                </section>
                <expand macro="save_outputs"/>
            </when>
            <when value="model_eval">
                <expand macro="fitted_model_input"/>
                <section name="metrics" title="Metrics from scikit-learn" expanded="false">
                    <expand macro="scoring_selection"/>
                </section>
                <param name="eval_steps" type="integer" value="" optional="true" label="Evaluation steps" help="If None, the number of steps equals to `n_images/batch_size`."/>
                <param name="save" type="select" multiple='true' display="checkboxes" label="Save" optional="true" help="Evaluation scores will be output by default.">
                    <option value="save_prediction">True labels and prediction results from evaluation for downstream analysis</option>
                </param>
            </when>
            <when value="model_predict">
                <expand macro="fitted_model_input"/>
                <param name="pred_steps" type="integer" value="" optional="true" label="Prediction steps" help="If None, the number of steps equals to `n_images/batch_size`."/>
                <param name="save" type="hidden" value="" help="For compatibility"/>
            </when>
        </conditional>
        <conditional name="input_options">
            <param name="selected_input" type="select" label="Select input type:">
                <option value="ImageDataFrameBatchGenerator">Images with DataFrame -- ImageDataFrameBatchGenerator</option>
            </param>
            <when value="ImageDataFrameBatchGenerator">
                <param name="infile_images" type="data" format="zip" multiple="true" label="Images in a compressed file" help="If multple compressed files are provided, each file will be decompressed individually."/>
                <param name="infile_dataframe" type="data" format="tabular" label="Select the table containing information about all the images" help="Headered."/>
                <param argument="x_col" type="data_column" use_header_names="true" data_ref="infile_dataframe" help="The column containing relative path or filename to the each image"/>
                <param argument="y_col" type="data_column" use_header_names="true" data_ref="infile_dataframe" multiple="true" help="The column containing target data"/>
                <param argument="weight_col" type="data_column" use_header_names="true" data_ref="infile_dataframe" optional="true" help="Optional. The column containing sample weights"/>
                <section name="options" title="Advanced Options" expanded="False">
                    <param argument="target_size" type="text" value="(256, 256)" help="The dimensions to which all images found will be resized"/>
                    <param argument="color_mode" type="select" help="Whether the images will be converted to have 1 or 3 color channels.">
                        <option value="grayscale"/>
                        <option value="rgb" selected="true"/>
                        <option value="rgba"/>
                    </param>
                    <param argument="classes" type="text" value="" optional="true" help="Optional. Comma-separated string. For example: cat,dog. If None, all classes in `y_col` will be used."/>
                    <param argument="class_mode" type="select">
                        <option value="binary" />
                        <option value="categorical" selected="true" />
                        <option value="multi_output" />
                    </param>
                    <param argument="shuffle" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="true" help="whether to shuffle the data"/>
                    <param argument="seed" type="integer" value="" optional="true" help="random seed for shuffling and transformations"/>
                    <param argument='interpolation' type="select" help="Interpolation method used to resample the image if the target size is different from that of the loaded image.">
                        <option value="nearest" selected="true"/>
                        <option value="bilinear" />
                        <option value="bicubic" />
                        <option value="lanczos" />
                        <option value="box" />
                        <option value="hamming" />
                    </param>
                    <param argument="fit_sample_size" type="integer" value="1000" optional="true" help="Number of training images used in `datagen.fit`. Relevant only when `featurewise_center` or `featurewise_std_normalization` or `zca_whitening` are set are set to True."/>
                    <param argument="featurewise_center" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="false" help="Set input mean to 0 over the dataset, feature-wise."/>
                    <param argument="samplewise_center" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="false" help="Set each sample mean to 0."/>

                    <param argument="featurewise_std_normalization" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="false" help="Divide inputs by std of the dataset, feature-wise."/>
                    <param argument="samplewise_std_normalization" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="false" help="Divide each input by its std."/>
                    <param argument="zca_whitening" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="false" help="Apply ZCA whitening."/>
                    <param argument="zca_epsilon" type="float" value="0.000001" optional="true" help="epsilon for ZCA whitening."/>
                    <param argument="rotation_range" type="text" value="0" optional="true" help="Degree range for random rotations."/>
                    <param argument="width_shift_range" type="text" value="0." optional="true" />
                    <param argument="height_shift_range" type="text" value="0." optional="true" />
                    <param argument="brightness_range" type="text" value="" optional="true" help="Optional. Tuple of two floats."/>
                    <param argument="shear_range" type="text" value="0" optional="true" help="Shear Intensity."/>
                    <param argument="zoom_range" type="text" value="0." optional="true" help="Float or Tuple of two floats, (lower, upper)."/>
                    <param argument="channel_shift_range" type="text" value="0." optional="true" help="Range for random channel shifts."/>
                    <param argument="fill_mode" type="select" help="Points outside the boundaries of the input are filled according to the given mode.">
                        <option value="constant">constant -- kkkkkkkk|abcd|kkkkkkkk (cval=k)</option>
                        <option value="nearest" selected="true">nearest -- aaaaaaaa|abcd|dddddddd</option>
                        <option value="reflect">reflect -- abcddcba|abcd|dcbaabcd</option>
                        <option value="wrap">wrap -- abcdabcd|abcd|abcdabcd</option>
                    </param>
                    <param argument="cval" type="float" value="0" optional="true"/>
                    <param argument="horizontal_flip" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="false" help="Randomly flip inputs horizontally."/>
                    <param argument="vertical_flip" type="boolean" optional="true" truevalue="booltrue" falsevalue="boolfalse" checked="false" help="Randomly flip inputs vertically."/>
                    <param argument="rescale" type="float" value="" optional="true" help="Rescaling factor."/>
                    <param argument="data_format" type="select">
                        <option value="channels_first" />
                        <option value="channels_last" selected="true" />
                    </param>
                    <param argument="interpolation_order" type="integer" value="1" optional="true" />
                </section>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data format="tabular" name="outfile_result"/>
        <data format="zip" name="outfile_object" label="Fitted estimator or estimator skeleton on ${on_string}">
            <filter>str(experiment_schemes['save']) and 'save_estimator' in str(experiment_schemes['save'])</filter>
        </data>
        <data format="h5" name="outfile_weights" label="Weights trained on ${on_string}">
            <filter>str(experiment_schemes['save']) and 'save_estimator' in str(experiment_schemes['save'])</filter>
        </data>
        <data format="tabular" name="outfile_y_true" label="True labels/target values on ${on_string}">
            <filter>str(experiment_schemes['save']) and 'save_prediction' in str(experiment_schemes['save'])</filter>
        </data>
        <data format="tabular" name="outfile_y_preds" label="All predictions on ${on_string}">
            <filter>str(experiment_schemes['save']) and 'save_prediction' in str(experiment_schemes['save'])</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <conditional name="experiment_schemes">
                <param name="selected_exp_scheme" value="model_predict"/>
                <param name="infile_estimator" value="image_dl_model01" ftype="zip"/>
                <param name="infile_weights" value="image_dl_weight01.h5" ftype="h5"/>
            </conditional>
            <conditional name="input_options">
                <param name="infile_images" value="cifar-10_500.zip" ftype="zip"/>
                <param name="infile_dataframe" value="cifar-10_500.tsv" ftype="tabular"/>
                <param name="x_col" value="1"/>
                <param name="y_col" value="2"/>
                <section name="options">
                    <param name="target_size" value="(32, 32)"/>
                    <param name="width_shift_range" value="0.1"/>
                    <param name="height_shift_range" value="0.1"/>
                    <param name="cval" value="0"/>
                    <param name="horizontal_flip" value="true"/>
                    <param name="seed" value="141747174" />
                </section>
            </conditional>
            <output name="outfile_result" >
                <assert_contents>
                    <has_n_columns n="10"/>
                    <has_n_lines n="501"/>
                    <has_text text="0.1"/>
                </assert_contents>
            </output>
        </test>
        <test>
            <conditional name="experiment_schemes">
                <param name="selected_exp_scheme" value="model_eval"/>
                <param name="infile_estimator" value="image_dl_model01" ftype="zip"/>
                <param name="infile_weights" value="image_dl_weight01.h5" ftype="h5"/>
                <section name="metrics">
                    <conditional name="scoring">
                        <param name="primary_scoring" value="accuracy"/>
                        <param name="secondary_scoring" value="average_precision"/>
                    </conditional>
                </section>
                <param name="save" value="save_prediction"/>
            </conditional>
            <conditional name="input_options">
                <param name="infile_images" value="cifar-10_500.zip" ftype="zip"/>
                <param name="infile_dataframe" value="cifar-10_500.tsv" ftype="tabular"/>
                <param name="x_col" value="1"/>
                <param name="y_col" value="2"/>
                <section name="options">
                    <param name="target_size" value="(32, 32)"/>
                    <param name="width_shift_range" value="0.1"/>
                    <param name="height_shift_range" value="0.1"/>
                    <param name="cval" value="0"/>
                    <param name="horizontal_flip" value="true"/>
                    <param name="seed" value="141747174" />
                </section>
            </conditional>
            <output name="outfile_result" >
                <assert_contents>
                    <has_n_columns n="5"/>
                    <has_text text="0.8"/>
                    <has_text text="0.1"/>
                    <has_text text="2."/>
                </assert_contents>
            </output>
            <output name="outfile_y_true" file="image_dl_y_true02.tabular" ftype="tabular"/>
        </test>
        <test>
            <conditional name="experiment_schemes">
                <param name="selected_exp_scheme" value="train_val"/>
                <param name="infile_estimator" value="keras_batch_model05" ftype="zip"/>
                <section name="hyperparams_swapping">
                    <param name="infile_params" value="keras_batch_params05.tabular" ftype="tabular"/>
                    <repeat name="param_set">
                        <param name="sp_value" value="50"/>
                        <param name="sp_name" value="epochs"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="0.01"/>
                        <param name="sp_name" value="lr"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="42"/>
                        <param name="sp_name" value="seed"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="999"/>
                        <param name="sp_name" value="layers_0_Conv2D__config__kernel_initializer__config__seed"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="999"/>
                        <param name="sp_name" value="layers_2_Dropout__config__seed"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="999"/>
                        <param name="sp_name" value="layers_3_Conv2D__config__kernel_initializer__config__seed"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="999"/>
                        <param name="sp_name" value="layers_5_Dropout__config__seed"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="999"/>
                        <param name="sp_name" value="layers_7_Dense__config__kernel_initializer__config__seed"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="999"/>
                        <param name="sp_name" value="layers_8_Dropout__config__seed"/>
                    </repeat>
                    <repeat name="param_set">
                        <param name="sp_value" value="999"/>
                        <param name="sp_name" value="layers_9_Dense__config__kernel_initializer__config__seed"/>
                    </repeat>
                </section>
                <section name="test_split">
                    <conditional name="split_algos">
                        <param name="shuffle" value="stratified"/>
                        <param name="test_size" value="0.2"/>
                        <param name="random_state" value="123"/>
                    </conditional>
                </section>
                <section name="metrics">
                    <conditional name="scoring">
                        <param name="primary_scoring" value="accuracy"/>
                        <param name="secondary_scoring" value="average_precision"/>
                    </conditional>
                </section>
            </conditional>
            <conditional name="input_options">
                <param name="infile_images" value="cifar-10_500.zip" ftype="zip"/>
                <param name="infile_dataframe" value="cifar-10_500.tsv" ftype="tabular"/>
                <param name="x_col" value="1"/>
                <param name="y_col" value="2"/>
                <section name="options">
                    <param name="target_size" value="(32, 32)"/>
                    <param name="width_shift_range" value="0.1"/>
                    <param name="height_shift_range" value="0.1"/>
                    <param name="cval" value="0"/>
                    <param name="horizontal_flip" value="true"/>
                    <param name="seed" value="141747174" />
                </section>
            </conditional>
            <param name="save" value="save_estimator,save_prediction"/>
            <output name="outfile_result" >
                <assert_contents>
                    <has_n_columns n="5"/>
                    <has_text text="0.8"/>
                    <has_text text="0.1"/>
                    <has_text text="2."/>
                </assert_contents>
            </output>
            <output name="outfile_object" file="image_dl_model01" compare="sim_size" delta="5"/>
            <output name="outfile_weights" file="image_dl_weight01.h5" compare="sim_size" delta="5"/>
            <output name="outfile_y_true" file="image_dl_y_true01.tabular" ftype="tabular"/>
        </test>
    </tests>
    <help>
        <![CDATA[
**What it does**

With a labeled image dataset, image zip files plus one tabular file containing meta data, this tool can conduct 4 different deep learning tasks.

- *Train and Validate*: the intput dataset is split into training and validation portions. The model is fitted on the training portion, in the meantime performances are evaluated on the validation portion multiple times while the training is progressing. Finally, a fitted model (skeleton + weights) and its validation performance scores are outputted. Besides the performance scores, the true labels and predicted values can be selected to output.


- *Train, Validate and and Evaluate*: the input dataset is split into three portions, training, validation and testing. The same `Train and Validate` described above is performed on the training and validation portions. The testing portion is used exclusively for testing (evaluation). As a result, a fitted model (skeleton + weights) and test performance scores are outputted. Besides the performance scores, the true labels and predicted values can be selected to output.


- *Load a Fitted Model and Evaluate Performances on a New Dataset*: ouput the performance scores of the trained model on the new batch of input images.


- *Load a Fitted Model and Do Predictions*: output the prediction result from the input images using the input model.


Note that, in the two tasks involving model training, most training and model parameters are accessible and changeable in the `Hyperparameter Swapping` section, which renders transparency and customizability to the training process .

For metrics, there are two sets of metrics for model evaluation, one from the keras model builder and the other from scikit-learn. Keras metrics, compiled in the model, are always evaluated, while the sklearn metrics are evaluated only when none-`default` options are selected. Please be aware that not every sklearn metric works with deep learning model at current moment. Feel free to file a ticket if problems occur and contibuting with PRs is always welcomed.

**Input**

- a prebuild deep learning model or trained model in the pure evaluation and prediction modes
- image files compressed in zip format; multiple zip files are accepted
- a tabular file containing meta data about the images

**Output**

- performance scores from evaluation
- fitted estimator skeleton and weights
- true labels and predicted values from the evaluation
- prediction results (the only output for the prediction mode)

        ]]>
    </help>
    <expand macro="sklearn_citation">
        <expand macro="keras_citation"/>
    </expand>
</tool>
