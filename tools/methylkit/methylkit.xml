<tool id="methylkit" name="methylKit" version="0.99.2">
  <description>A method for DNA methylation analysis and annotation from high-throughput bisulfite sequencing</description>
  <requirements>
    <requirement type="package" version="0.99.2">bioconductor-methylkit</requirement>
  </requirements>
  <command interpreter="bash">r_wrapper.sh $script_file</command>

  <inputs>
    <repeat name="test_series" title="Test samples" min="1">
                <param name="input" type="data" format="txt" label="Add a file"
                    help="Such input file may be obtained from AMP pipeline for aligning RRBS reads." />
    </repeat>
    <repeat name="control_series" title="Control samples" min="1">
                <param name="input" type="data" format="txt" label="Add a file"
                    help="Such input file may be obtained from AMP pipeline for aligning RRBS reads." />
    </repeat>
    <param name="choice" type="select"
        label="Analysis to carry out:"
        help="The analysis you wish to carry out.">
        <option value="differential_methylation">
        Differential methylation
        </option>
        <option value="clustering">
        Clustering
        </option>
        <option value="segmentation">
        Segmentation
        </option>
        <option value="all">
        All of the above
        </option>
    </param>
  </inputs>

  <configfiles>
    <configfile name="script_file">
        library("methylKit")

        test_files = list()
        control_files = list()

        test_ids = list()
        control_ids = list()

        #for $i, $s in enumerate( $test_series )
          test_ids[${i}] = past("test", ${i}, sep="")
          test_files[${i}] = "${s.input.file_name}"
        #end for

        #for $i, $s in enumerate( $control_series )
          control_ids[${i}] = past("control", ${i}, sep="")
          control_files[${i}] = "${s.input.file_name}"
        #end for

        input_files = append(test_files, control_files)
        sample_ids = append(test_ids, control_ids)
        treatment_tag = c(rep.int(1, length(test_ids)), rep.int(0, length(control_ids)))

        myobj=methRead(input_files, sample.id=sample_ids, assembly="${assembly}",
                    pipeline="${assembly}", treatment=treatment_tag)

        ## unite function
        methidh=unite(myobj)

        #if $choice in ["all", "differential_methylation"]:
            ## the last two arguments slim, weighted.mean
            ## have the redundant counterparts in effect and adjust,
            ## so turning them off to avoide the possible conflict.
            myDiff = calculateDiffMeth(methidh, overdispersion="${overdispersion}",
            adjust="${adjust}", effect="${effect}", test="${test}",
            slim=FALSE, weighted.mean=FALSE)

            bedgraph(myDiff, file.name="output_myDiff.bed", col.name="meth.diff",
                     unmeth=FALSE, log.transform=FALSE, negative=FALSE, add.on="")

            MethPerChr = diffMethPerChr(myDiff, plot=FALSE,
                                        qvalue.cutoff=${qvalue_cutoff},
                                        meth.cutoff=${meth_cutoff})
            write.table(MethPerChr, sep="\t", row.names=FALSE, quote=FALSE, file="output_MethPerChr.csv")

            MethylDiff = getMethylDiff(myDiff, difference=${difference},
                                        qvalue=${qvalue}, type="${type}")
            bedgraph(MethylDiff, file.name="output_MethylDiff.bed", col.name="meth.diff",
                     unmeth=FALSE,log.transform=FALSE,negative=FALSE,add.on="")
        #end if

        #if $choice in ["all", "clustering"]:
            pdf( "output_clustering.pdf" )
            methClust = clusterSamples(methidh, dist="${dist}", method="${method}")
            devname = dev.off()

            pdf( "output_PCA.pdf" )
            PCASamples(methidh)
            devname = dev.off()
        #end if

        #if $choice in ["all", "segmentation"]:
            ## methSeg works for methylRaw or methylDiff with resolution region,
            ## so methylBase has to be tiled before
            tileRaw = tileMethylCounts(myobj[[1]])
            tileBase = tileMethylCounts(methidh)
            tileDiff = calculateDiffMeth(tileBase)

            ## methseg generates Granges
            segRaw = methSeg(tileRaw, diagnostic.plot = FALSE)
            segDiff = methSeg(tileDiff, diagnostic.plot = FALSE)

            ## and can be exported as BED
            methSeg2bed(segments = segRaw, filename = "output_seg_raw.bed")
            methSeg2bed(segments = segDiff, filename = "output_seg_diff.bed")
        #end if
    </configfile>
  </configfiles>

  <outputs>
    <data format="pdf" name="out_file1" />
  </outputs>

    <tests>
        <test>

        </test>
    </tests>
<help>

</help>
</tool>
