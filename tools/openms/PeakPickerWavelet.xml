<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTD2Galaxy.-->
<!--Proposed Tool Section: [Signal processing and preprocessing]-->
<tool id="PeakPickerWavelet" name="PeakPickerWavelet" version="2.1.0">
  <description>Finds mass spectrometric peaks in profile mass spectra.</description>
  <macros>
    <token name="@EXECUTABLE@">PeakPickerWavelet</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="references"/>
  <expand macro="stdio"/>
  <expand macro="requirements"/>
  <command>PeakPickerWavelet

#if $param_in:
  -in $param_in
#end if
#if $param_out:
  -out $param_out
#end if
#if $param_algorithm_signal_to_noise:
  -algorithm:signal_to_noise $param_algorithm_signal_to_noise
#end if
#if $param_algorithm_peak_width:
  -algorithm:peak_width $param_algorithm_peak_width
#end if
#if $param_algorithm_estimate_peak_width:
  -algorithm:estimate_peak_width
#end if
#if $adv_opts.adv_opts_selector=='advanced':
    #if $adv_opts.param_write_peak_meta_data:
  -write_peak_meta_data
#end if
    #if $adv_opts.param_force:
  -force
#end if
    #if $adv_opts.param_algorithm_centroid_percentage:
  -algorithm:centroid_percentage $adv_opts.param_algorithm_centroid_percentage
#end if
    #if $adv_opts.param_algorithm_fwhm_lower_bound_factor:
  -algorithm:fwhm_lower_bound_factor $adv_opts.param_algorithm_fwhm_lower_bound_factor
#end if
    #if $adv_opts.param_algorithm_fwhm_upper_bound_factor:
  -algorithm:fwhm_upper_bound_factor $adv_opts.param_algorithm_fwhm_upper_bound_factor
#end if
    #if $adv_opts.param_algorithm_optimization_iterations:
  -algorithm:optimization:iterations $adv_opts.param_algorithm_optimization_iterations
#end if
    #if $adv_opts.param_algorithm_optimization_penalties_position:
  -algorithm:optimization:penalties:position $adv_opts.param_algorithm_optimization_penalties_position
#end if
    #if $adv_opts.param_algorithm_optimization_penalties_left_width:
  -algorithm:optimization:penalties:left_width $adv_opts.param_algorithm_optimization_penalties_left_width
#end if
    #if $adv_opts.param_algorithm_optimization_penalties_right_width:
  -algorithm:optimization:penalties:right_width $adv_opts.param_algorithm_optimization_penalties_right_width
#end if
    #if $adv_opts.param_algorithm_optimization_penalties_height:
  -algorithm:optimization:penalties:height $adv_opts.param_algorithm_optimization_penalties_height
#end if
    #if $adv_opts.param_algorithm_optimization_2d_tolerance_mz:
  -algorithm:optimization:2d:tolerance_mz $adv_opts.param_algorithm_optimization_2d_tolerance_mz
#end if
    #if $adv_opts.param_algorithm_optimization_2d_max_peak_distance:
  -algorithm:optimization:2d:max_peak_distance $adv_opts.param_algorithm_optimization_2d_max_peak_distance
#end if
    #if $adv_opts.param_algorithm_thresholds_peak_bound:
  -algorithm:thresholds:peak_bound $adv_opts.param_algorithm_thresholds_peak_bound
#end if
    #if $adv_opts.param_algorithm_thresholds_peak_bound_ms2_level:
  -algorithm:thresholds:peak_bound_ms2_level $adv_opts.param_algorithm_thresholds_peak_bound_ms2_level
#end if
    #if $adv_opts.param_algorithm_thresholds_correlation:
  -algorithm:thresholds:correlation $adv_opts.param_algorithm_thresholds_correlation
#end if
    #if $adv_opts.param_algorithm_thresholds_noise_level:
  -algorithm:thresholds:noise_level $adv_opts.param_algorithm_thresholds_noise_level
#end if
    #if $adv_opts.param_algorithm_thresholds_search_radius:
  -algorithm:thresholds:search_radius $adv_opts.param_algorithm_thresholds_search_radius
#end if
    #if $adv_opts.param_algorithm_wavelet_transform_spacing:
  -algorithm:wavelet_transform:spacing $adv_opts.param_algorithm_wavelet_transform_spacing
#end if
    #if $adv_opts.param_algorithm_deconvolution_deconvolution:
  -algorithm:deconvolution:deconvolution
#end if
    #if $adv_opts.param_algorithm_deconvolution_asym_threshold:
  -algorithm:deconvolution:asym_threshold $adv_opts.param_algorithm_deconvolution_asym_threshold
#end if
    #if $adv_opts.param_algorithm_deconvolution_left_width:
  -algorithm:deconvolution:left_width $adv_opts.param_algorithm_deconvolution_left_width
#end if
    #if $adv_opts.param_algorithm_deconvolution_right_width:
  -algorithm:deconvolution:right_width $adv_opts.param_algorithm_deconvolution_right_width
#end if
    #if $adv_opts.param_algorithm_deconvolution_scaling:
  -algorithm:deconvolution:scaling $adv_opts.param_algorithm_deconvolution_scaling
#end if
    #if $adv_opts.param_algorithm_deconvolution_fitting_fwhm_threshold:
  -algorithm:deconvolution:fitting:fwhm_threshold $adv_opts.param_algorithm_deconvolution_fitting_fwhm_threshold
#end if
    #if $adv_opts.param_algorithm_deconvolution_fitting_eps_abs:
  -algorithm:deconvolution:fitting:eps_abs $adv_opts.param_algorithm_deconvolution_fitting_eps_abs
#end if
    #if $adv_opts.param_algorithm_deconvolution_fitting_eps_rel:
  -algorithm:deconvolution:fitting:eps_rel $adv_opts.param_algorithm_deconvolution_fitting_eps_rel
#end if
    #if $adv_opts.param_algorithm_deconvolution_fitting_max_iteration:
  -algorithm:deconvolution:fitting:max_iteration $adv_opts.param_algorithm_deconvolution_fitting_max_iteration
#end if
    #if $adv_opts.param_algorithm_deconvolution_fitting_penalties_position:
  -algorithm:deconvolution:fitting:penalties:position $adv_opts.param_algorithm_deconvolution_fitting_penalties_position
#end if
    #if $adv_opts.param_algorithm_deconvolution_fitting_penalties_height:
  -algorithm:deconvolution:fitting:penalties:height $adv_opts.param_algorithm_deconvolution_fitting_penalties_height
#end if
    #if $adv_opts.param_algorithm_deconvolution_fitting_penalties_left_width:
  -algorithm:deconvolution:fitting:penalties:left_width $adv_opts.param_algorithm_deconvolution_fitting_penalties_left_width
#end if
    #if $adv_opts.param_algorithm_deconvolution_fitting_penalties_right_width:
  -algorithm:deconvolution:fitting:penalties:right_width $adv_opts.param_algorithm_deconvolution_fitting_penalties_right_width
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_max_intensity:
  -algorithm:SignalToNoiseEstimationParameter:max_intensity $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_max_intensity
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_auto_max_stdev_factor:
  -algorithm:SignalToNoiseEstimationParameter:auto_max_stdev_factor $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_auto_max_stdev_factor
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_auto_max_percentile:
  -algorithm:SignalToNoiseEstimationParameter:auto_max_percentile $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_auto_max_percentile
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_auto_mode:
  -algorithm:SignalToNoiseEstimationParameter:auto_mode $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_auto_mode
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_win_len:
  -algorithm:SignalToNoiseEstimationParameter:win_len $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_win_len
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_bin_count:
  -algorithm:SignalToNoiseEstimationParameter:bin_count $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_bin_count
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_stdev_mp:
  -algorithm:SignalToNoiseEstimationParameter:stdev_mp $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_stdev_mp
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_min_required_elements:
  -algorithm:SignalToNoiseEstimationParameter:min_required_elements $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_min_required_elements
#end if
    #if $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_noise_for_empty_window:
  -algorithm:SignalToNoiseEstimationParameter:noise_for_empty_window $adv_opts.param_algorithm_SignalToNoiseEstimationParameter_noise_for_empty_window
#end if
#end if
</command>
  <inputs>
    <param name="param_in" type="data" format="mzml" optional="False" label="input profile data file" help="(-in) "/>
    <param name="param_algorithm_signal_to_noise" type="float" min="0.0" optional="True" value="1.0" label="Minimal signal to noise ratio for a peak to be picked" help="(-signal_to_noise) "/>
    <param name="param_algorithm_peak_width" type="float" min="0.0" optional="True" value="0.15" label="Approximate fwhm of the peaks" help="(-peak_width) "/>
    <param name="param_algorithm_estimate_peak_width" display="radio" type="boolean" truevalue="-algorithm:estimate_peak_width" falsevalue="" checked="false" optional="True" label="Flag if the average peak width shall be estimated" help="(-estimate_peak_width) Attention: when this flag is set, the peak_width is ignored"/>
    <expand macro="advanced_options">
      <param name="param_write_peak_meta_data" display="radio" type="boolean" truevalue="-write_peak_meta_data" falsevalue="" checked="false" optional="True" label="Write additional information about the picked peaks (maximal intensity, left and right area...) into the mzML-file" help="(-write_peak_meta_data) Attention: this can blow up files, since seven arrays are stored per spectrum!"/>
      <param name="param_force" display="radio" type="boolean" truevalue="-force" falsevalue="" checked="false" optional="True" label="Overwrite tool specific checks" help="(-force) "/>
      <param name="param_algorithm_centroid_percentage" type="float" min="0.0" max="1.0" optional="True" value="0.8" label="Percentage of the maximum height that the raw data points must exceed to be taken into account for the calculation of the centroid" help="(-centroid_percentage) If it is 1 the centroid position corresponds to the position of the highest intensity"/>
      <param name="param_algorithm_fwhm_lower_bound_factor" type="float" min="0.0" optional="True" value="0.7" label="Factor that calculates the minimal fwhm value from the peak_width" help="(-fwhm_lower_bound_factor) All peaks with width smaller than fwhm_bound_factor * peak_width are discarded"/>
      <param name="param_algorithm_fwhm_upper_bound_factor" type="float" min="0.0" optional="True" value="20.0" label="Factor that calculates the maximal fwhm value from the peak_width" help="(-fwhm_upper_bound_factor) All peaks with width greater than fwhm_upper_bound_factor * peak_width are discarded"/>
      <param name="param_algorithm_optimization_iterations" type="integer" min="1" optional="True" value="400" label="maximal number of iterations for the fitting step" help="(-iterations) "/>
      <param name="param_algorithm_optimization_penalties_position" type="float" min="0.0" optional="True" value="0.0" label="penalty term for the fitting of the position:If it differs too much from the initial one it can be penalized" help="(-position) "/>
      <param name="param_algorithm_optimization_penalties_left_width" type="float" min="0.0" optional="True" value="1.0" label="penalty term for the fitting of the left width:If the left width differs too much from the initial one during the fitting it can be penalized" help="(-left_width) "/>
      <param name="param_algorithm_optimization_penalties_right_width" type="float" min="0.0" optional="True" value="1.0" label="penalty term for the fitting of the right width:If the right width differs too much from the initial one during the fitting it can be penalized" help="(-right_width) "/>
      <param name="param_algorithm_optimization_penalties_height" type="float" min="0.0" optional="True" value="1.0" label="penalty term for the fitting of the intensity (only used in 2D Optimization):If it gets negative during the fitting it can be penalized" help="(-height) "/>
      <param name="param_algorithm_optimization_2d_tolerance_mz" type="float" min="0.0" optional="True" value="2.2" label="mz tolerance for cluster construction" help="(-tolerance_mz) "/>
      <param name="param_algorithm_optimization_2d_max_peak_distance" type="float" min="0.0" optional="True" value="1.2" label="maximal peak distance in mz in a cluste" help="(-max_peak_distance) "/>
      <param name="param_algorithm_thresholds_peak_bound" type="float" min="0.0" optional="True" value="10.0" label="Minimal peak intensity" help="(-peak_bound) "/>
      <param name="param_algorithm_thresholds_peak_bound_ms2_level" type="float" min="0.0" optional="True" value="10.0" label="Minimal peak intensity for MS/MS peaks" help="(-peak_bound_ms2_level) "/>
      <param name="param_algorithm_thresholds_correlation" type="float" min="0.0" max="1.0" optional="True" value="0.5" label="minimal correlation of a peak and the raw signal" help="(-correlation) If a peak has a lower correlation it is skipped"/>
      <param name="param_algorithm_thresholds_noise_level" type="float" min="0.0" optional="True" value="0.1" label="noise level for the search of the peak endpoints" help="(-noise_level) "/>
      <param name="param_algorithm_thresholds_search_radius" type="integer" min="0" optional="True" value="3" label="search radius for the search of the maximum in the signal after a maximum in the cwt was found" help="(-search_radius) "/>
      <param name="param_algorithm_wavelet_transform_spacing" type="float" min="0.0" optional="True" value="0.001" label="Spacing of the CWT" help="(-spacing) Note that the accuracy of the picked peak's centroid position depends in the Raw data spacing, i.e., 50% of raw peak distance at most"/>
      <param name="param_algorithm_deconvolution_deconvolution" display="radio" type="boolean" truevalue="-algorithm:deconvolution:deconvolution" falsevalue="" checked="false" optional="True" label="If you want heavily overlapping peaks to be separated set this value to &quot;true&quot;" help="(-deconvolution) "/>
      <param name="param_algorithm_deconvolution_asym_threshold" type="float" min="0.0" optional="True" value="0.3" label="If the symmetry of a peak is smaller than asym_thresholds it is assumed that it consists of more than one peak and the deconvolution procedure is started" help="(-asym_threshold) "/>
      <param name="param_algorithm_deconvolution_left_width" type="float" min="0.0" optional="True" value="2.0" label="1/left_width is the initial value for the left width of the peaks found in the deconvolution step" help="(-left_width) "/>
      <param name="param_algorithm_deconvolution_right_width" type="float" min="0.0" optional="True" value="2.0" label="1/right_width is the initial value for the right width of the peaks found in the deconvolution step" help="(-right_width) "/>
      <param name="param_algorithm_deconvolution_scaling" type="float" min="0.0" optional="True" value="0.12" label="Initial scaling of the cwt used in the separation of heavily overlapping peaks" help="(-scaling) The initial value is used for charge 1, for higher charges it is adapted to scaling/charge"/>
      <param name="param_algorithm_deconvolution_fitting_fwhm_threshold" type="float" min="0.0" optional="True" value="0.7" label="If the FWHM of a peak is higher than 'fwhm_thresholds' it is assumed that it consists of more than one peak and the deconvolution procedure is started" help="(-fwhm_threshold) "/>
      <param name="param_algorithm_deconvolution_fitting_eps_abs" type="float" min="0.0" optional="True" value="9.99999974738e-06" label="if the absolute error gets smaller than this value the fitting is stopped" help="(-eps_abs) "/>
      <param name="param_algorithm_deconvolution_fitting_eps_rel" type="float" min="0.0" optional="True" value="9.99999974738e-06" label="if the relative error gets smaller than this value the fitting is stopped" help="(-eps_rel) "/>
      <param name="param_algorithm_deconvolution_fitting_max_iteration" type="integer" min="1" optional="True" value="10" label="maximal number of iterations for the fitting step" help="(-max_iteration) "/>
      <param name="param_algorithm_deconvolution_fitting_penalties_position" type="float" min="0.0" optional="True" value="0.0" label="penalty term for the fitting of the peak position:If the position changes more than 0.5Da during the fitting it can be penalized as well as discrepancies of the peptide mass rule" help="(-position) "/>
      <param name="param_algorithm_deconvolution_fitting_penalties_height" type="float" min="0.0" optional="True" value="1.0" label="penalty term for the fitting of the intensity:If it gets negative during the fitting it can be penalized" help="(-height) "/>
      <param name="param_algorithm_deconvolution_fitting_penalties_left_width" type="float" min="0.0" optional="True" value="0.0" label="penalty term for the fitting of the left width:If the left width gets too broad or negative during the fitting it can be penalized" help="(-left_width) "/>
      <param name="param_algorithm_deconvolution_fitting_penalties_right_width" type="float" min="0.0" optional="True" value="0.0" label="penalty term for the fitting of the right width:If the right width gets too broad or negative during the fitting it can be penalized" help="(-right_width) "/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_max_intensity" type="integer" min="-1" optional="True" value="-1" label="maximal intensity considered for histogram construction" help="(-max_intensity) By default, it will be calculated automatically (see auto_mode). Only provide this parameter if you know what you are doing (and change 'auto_mode' to '-1')! All intensities EQUAL/ABOVE 'max_intensity' will not be added to the histogram. If you choose 'max_intensity' too small, the noise estimate might be too small as well. If chosen too big, the bins become quite large (which you could counter by increasing 'bin_count', which increases runtime)"/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_auto_max_stdev_factor" type="float" min="0.0" max="999.0" optional="True" value="3.0" label="parameter for 'max_intensity' estimation (if 'auto_mode' == 0): mean + 'auto_max_stdev_factor' * stdev" help="(-auto_max_stdev_factor) "/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_auto_max_percentile" type="integer" min="0" max="100" optional="True" value="95" label="parameter for 'max_intensity' estimation (if 'auto_mode' == 1): auto_max_percentile th percentile" help="(-auto_max_percentile) "/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_auto_mode" type="integer" min="-1" max="1" optional="True" value="0" label="method to use to determine maximal intensity: -1 --&gt; use 'max_intensity'; 0 --&gt; 'auto_max_stdev_factor' method (default); 1 --&gt; 'auto_max_percentile' method" help="(-auto_mode) "/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_win_len" type="float" min="1.0" optional="True" value="200.0" label="window length in Thomson" help="(-win_len) "/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_bin_count" type="integer" min="3" optional="True" value="30" label="number of bins for intensity values" help="(-bin_count) "/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_stdev_mp" type="float" min="0.01" max="999.0" optional="True" value="3.0" label="multiplier for stdev" help="(-stdev_mp) "/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_min_required_elements" type="integer" min="1" optional="True" value="10" label="minimum number of elements required in a window (otherwise it is considered sparse)" help="(-min_required_elements) "/>
      <param name="param_algorithm_SignalToNoiseEstimationParameter_noise_for_empty_window" type="float" value="1e+20" label="noise value used for sparse windows" help="(-noise_for_empty_window) "/>
    </expand>
  </inputs>
  <outputs>
    <data name="param_out" format="mzml"/>
  </outputs>
  <help>Finds mass spectrometric peaks in profile mass spectra.


For more information, visit http://ftp.mi.fu-berlin.de/OpenMS/release-documentation/html/TOPP_PeakPickerWavelet.html</help>
</tool>
