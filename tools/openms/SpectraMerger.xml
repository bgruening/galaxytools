<?xml version="1.0" encoding="UTF-8"?>
  <!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTD2Galaxy.-->
  <!--Proposed Tool Section: [Signal processing and preprocessing]-->
  <tool id="SpectraMerger" name="SpectraMerger" version="2.0.0">
    <description>Merges spectra (each MS level separately), increasing S/N ratios.</description>
    <macros>
      <token name="@EXECUTABLE@">SpectraMerger</token>
      <import>macros.xml</import>
    </macros>
    <expand macro="references"/>
    <expand macro="stdio"/>
    <expand macro="requirements"/>
    <command>SpectraMerger

#if $param_in:
  -in $param_in
#end if
#if $param_out:
  -out $param_out
#end if
#if $param_merging_method:
  -merging_method
  #if &quot; &quot; in str($param_merging_method):
    &quot;$param_merging_method&quot;
  #else
    $param_merging_method
  #end if
#end if
-threads \${GALAXY_SLOTS:-24}
#if $param_algorithm_average_gaussian_spectrum_type:
  -algorithm:average_gaussian:spectrum_type
  #if &quot; &quot; in str($param_algorithm_average_gaussian_spectrum_type):
    &quot;$param_algorithm_average_gaussian_spectrum_type&quot;
  #else
    $param_algorithm_average_gaussian_spectrum_type
  #end if
#end if
#if $param_algorithm_average_gaussian_ms_level:
  -algorithm:average_gaussian:ms_level $param_algorithm_average_gaussian_ms_level
#end if
#if $param_algorithm_average_gaussian_rt_FWHM:
  -algorithm:average_gaussian:rt_FWHM $param_algorithm_average_gaussian_rt_FWHM
#end if
#if $param_algorithm_average_tophat_spectrum_type:
  -algorithm:average_tophat:spectrum_type
  #if &quot; &quot; in str($param_algorithm_average_tophat_spectrum_type):
    &quot;$param_algorithm_average_tophat_spectrum_type&quot;
  #else
    $param_algorithm_average_tophat_spectrum_type
  #end if
#end if
#if $param_algorithm_average_tophat_ms_level:
  -algorithm:average_tophat:ms_level $param_algorithm_average_tophat_ms_level
#end if
#if $param_algorithm_average_tophat_rt_range:
  -algorithm:average_tophat:rt_range $param_algorithm_average_tophat_rt_range
#end if
#if $param_algorithm_average_tophat_rt_unit:
  -algorithm:average_tophat:rt_unit
  #if &quot; &quot; in str($param_algorithm_average_tophat_rt_unit):
    &quot;$param_algorithm_average_tophat_rt_unit&quot;
  #else
    $param_algorithm_average_tophat_rt_unit
  #end if
#end if

#if $rep_param_algorithm_block_method_ms_levels:
-algorithm:block_method:ms_levels
  #for token in $rep_param_algorithm_block_method_ms_levels:
    #if &quot; &quot; in str(token):
      &quot;$token.param_algorithm_block_method_ms_levels&quot;
    #else
      $token.param_algorithm_block_method_ms_levels
    #end if
  #end for
#end if
#if $param_algorithm_block_method_rt_block_size:
  -algorithm:block_method:rt_block_size $param_algorithm_block_method_rt_block_size
#end if
#if $param_algorithm_block_method_rt_max_length:
  -algorithm:block_method:rt_max_length $param_algorithm_block_method_rt_max_length
#end if
#if $param_algorithm_precursor_method_mz_tolerance:
  -algorithm:precursor_method:mz_tolerance $param_algorithm_precursor_method_mz_tolerance
#end if
#if $param_algorithm_precursor_method_rt_tolerance:
  -algorithm:precursor_method:rt_tolerance $param_algorithm_precursor_method_rt_tolerance
#end if
#if $adv_opts.adv_opts_selector=='advanced':
    #if $adv_opts.param_force:
  -force
#end if
    #if $adv_opts.param_algorithm_mz_binning_width:
  -algorithm:mz_binning_width $adv_opts.param_algorithm_mz_binning_width
#end if
    #if $adv_opts.param_algorithm_mz_binning_width_unit:
  -algorithm:mz_binning_width_unit
  #if &quot; &quot; in str($adv_opts.param_algorithm_mz_binning_width_unit):
    &quot;$adv_opts.param_algorithm_mz_binning_width_unit&quot;
  #else
    $adv_opts.param_algorithm_mz_binning_width_unit
  #end if
#end if
    #if $adv_opts.param_algorithm_sort_blocks:
  -algorithm:sort_blocks
  #if &quot; &quot; in str($adv_opts.param_algorithm_sort_blocks):
    &quot;$adv_opts.param_algorithm_sort_blocks&quot;
  #else
    $adv_opts.param_algorithm_sort_blocks
  #end if
#end if
    #if $adv_opts.param_algorithm_average_gaussian_cutoff:
  -algorithm:average_gaussian:cutoff $adv_opts.param_algorithm_average_gaussian_cutoff
#end if
#end if
</command>
    <inputs>
      <param format="mzml" help="(-in) " label="Input mzML file" name="param_in" optional="False" type="data"/>
      <param help="(-merging_method) " label="Method of merging which should be used" name="param_merging_method" optional="True" type="select" value="average_gaussian">
        <option value="average_gaussian">average_gaussian</option>
        <option value="average_tophat">average_tophat</option>
        <option value="precursor_method">precursor_method</option>
        <option value="block_method">block_method</option>
      </param>
      <param help="(-spectrum_type) " label="Spectrum type of the MS level to be averaged" name="param_algorithm_average_gaussian_spectrum_type" optional="True" type="select" value="automatic">
        <option value="profile">profile</option>
        <option value="centroid">centroid</option>
        <option value="automatic">automatic</option>
      </param>
      <param help="(-ms_level) All other spectra remain unchanged" label="Average spectra of this level" min="1" name="param_algorithm_average_gaussian_ms_level" optional="True" type="integer" value="1"/>
      <param help="(-rt_FWHM) " label="FWHM of Gauss curve in seconds to be averaged ove" max="1e+11" min="0.0" name="param_algorithm_average_gaussian_rt_FWHM" optional="True" type="float" value="5.0"/>
      <param help="(-spectrum_type) " label="Spectrum type of the MS level to be averaged" name="param_algorithm_average_tophat_spectrum_type" optional="True" type="select" value="automatic">
        <option value="profile">profile</option>
        <option value="centroid">centroid</option>
        <option value="automatic">automatic</option>
      </param>
      <param help="(-ms_level) All other spectra remain unchanged" label="Average spectra of this level" min="1" name="param_algorithm_average_tophat_ms_level" optional="True" type="integer" value="1"/>
      <param help="(-rt_range) +/-(RT range)/2 from each spectrum" label="RT range to be averaged over, i.e" max="1e+11" min="0.0" name="param_algorithm_average_tophat_rt_range" optional="True" type="float" value="5.0"/>
      <param help="(-rt_unit) " label="Unit for RT range" name="param_algorithm_average_tophat_rt_unit" optional="True" type="select" value="scans">
        <option value="scans">scans</option>
        <option value="seconds">seconds</option>
      </param>
      <repeat max="1" min="0" name="rep_param_algorithm_block_method_ms_levels" title="param_algorithm_block_method_ms_levels">
        <param help="(-ms_levels) All spectra with other MS levels remain untouched" label="Merge spectra of this level" min="1" name="param_algorithm_block_method_ms_levels" optional="True" size="30" type="text" value="1">
          <sanitizer>
            <valid initial="string.printable">
              <remove value="'"/>
              <remove value="&quot;"/>
            </valid>
          </sanitizer>
        </param>
      </repeat>
      <param help="(-rt_block_size) " label="Maximum number of scans to be summed up" min="1" name="param_algorithm_block_method_rt_block_size" optional="True" type="integer" value="5"/>
      <param help="(-rt_max_length) " label="Maximum RT size of the block in seconds (0.0 = no size restriction)" max="1e+11" min="0.0" name="param_algorithm_block_method_rt_max_length" optional="True" type="float" value="0.0"/>
      <param help="(-mz_tolerance) " label="Max m/z distance of the precursor entries of two spectra to be merged in [Da]" min="0.0" name="param_algorithm_precursor_method_mz_tolerance" optional="True" type="float" value="0.0001"/>
      <param help="(-rt_tolerance) " label="Max RT distance of the precursor entries of two spectra to be merged in [s]" min="0.0" name="param_algorithm_precursor_method_rt_tolerance" optional="True" type="float" value="5.0"/>
      <expand macro="advanced_options">
        <param checked="false" falsevalue="" help="(-force) " label="Overwrite tool specific checks" name="param_force" optional="True" truevalue="-force" type="boolean"/>
        <param help="(-mz_binning_width) Closer data points or peaks will be merged" label="minimum m/z distance for two data points (profile data) or peaks (centroided data) to be considered distinct" min="0.0" name="param_algorithm_mz_binning_width" optional="True" type="float" value="5.0"/>
        <param help="(-mz_binning_width_unit) " label="Unit in which the distance between two data points or peaks is given" name="param_algorithm_mz_binning_width_unit" optional="True" type="select" value="ppm">
          <option value="Da">Da</option>
          <option value="ppm">ppm</option>
        </param>
        <param help="(-sort_blocks) " label="Sort blocks by &lt;?&gt; before merging them (useful for precursor order)" name="param_algorithm_sort_blocks" optional="True" type="select" value="RT_ascending">
          <option value="RT_ascending">RT_ascending</option>
          <option value=" RT_descending"> RT_descending</option>
        </param>
        <param help="(-cutoff) The Gaussian RT profile decreases from 1 at its apex to 0 at infinity. Spectra for which the intensity of the Gaussian drops below the cutoff do not contribute to the average" label="Intensity cutoff for Gaussian" max="1.0" min="0.0" name="param_algorithm_average_gaussian_cutoff" optional="True" type="float" value="0.01"/>
      </expand>
    </inputs>
    <outputs>
      <data format="mzml" name="param_out"/>
    </outputs>
    <help>Merges spectra (each MS level separately), increasing S/N ratios.


For more information, visit http://ftp.mi.fu-berlin.de/OpenMS/release-documentation/html/TOPP_SpectraMerger.html</help>
  </tool>
