<?xml version="1.0" encoding="UTF-8"?>
  <!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTD2Galaxy.-->
  <!--Proposed Tool Section: [File Handling]-->
  <tool id="FileFilter" name="FileFilter" version="2.0.0">
    <description>Extracts or manipulates portions of data from peak, feature or consensus-feature files.</description>
    <macros>
      <token name="@EXECUTABLE@">FileFilter</token>
      <import>macros.xml</import>
    </macros>
    <expand macro="references"/>
    <expand macro="stdio"/>
    <expand macro="requirements"/>
    <command>FileFilter

#if $param_in:
  -in $param_in
#end if
#if $param_out:
  -out $param_out
#end if
#if $param_out_type:
  -out_type
  #if &quot; &quot; in str($param_out_type):
    &quot;$param_out_type&quot;
  #else
    $param_out_type
  #end if
#end if
#if $param_rt:
  -rt     &quot;$param_rt&quot;
#end if
#if $param_mz:
  -mz     &quot;$param_mz&quot;
#end if
#if $param_pc_mz:
  -pc_mz     &quot;$param_pc_mz&quot;
#end if
#if $param_int:
  -int     &quot;$param_int&quot;
#end if
#if $param_sort:
  -sort
#end if
-threads \${GALAXY_SLOTS:-24}
#if $param_peak_options_sn:
  -peak_options:sn $param_peak_options_sn
#end if

#if $rep_param_peak_options_rm_pc_charge:
-peak_options:rm_pc_charge
  #for token in $rep_param_peak_options_rm_pc_charge:
    #if &quot; &quot; in str(token):
      &quot;$token.param_peak_options_rm_pc_charge&quot;
    #else
      $token.param_peak_options_rm_pc_charge
    #end if
  #end for
#end if

#if $rep_param_peak_options_level:
-peak_options:level
  #for token in $rep_param_peak_options_level:
    #if &quot; &quot; in str(token):
      &quot;$token.param_peak_options_level&quot;
    #else
      $token.param_peak_options_level
    #end if
  #end for
#end if
#if $param_peak_options_sort_peaks:
  -peak_options:sort_peaks
#end if
#if $param_peak_options_no_chromatograms:
  -peak_options:no_chromatograms
#end if
#if $param_peak_options_remove_chromatograms:
  -peak_options:remove_chromatograms
#end if
#if $param_peak_options_mz_precision:
  -peak_options:mz_precision
  #if &quot; &quot; in str($param_peak_options_mz_precision):
    &quot;$param_peak_options_mz_precision&quot;
  #else
    $param_peak_options_mz_precision
  #end if
#end if
#if $param_peak_options_int_precision:
  -peak_options:int_precision
  #if &quot; &quot; in str($param_peak_options_int_precision):
    &quot;$param_peak_options_int_precision&quot;
  #else
    $param_peak_options_int_precision
  #end if
#end if
#if $param_peak_options_indexed_file:
  -peak_options:indexed_file
#end if
#if $param_peak_options_numpress_masstime:
  -peak_options:numpress:masstime
  #if &quot; &quot; in str($param_peak_options_numpress_masstime):
    &quot;$param_peak_options_numpress_masstime&quot;
  #else
    $param_peak_options_numpress_masstime
  #end if
#end if
#if $param_peak_options_numpress_masstime_error:
  -peak_options:numpress:masstime_error $param_peak_options_numpress_masstime_error
#end if
#if $param_peak_options_numpress_intensity:
  -peak_options:numpress:intensity
  #if &quot; &quot; in str($param_peak_options_numpress_intensity):
    &quot;$param_peak_options_numpress_intensity&quot;
  #else
    $param_peak_options_numpress_intensity
  #end if
#end if
#if $param_peak_options_numpress_intensity_error:
  -peak_options:numpress:intensity_error $param_peak_options_numpress_intensity_error
#end if
#if $param_spectra_remove_zoom:
  -spectra:remove_zoom
#end if
#if $param_spectra_remove_mode:
  -spectra:remove_mode
  #if &quot; &quot; in str($param_spectra_remove_mode):
    &quot;$param_spectra_remove_mode&quot;
  #else
    $param_spectra_remove_mode
  #end if
#end if
#if $param_spectra_remove_activation:
  -spectra:remove_activation
  #if &quot; &quot; in str($param_spectra_remove_activation):
    &quot;$param_spectra_remove_activation&quot;
  #else
    $param_spectra_remove_activation
  #end if
#end if
#if $param_spectra_remove_collision_energy:
  -spectra:remove_collision_energy     &quot;$param_spectra_remove_collision_energy&quot;
#end if
#if $param_spectra_remove_isolation_window_width:
  -spectra:remove_isolation_window_width     &quot;$param_spectra_remove_isolation_window_width&quot;
#end if
#if $param_spectra_select_zoom:
  -spectra:select_zoom
#end if
#if $param_spectra_select_mode:
  -spectra:select_mode
  #if &quot; &quot; in str($param_spectra_select_mode):
    &quot;$param_spectra_select_mode&quot;
  #else
    $param_spectra_select_mode
  #end if
#end if
#if $param_spectra_select_activation:
  -spectra:select_activation
  #if &quot; &quot; in str($param_spectra_select_activation):
    &quot;$param_spectra_select_activation&quot;
  #else
    $param_spectra_select_activation
  #end if
#end if
#if $param_spectra_select_collision_energy:
  -spectra:select_collision_energy     &quot;$param_spectra_select_collision_energy&quot;
#end if
#if $param_spectra_select_isolation_window_width:
  -spectra:select_isolation_window_width     &quot;$param_spectra_select_isolation_window_width&quot;
#end if
#if $param_spectra_select_polarity:
  -spectra:select_polarity
  #if &quot; &quot; in str($param_spectra_select_polarity):
    &quot;$param_spectra_select_polarity&quot;
  #else
    $param_spectra_select_polarity
  #end if
#end if
#if $param_feature_q:
  -feature:q     &quot;$param_feature_q&quot;
#end if

#if $rep_param_consensus_map:
-consensus:map
  #for token in $rep_param_consensus_map:
    #if &quot; &quot; in str(token):
      &quot;$token.param_consensus_map&quot;
    #else
      $token.param_consensus_map
    #end if
  #end for
#end if
#if $param_consensus_map_and:
  -consensus:map_and
#end if
#if $param_consensus_blackorwhitelist_blacklist:
  -consensus:blackorwhitelist:blacklist
#end if
#if $param_consensus_blackorwhitelist_file:
  -consensus:blackorwhitelist:file $param_consensus_blackorwhitelist_file
#end if

#if $rep_param_consensus_blackorwhitelist_maps:
-consensus:blackorwhitelist:maps
  #for token in $rep_param_consensus_blackorwhitelist_maps:
    #if &quot; &quot; in str(token):
      &quot;$token.param_consensus_blackorwhitelist_maps&quot;
    #else
      $token.param_consensus_blackorwhitelist_maps
    #end if
  #end for
#end if
#if $param_consensus_blackorwhitelist_rt:
  -consensus:blackorwhitelist:rt $param_consensus_blackorwhitelist_rt
#end if
#if $param_consensus_blackorwhitelist_mz:
  -consensus:blackorwhitelist:mz $param_consensus_blackorwhitelist_mz
#end if
#if $param_consensus_blackorwhitelist_use_ppm_tolerance:
  -consensus:blackorwhitelist:use_ppm_tolerance
#end if
#if $param_f_and_c_charge:
  -f_and_c:charge     &quot;$param_f_and_c_charge&quot;
#end if
#if $param_f_and_c_size:
  -f_and_c:size     &quot;$param_f_and_c_size&quot;
#end if

#if $rep_param_f_and_c_remove_meta:
-f_and_c:remove_meta
  #for token in $rep_param_f_and_c_remove_meta:
    #if &quot; &quot; in str(token):
      &quot;$token.param_f_and_c_remove_meta&quot;
    #else
      $token.param_f_and_c_remove_meta
    #end if
  #end for
#end if
#if $param_id_keep_best_score_id:
  -id:keep_best_score_id
#end if

#if $rep_param_id_sequences_whitelist:
-id:sequences_whitelist
  #for token in $rep_param_id_sequences_whitelist:
    #if &quot; &quot; in str(token):
      &quot;$token.param_id_sequences_whitelist&quot;
    #else
      $token.param_id_sequences_whitelist
    #end if
  #end for
#end if

#if $rep_param_id_accessions_whitelist:
-id:accessions_whitelist
  #for token in $rep_param_id_accessions_whitelist:
    #if &quot; &quot; in str(token):
      &quot;$token.param_id_accessions_whitelist&quot;
    #else
      $token.param_id_accessions_whitelist
    #end if
  #end for
#end if
#if $param_id_remove_annotated_features:
  -id:remove_annotated_features
#end if
#if $param_id_remove_unannotated_features:
  -id:remove_unannotated_features
#end if
#if $param_id_remove_unassigned_ids:
  -id:remove_unassigned_ids
#end if
#if $param_id_blacklist:
  -id:blacklist $param_id_blacklist
#end if
#if $param_id_rt:
  -id:rt $param_id_rt
#end if
#if $param_id_mz:
  -id:mz $param_id_mz
#end if
#if $param_id_blacklist_imperfect:
  -id:blacklist_imperfect
#end if
#if $param_algorithm_SignalToNoise_win_len:
  -algorithm:SignalToNoise:win_len $param_algorithm_SignalToNoise_win_len
#end if
#if $param_algorithm_SignalToNoise_bin_count:
  -algorithm:SignalToNoise:bin_count $param_algorithm_SignalToNoise_bin_count
#end if
#if $param_algorithm_SignalToNoise_min_required_elements:
  -algorithm:SignalToNoise:min_required_elements $param_algorithm_SignalToNoise_min_required_elements
#end if
#if $param_algorithm_SignalToNoise_write_log_messages:
  -algorithm:SignalToNoise:write_log_messages
#end if
#if $adv_opts.adv_opts_selector=='advanced':
    #if $adv_opts.param_force:
  -force
#end if
    #if $adv_opts.param_id_remove_clashes:
  -id:remove_clashes
#end if
    #if $adv_opts.param_algorithm_SignalToNoise_max_intensity:
  -algorithm:SignalToNoise:max_intensity $adv_opts.param_algorithm_SignalToNoise_max_intensity
#end if
    #if $adv_opts.param_algorithm_SignalToNoise_auto_max_stdev_factor:
  -algorithm:SignalToNoise:auto_max_stdev_factor $adv_opts.param_algorithm_SignalToNoise_auto_max_stdev_factor
#end if
    #if $adv_opts.param_algorithm_SignalToNoise_auto_max_percentile:
  -algorithm:SignalToNoise:auto_max_percentile $adv_opts.param_algorithm_SignalToNoise_auto_max_percentile
#end if
    #if $adv_opts.param_algorithm_SignalToNoise_auto_mode:
  -algorithm:SignalToNoise:auto_mode $adv_opts.param_algorithm_SignalToNoise_auto_mode
#end if
    #if $adv_opts.param_algorithm_SignalToNoise_noise_for_empty_window:
  -algorithm:SignalToNoise:noise_for_empty_window $adv_opts.param_algorithm_SignalToNoise_noise_for_empty_window
#end if
#end if
</command>
    <inputs>
      <param format="xml,consensusxml,mzml" help="(-in) " label="Input file" name="param_in" optional="False" type="data"/>
      <param help="(-out_type) " label="Output file type -- default: determined from file extension or content" name="param_out_type" optional="True" type="select">
        <option value="mzML">mzML</option>
        <option value="featureXML">featureXML</option>
        <option value="consensusXML">consensusXML</option>
      </param>
      <param help="(-rt) " label="Retention time range to extract" name="param_rt" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param help="(-mz) " label="m/z range to extract (applies to ALL ms levels!)" name="param_mz" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param help="(-pc_mz) Do not use this flag in conjunction with 'mz', unless you want to actually remove peaks in spectra (see 'mz'). RT filtering is covered by 'rt' and compatible with this flag" label="MSn (n&gt;=2) precursor filtering according to their m/z value" name="param_pc_mz" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param help="(-int) " label="Intensity range to extract" name="param_int" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param checked="false" falsevalue="" help="(-sort) " label="Sorts the output according to RT and m/z" name="param_sort" optional="True" truevalue="-sort" type="boolean"/>
      <param help="(-sn) " label="Write peaks with S/N &gt; 'sn' values only" name="param_peak_options_sn" type="float" value="0.0"/>
      <repeat min="0" name="rep_param_peak_options_rm_pc_charge" title="param_peak_options_rm_pc_charge">
        <param help="(-rm_pc_charge) All spectra without precursor are kept!" label="Remove MS(2) spectra with these precursor charges" name="param_peak_options_rm_pc_charge" size="30" type="text" value="0">
          <sanitizer>
            <valid initial="string.printable">
              <remove value="'"/>
              <remove value="&quot;"/>
            </valid>
          </sanitizer>
        </param>
      </repeat>
      <repeat max="1" min="0" name="rep_param_peak_options_level" title="param_peak_options_level">
        <param help="(-level) " label="MS levels to extract" name="param_peak_options_level" size="30" type="text" value="1 2 3">
          <sanitizer>
            <valid initial="string.printable">
              <remove value="'"/>
              <remove value="&quot;"/>
            </valid>
          </sanitizer>
        </param>
      </repeat>
      <param checked="false" falsevalue="" help="(-sort_peaks) " label="Sorts the peaks according to m/z" name="param_peak_options_sort_peaks" optional="True" truevalue="-peak_options:sort_peaks" type="boolean"/>
      <param checked="false" falsevalue="" help="(-no_chromatograms) e.g. from SRM scans" label="No conversion to space-saving real chromatograms," name="param_peak_options_no_chromatograms" optional="True" truevalue="-peak_options:no_chromatograms" type="boolean"/>
      <param checked="false" falsevalue="" help="(-remove_chromatograms) " label="Removes chromatograms stored in a file" name="param_peak_options_remove_chromatograms" optional="True" truevalue="-peak_options:remove_chromatograms" type="boolean"/>
      <param help="(-mz_precision) " label="Store base64 encoded m/z data using 32 or 64 bit precision" name="param_peak_options_mz_precision" optional="True" type="select" value="64">
        <option value="32">32</option>
        <option value="64">64</option>
      </param>
      <param help="(-int_precision) " label="Store base64 encoded intensity data using 32 or 64 bit precision" name="param_peak_options_int_precision" optional="True" type="select" value="32">
        <option value="32">32</option>
        <option value="64">64</option>
      </param>
      <param checked="false" falsevalue="" help="(-indexed_file) " label="Whether to add an index to the file when writing" name="param_peak_options_indexed_file" optional="True" truevalue="-peak_options:indexed_file" type="boolean"/>
      <param help="(-masstime) " label="Apply MS Numpress compression algorithms in m/z or rt dimension (recommended: linear)" name="param_peak_options_numpress_masstime" optional="True" type="select" value="none">
        <option value="none">none</option>
        <option value="linear">linear</option>
        <option value="pic">pic</option>
        <option value="slof">slof</option>
      </param>
      <param help="(-masstime_error) " label="Maximal allowable error in m/z or rt dimension (set to 0.5 for pic)" name="param_peak_options_numpress_masstime_error" type="float" value="0.0001"/>
      <param help="(-intensity) " label="Apply MS Numpress compression algorithms in intensity dimension (recommended: slof or pic)" name="param_peak_options_numpress_intensity" optional="True" type="select" value="none">
        <option value="none">none</option>
        <option value="linear">linear</option>
        <option value="pic">pic</option>
        <option value="slof">slof</option>
      </param>
      <param help="(-intensity_error) " label="Maximal allowable error in intensity dimension (set to 0.5 for pic)" name="param_peak_options_numpress_intensity_error" type="float" value="0.0001"/>
      <param checked="false" falsevalue="" help="(-remove_zoom) " label="Remove zoom (enhanced resolution) scans" name="param_spectra_remove_zoom" optional="True" truevalue="-spectra:remove_zoom" type="boolean"/>
      <param help="(-remove_mode) " label="Remove scans by scan mode" name="param_spectra_remove_mode" optional="True" type="select">
        <option value="Unknown">Unknown</option>
        <option value="MassSpectrum">MassSpectrum</option>
        <option value="MS1Spectrum">MS1Spectrum</option>
        <option value="MSnSpectrum">MSnSpectrum</option>
        <option value="SelectedIonMonitoring">SelectedIonMonitoring</option>
        <option value="SelectedReactionMonitoring">SelectedReactionMonitoring</option>
        <option value="ConsecutiveReactionMonitoring">ConsecutiveReactionMonitoring</option>
        <option value="ConstantNeutralGain">ConstantNeutralGain</option>
        <option value="ConstantNeutralLoss">ConstantNeutralLoss</option>
        <option value="Precursor">Precursor</option>
        <option value="EnhancedMultiplyCharged">EnhancedMultiplyCharged</option>
        <option value="TimeDelayedFragmentation">TimeDelayedFragmentation</option>
        <option value="ElectromagneticRadiation">ElectromagneticRadiation</option>
        <option value="Emission">Emission</option>
        <option value="Absorbtion">Absorbtion</option>
      </param>
      <param help="(-remove_activation) " label="Remove MSn scans where any of its precursors features a certain activation method" name="param_spectra_remove_activation" optional="True" type="select">
        <option value="Collision-induced dissociation">Collision-induced dissociation</option>
        <option value="Post-source decay">Post-source decay</option>
        <option value="Plasma desorption">Plasma desorption</option>
        <option value="Surface-induced dissociation">Surface-induced dissociation</option>
        <option value="Blackbody infrared radiative dissociation">Blackbody infrared radiative dissociation</option>
        <option value="Electron capture dissociation">Electron capture dissociation</option>
        <option value="Infrared multiphoton dissociation">Infrared multiphoton dissociation</option>
        <option value="Sustained off-resonance irradiation">Sustained off-resonance irradiation</option>
        <option value="High-energy collision-induced dissociation">High-energy collision-induced dissociation</option>
        <option value="Low-energy collision-induced dissociation">Low-energy collision-induced dissociation</option>
        <option value="Photodissociation">Photodissociation</option>
        <option value="Electron transfer dissociation">Electron transfer dissociation</option>
        <option value="Pulsed q dissociation">Pulsed q dissociation</option>
      </param>
      <param help="(-remove_collision_energy) " label="Remove MSn scans with a collision energy in the given interval" name="param_spectra_remove_collision_energy" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param help="(-remove_isolation_window_width) " label="Remove MSn scans whose isolation window width is in the given interval" name="param_spectra_remove_isolation_window_width" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param checked="false" falsevalue="" help="(-select_zoom) " label="Select zoom (enhanced resolution) scans" name="param_spectra_select_zoom" optional="True" truevalue="-spectra:select_zoom" type="boolean"/>
      <param help="(-select_mode) " label="Selects scans by scan mode" name="param_spectra_select_mode" optional="True" type="select">
        <option value="Unknown">Unknown</option>
        <option value="MassSpectrum">MassSpectrum</option>
        <option value="MS1Spectrum">MS1Spectrum</option>
        <option value="MSnSpectrum">MSnSpectrum</option>
        <option value="SelectedIonMonitoring">SelectedIonMonitoring</option>
        <option value="SelectedReactionMonitoring">SelectedReactionMonitoring</option>
        <option value="ConsecutiveReactionMonitoring">ConsecutiveReactionMonitoring</option>
        <option value="ConstantNeutralGain">ConstantNeutralGain</option>
        <option value="ConstantNeutralLoss">ConstantNeutralLoss</option>
        <option value="Precursor">Precursor</option>
        <option value="EnhancedMultiplyCharged">EnhancedMultiplyCharged</option>
        <option value="TimeDelayedFragmentation">TimeDelayedFragmentation</option>
        <option value="ElectromagneticRadiation">ElectromagneticRadiation</option>
        <option value="Emission">Emission</option>
        <option value="Absorbtion">Absorbtion</option>
      </param>
      <param help="(-select_activation) " label="Retain MSn scans where any of its precursors features a certain activation method" name="param_spectra_select_activation" optional="True" type="select">
        <option value="Collision-induced dissociation">Collision-induced dissociation</option>
        <option value="Post-source decay">Post-source decay</option>
        <option value="Plasma desorption">Plasma desorption</option>
        <option value="Surface-induced dissociation">Surface-induced dissociation</option>
        <option value="Blackbody infrared radiative dissociation">Blackbody infrared radiative dissociation</option>
        <option value="Electron capture dissociation">Electron capture dissociation</option>
        <option value="Infrared multiphoton dissociation">Infrared multiphoton dissociation</option>
        <option value="Sustained off-resonance irradiation">Sustained off-resonance irradiation</option>
        <option value="High-energy collision-induced dissociation">High-energy collision-induced dissociation</option>
        <option value="Low-energy collision-induced dissociation">Low-energy collision-induced dissociation</option>
        <option value="Photodissociation">Photodissociation</option>
        <option value="Electron transfer dissociation">Electron transfer dissociation</option>
        <option value="Pulsed q dissociation">Pulsed q dissociation</option>
      </param>
      <param help="(-select_collision_energy) " label="Select MSn scans with a collision energy in the given interval" name="param_spectra_select_collision_energy" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param help="(-select_isolation_window_width) " label="Select MSn scans whose isolation window width is in the given interval" name="param_spectra_select_isolation_window_width" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param help="(-select_polarity) " label="Retain MSn scans with a certain scan polarity" name="param_spectra_select_polarity" optional="True" type="select">
        <option value="unknown">unknown</option>
        <option value="positive">positive</option>
        <option value="negative">negative</option>
      </param>
      <param help="(-q) " label="Overall quality range to extract [0:1]" name="param_feature_q" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <repeat min="0" name="rep_param_consensus_map" title="param_consensus_map">
        <param help="(-map) " label="Maps to be extracted from a consensus" name="param_consensus_map" size="30" type="text" value="0">
          <sanitizer>
            <valid initial="string.printable">
              <remove value="'"/>
              <remove value="&quot;"/>
            </valid>
          </sanitizer>
        </param>
      </repeat>
      <param checked="false" falsevalue="" help="(-map_and) " label="Consensus features are kept only if they contain exactly one feature from each map (as given above in 'map')" name="param_consensus_map_and" optional="True" truevalue="-consensus:map_and" type="boolean"/>
      <param checked="true" falsevalue="" help="(-blacklist) False: retain matched MS2 spectra. Other levels are kept" label="True: remove matched MS2" name="param_consensus_blackorwhitelist_blacklist" optional="True" truevalue="-consensus:blackorwhitelist:blacklist" type="boolean"/>
      <param format="consensusxml" help="(-file) &lt;br&gt;If consensus:blackorwhitelist:maps is specified, only these will be used. &lt;br&gt;" label="Input file containing consensus features whose corresponding MS2 spectra should be removed from the mzML file! &lt;br&gt;Matching tolerances are taken from 'consensus:blackorwhitelist:rt' and 'consensus:blackorwhitelist:mz' options" name="param_consensus_blackorwhitelist_file" optional="True" type="data"/>
      <repeat min="0" name="rep_param_consensus_blackorwhitelist_maps" title="param_consensus_blackorwhitelist_maps">
        <param help="(-maps) " label="Maps used for black/white list filtering" name="param_consensus_blackorwhitelist_maps" size="30" type="text" value="0">
          <sanitizer>
            <valid initial="string.printable">
              <remove value="'"/>
              <remove value="&quot;"/>
            </valid>
          </sanitizer>
        </param>
      </repeat>
      <param help="(-rt) " label="Retention tolerance [s] for precursor to consensus feature position" min="0.0" name="param_consensus_blackorwhitelist_rt" optional="True" type="float" value="60.0"/>
      <param help="(-mz) " label="m/z tolerance [Th] for precursor to consensus feature position" min="0.0" name="param_consensus_blackorwhitelist_mz" optional="True" type="float" value="0.01"/>
      <param checked="false" falsevalue="" help="(-use_ppm_tolerance) Otherwise Da are used" label="If ppm tolerance should be used" name="param_consensus_blackorwhitelist_use_ppm_tolerance" optional="True" truevalue="-consensus:blackorwhitelist:use_ppm_tolerance" type="boolean"/>
      <param help="(-charge) " label="Charge range to extract" name="param_f_and_c_charge" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param help="(-size) " label="Size range to extract" name="param_f_and_c_size" size="30" type="text" value=":">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <repeat min="0" name="rep_param_f_and_c_remove_meta" title="param_f_and_c_remove_meta">
        <param help="(-remove_meta) &lt;name&gt; 'lt|eq|gt' &lt;value&gt;; the first is the name of meta value, followed by the comparison operator (equal, less or greater) and the value to compare to. All comparisons are done after converting the given value to the corresponding data value type of the meta value (for lists, this simply compares length, not content!)!" label="Expects a 3-tuple (=3 entries in the list), i.e" name="param_f_and_c_remove_meta" size="30" type="text">
          <sanitizer>
            <valid initial="string.printable">
              <remove value="'"/>
              <remove value="&quot;"/>
            </valid>
          </sanitizer>
        </param>
      </repeat>
      <param checked="false" falsevalue="" help="(-keep_best_score_id) " label="in case of multiple peptide identifications, keep only the id with best score" name="param_id_keep_best_score_id" optional="True" truevalue="-id:keep_best_score_id" type="boolean"/>
      <repeat min="0" name="rep_param_id_sequences_whitelist" title="param_id_sequences_whitelist">
        <param help="(-sequences_whitelist) e.g. LYSNLVER or the modification (Oxidation)" label="keep only features with white listed sequences," name="param_id_sequences_whitelist" size="30" type="text">
          <sanitizer>
            <valid initial="string.printable">
              <remove value="'"/>
              <remove value="&quot;"/>
            </valid>
          </sanitizer>
        </param>
      </repeat>
      <repeat min="0" name="rep_param_id_accessions_whitelist" title="param_id_accessions_whitelist">
        <param help="(-accessions_whitelist) e.g. sp|P02662|CASA1_BOVIN" label="keep only features with white listed accessions," name="param_id_accessions_whitelist" size="30" type="text">
          <sanitizer>
            <valid initial="string.printable">
              <remove value="'"/>
              <remove value="&quot;"/>
            </valid>
          </sanitizer>
        </param>
      </repeat>
      <param checked="false" falsevalue="" help="(-remove_annotated_features) " label="Remove features with annotations" name="param_id_remove_annotated_features" optional="True" truevalue="-id:remove_annotated_features" type="boolean"/>
      <param checked="false" falsevalue="" help="(-remove_unannotated_features) " label="Remove features without annotations" name="param_id_remove_unannotated_features" optional="True" truevalue="-id:remove_unannotated_features" type="boolean"/>
      <param checked="false" falsevalue="" help="(-remove_unassigned_ids) " label="Remove unassigned peptide identifications" name="param_id_remove_unassigned_ids" optional="True" truevalue="-id:remove_unassigned_ids" type="boolean"/>
      <param format="xml" help="(-blacklist) &lt;br&gt;This tool will require all IDs to be matched to an MS2 spectrum, and quit with error otherwise. Use 'id:blacklist_imperfect' to allow for mismatches" label="Input file containing MS2 identifications whose corresponding MS2 spectra should be removed from the mzML file! &lt;br&gt;Matching tolerances are taken from 'id:rt' and 'id:mz' options" name="param_id_blacklist" optional="True" type="data"/>
      <param help="(-rt) " label="Retention tolerance [s] for precursor to id position" min="0.0" name="param_id_rt" optional="True" type="float" value="0.1"/>
      <param help="(-mz) " label="m/z tolerance [Th] for precursor to id position" min="0.0" name="param_id_mz" optional="True" type="float" value="0.001"/>
      <param checked="false" falsevalue="" help="(-blacklist_imperfect) " label="Allow for mismatching precursor positions (see 'id:blacklist')" name="param_id_blacklist_imperfect" optional="True" truevalue="-id:blacklist_imperfect" type="boolean"/>
      <param help="(-win_len) " label="window length in Thomson" min="1.0" name="param_algorithm_SignalToNoise_win_len" optional="True" type="float" value="200.0"/>
      <param help="(-bin_count) " label="number of bins for intensity values" min="3" name="param_algorithm_SignalToNoise_bin_count" optional="True" type="integer" value="30"/>
      <param help="(-min_required_elements) " label="minimum number of elements required in a window (otherwise it is considered sparse)" min="1" name="param_algorithm_SignalToNoise_min_required_elements" optional="True" type="integer" value="10"/>
      <param checked="true" falsevalue="" help="(-write_log_messages) " label="Write out log messages in case of sparse windows or median in rightmost histogram bin" name="param_algorithm_SignalToNoise_write_log_messages" optional="True" truevalue="-algorithm:SignalToNoise:write_log_messages" type="boolean"/>
      <expand macro="advanced_options">
        <param checked="false" falsevalue="" help="(-force) " label="Overwrite tool specific checks" name="param_force" optional="True" truevalue="-force" type="boolean"/>
        <param checked="false" falsevalue="" help="(-remove_clashes) " label="Remove features with id clashes (different sequences mapped to one feature)" name="param_id_remove_clashes" optional="True" truevalue="-id:remove_clashes" type="boolean"/>
        <param help="(-max_intensity) By default, it will be calculated automatically (see auto_mode). Only provide this parameter if you know what you are doing (and change 'auto_mode' to '-1')! All intensities EQUAL/ABOVE 'max_intensity' will be added to the LAST histogram bin. If you choose 'max_intensity' too small, the noise estimate might be too small as well.  If chosen too big, the bins become quite large (which you could counter by increasing 'bin_count', which increases runtime). In general, the Median-S/N estimator is more robust to a manual max_intensity than the MeanIterative-S/N" label="maximal intensity considered for histogram construction" min="-1" name="param_algorithm_SignalToNoise_max_intensity" optional="True" type="integer" value="-1"/>
        <param help="(-auto_max_stdev_factor) " label="parameter for 'max_intensity' estimation (if 'auto_mode' == 0): mean + 'auto_max_stdev_factor' * stdev" max="999.0" min="0.0" name="param_algorithm_SignalToNoise_auto_max_stdev_factor" optional="True" type="float" value="3.0"/>
        <param help="(-auto_max_percentile) " label="parameter for 'max_intensity' estimation (if 'auto_mode' == 1): auto_max_percentile th percentile" max="100" min="0" name="param_algorithm_SignalToNoise_auto_max_percentile" optional="True" type="integer" value="95"/>
        <param help="(-auto_mode) " label="method to use to determine maximal intensity: -1 --&gt; use 'max_intensity'; 0 --&gt; 'auto_max_stdev_factor' method (default); 1 --&gt; 'auto_max_percentile' method" max="1" min="-1" name="param_algorithm_SignalToNoise_auto_mode" optional="True" type="integer" value="0"/>
        <param help="(-noise_for_empty_window) " label="noise value used for sparse windows" name="param_algorithm_SignalToNoise_noise_for_empty_window" type="float" value="1e+20"/>
      </expand>
    </inputs>
    <outputs>
      <data format="input" metadata_source="param_in" name="param_out"/>
    </outputs>
    <help>Extracts or manipulates portions of data from peak, feature or consensus-feature files.


For more information, visit http://ftp.mi.fu-berlin.de/OpenMS/release-documentation/html/TOPP_FileFilter.html</help>
  </tool>
