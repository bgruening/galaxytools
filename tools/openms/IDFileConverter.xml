<?xml version='1.0' encoding='UTF-8'?>
<tool id="IDFileConverter" name="IDFileConverter" version="2.0.0">
  <description>Converts identification engine file formats.</description>
  <macros>
    <token name="@EXECUTABLE@">IDFileConverter</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="stdio"/>
  <expand macro="requirements"/>
  <command>IDFileConverter

#if $param_in:
  -in $param_in
#end if
#if $param_out:
  -out $param_out
#end if
#if $param_out_type:
  -out_type
  #if " " in str($param_out_type):
    "$param_out_type"
  #else
    $param_out_type
  #end if
#end if
#if $param_mz_file:
  -mz_file $param_mz_file
#end if
#if $param_mz_name:
  -mz_name     "$param_mz_name"
#end if
#if $param_use_precursor_data:
  -use_precursor_data
#end if
#if $param_peptideprophet_analyzed:
  -peptideprophet_analyzed
#end if
#if $param_score_type:
  -score_type
  #if " " in str($param_score_type):
    "$param_score_type"
  #else
    $param_score_type
  #end if
#end if
-threads \${GALAXY_SLOTS:-24} 
#if $adv_opts.adv_opts_selector=='advanced':
    #if $adv_opts.param_ignore_proteins_per_peptide:
  -ignore_proteins_per_peptide
#end if
    #if $adv_opts.param_scan_regex:
  -scan_regex     "$adv_opts.param_scan_regex"
#end if
    #if $adv_opts.param_count_from_zero:
  -count_from_zero
#end if
    #if $adv_opts.param_force:
  -force
#end if
#end if
</command>
  <inputs>
    <param name="param_in" type="data" format="xml,tabular,pepxml,idxml" optional="False" label="Input file or directory containing the data to convert" help="(-in) This may be: &lt;br&gt;- a single file in a multi-purpose XML format (pepXML, protXML, idXML, mzid), &lt;br&gt;- a single file in a search engine-specific format (Mascot: mascotXML, OMSSA: omssaXML, X! Tandem: xml, Percolator: psms), &lt;br&gt;- a single text file (tab separated) with one line for all peptide sequences matching a spectrum (top N hits), &lt;br&gt;- for Sequest results, a directory containing .out files. &lt;br&gt;"/>
    <param name="param_out_type" type="select" optional="True" label="Output file type (default: determined from file extension)" help="(-out_type) ">
      <option value="idXML">idXML</option>
      <option value="mzid">mzid</option>
      <option value="pepXML">pepXML</option>
      <option value="FASTA">FASTA</option>
    </param>
    <param name="param_mz_file" type="data" format="mzxml,mzml" optional="True" label="[pepXML, Sequest, Mascot, X! Tandem, Percolator only] Retention times will be looked up in this file" help="(-mz_file) "/>
    <param name="param_mz_name" type="text" label="[pepXML only] Experiment filename/path (extension will be removed) to match in the pepXML file ('base_name' attribute)" help="(-mz_name) Only necessary if different from 'mz_file'">
      <sanitizer>
        <valid initial="string.printable">
          <remove value="'"/>
          <remove value="&quot;"/>
        </valid>
      </sanitizer>
    </param>
    <param name="param_use_precursor_data" type="boolean" truevalue="-use_precursor_data" falsevalue="" checked="false" optional="True" label="[pepXML only] Use precursor RTs (and m/z values) from 'mz_file' for the generated peptide identifications, instead of the RTs of MS2 spectra" help="(-use_precursor_data) "/>
    <param name="param_peptideprophet_analyzed" type="boolean" truevalue="-peptideprophet_analyzed" falsevalue="" checked="false" optional="True" label="[pepXML output only] Write output in the format of a PeptideProphet analysis result" help="(-peptideprophet_analyzed) By default a 'raw' pepXML is produced that contains only search engine results"/>
    <param name="param_score_type" type="select" optional="True" value="qvalue" label="[Percolator only] Which of the Percolator scores to report as 'the' score for a peptide hit" help="(-score_type) ">
      <option value="qvalue">qvalue</option>
      <option value="PEP">PEP</option>
      <option value="score">score</option>
    </param>
    <expand macro="advanced_options">
      <param name="param_ignore_proteins_per_peptide" type="boolean" truevalue="-ignore_proteins_per_peptide" falsevalue="" checked="false" optional="True" label="[Sequest only] Workaround to deal with .out files that contain" help="(-ignore_proteins_per_peptide) e.g. &quot;+1&quot; in references column, &lt;br&gt;but do not list extra references in subsequent lines (try -debug 3 or 4)"/>
      <param name="param_scan_regex" type="text" label="[Mascot, Percolator only] Regular expression used to extract the scan number or retention time" help="(-scan_regex) See documentation for details">
        <sanitizer>
          <valid initial="string.printable">
            <remove value="'"/>
            <remove value="&quot;"/>
          </valid>
        </sanitizer>
      </param>
      <param name="param_count_from_zero" type="boolean" truevalue="-count_from_zero" falsevalue="" checked="false" optional="True" label="[Percolator only] Scan numbers extracted by 'scan_regex' start counting at zero (default: start at one)" help="(-count_from_zero) "/>
      <param name="param_force" type="boolean" truevalue="-force" falsevalue="" checked="false" optional="True" label="Overwrite tool specific checks" help="(-force) "/>
    </expand>
  </inputs>
  <outputs>
    <data name="param_out" format="fasta"/>
  </outputs>
  <help>**What it does**

Converts identification engine file formats.


For more information, visit http://ftp.mi.fu-berlin.de/OpenMS/release-documentation/html/TOPP_IDFileConverter.html</help>
  <expand macro="references"/>
</tool>
