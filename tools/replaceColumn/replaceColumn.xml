<tool id="replace_column_script" name="Replace columns" version="0.1">
    <description>Replace the values of a column by values which are defined in a convert file.</description>
    <requirements>
        <requirement type="package" version="2.7">python</requirement>
    </requirements>
    <command>
        <![CDATA[
        python "$replaceColumnScript" '$inputs'
        ]]>
    </command>
    <configfiles>
        <inputs name="inputs" />
        <configfile name="replaceColumnScript">
            <![CDATA[
import sys

replace_file = "$replace_information"
original_file = "$original_file"
column = int("$column_replace") - 1 ## assume that user thinks column 0 is column 1
ignore_start_lines = int("$ignore_lines")

if column < 0:
    print('No negative column id possible! Columns IDs have the minimal value of \'1\'')
    sys.exit(1)

## read conversion information to index 
conversion = {}

with open(replace_file, 'r') as conversion_file:
    for line in conversion_file:
        conv_key_value = line.split()
        if len(conv_key_value) == 2:
            conversion[conv_key_value[0].strip('\n')] = conv_key_value[1].strip('\n')
        else:
            conversion[conv_key_value[0].strip('\n')] = ''
                    

## read file line by line, search for column entry if it can be replaced. Otherwise it will be skipped.
with open("output_file", 'w') as output:
    count = 0

    with open(original_file) as original:

        for line in original:
            write = True
            if count < ignore_start_lines:
                count += 1 
                continue
            line_content = line.split()
            string_out = ""
            for i in xrange(len(line_content)):
                if i == column:
                    if conversion[line_content[i]] != '':
                        string_out += conversion[line_content[i]]
                        string_out += '    '
                    else:
                        write = False
                        break
                else:
                    string_out += line_content[i]
                    string_out += '    '
            
            string_out = string_out.strip()
            string_out += "\n"

            if write:
                output.write(string_out)

]]>
        </configfile>
    </configfiles>
    <inputs>
        <param name="replace_information" type="data" value='' label="Replace information file" help="This file contains in the first column the entries that should be replaced by the values of the second column." />
        <param name="original_file" type="data" value='' label="File where a column should be replaced" help="This file should be processed. A the entries of a specific column is replaced by the information given of 'Replace information file'" />
        <param name="column_replace" type='integer' value='1' label="Which column should be replaced?" />
        <param name="ignore_lines" type='integer' value='0' label="Ignore n starting lines" />
    </inputs>
    <outputs>
        <data  name="outfile_replace" from_work_dir="output_file"/>
    </outputs>
    <tests>
        <test>
            <param name="replace_information" value="GRCh38_ensembl2UCSC.txt"/>
            <param name="original_file" value="original_file"/>
            <param name="column_replace" value="1"/>
            <param name="ignore_lines" value="1"/>
            <output name="outfile_replace" file="result_file"/>
        </test>
    </tests>
    <help>
        <![CDATA[
**What it does**

This tool replaces the entries of a defined column with entries given by a replacement file. 
E.g.: The replacement file holds the information of the naming scheme of ensembl annotated chromosomes in the frist column and in the second the UCSC annotation. 
A file which is having information about chromosomes in ensembl notation in column x can now be converted to a file which holds the same information but in UCSC annotation.
        ]]>
    </help>
</tool>