<tool id="bg_eden_matrix" name="EDeN Matrix" version="0.1">
    <description></description>
    <macros>
        <import>eden_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command>
<![CDATA[
        matrix.py
            --num-jobs \${GALAXY_SLOTS:-4}
            --output-dir ./
            @common_parameters@
            --mode $mode_opts.mode_opts_selector
            #if $mode_opts.mode_opts_selector == 'similarity':
                --similarity-metric $mode_opts.similarity_metric
            #else:
                --distance-metric $mode_opts.distance_metric
            #end if
]]>
    </command>
    <inputs>
        <expand macro="common_parameters" />
        <param name="neg_file_name" format="gspan,json" type="data" label="Path to your graph file of negative instances" help="GSPAN or JSON encoded networkx graph (--input-file)" />

        <conditional name="mode_opts">
            <param name="mode_opts_selector" type="select" label="Type of created matrix"
                help="(--mode)">
                <option value="similarity">similarity</option>
                <option value="distance">distance</option>
            </param>
            <when value="similarity">
                <param name="similarity_metric" type="select" label="Similarity metric"
                    help="(--similarity-metric)">
                    <option value="rbf">rbf</option>
                    <option value="sigmoid">sigmoid</option>
                    <option value="polynomial">polynomial</option>
                    <option value="poly">poly</option>
                    <option value="linear">linear</option>
                    <option value="cosine">cosine</option>
                </param>
            </when>
            <when value="distance">
                <expand macro="distance_metric" />
            </when>
        </conditional>

    </inputs>
    <outputs>
        <data format="text" name="ofile_matrix" from_work_dir="matrix" label="${tool.name} on ${on_string}: Matrix"/>
    </outputs>
    <tests>
        <test>
        </test>
    </tests>
    <help>
<![CDATA[

.. class:: infomark

**What it does**

Explicit Decomposition with Neighborhood Utility program.
Pairwise matrix computation.

The linear model is induced using the accelerated stochastic gradient descent technique by Léon Bottou and Yann LeCun.
When the target information is 0, a self-training algorithm is used to impute a positive or negative class to the unsupervised instances.
If the target information is imbalanced a minority class resampling technique is used to rebalance the training set.

@references@

The code for Stochastic Gradient Descent SVM is adapted from http://leon.bottou.org/projects/sgd. Léon Bottou and Yann LeCun, ''Large Scale Online Learning'',
Advances in Neural Information Processing Systems 16, Edited by Sebastian Thrun, Lawrence Saul and Bernhard Schölkopf, MIT Press, Cambridge, MA, 2004.



]]>
    </help>
</tool>
