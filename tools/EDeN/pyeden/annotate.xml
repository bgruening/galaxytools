<tool id="bg_eden_annotate" name="EDeN Annotate" version="0.1">
    <description></description>
    <macros>
        <import>eden_macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command>
<![CDATA[
        annotate.py
            --input-file $infile
            #if $infile.ext == 'json':
                --format node_link_data
            #else:
                --format gspan
            #endif
            --reweight-factor $reweight
            --output-dir ./
]]>
    </command>
    <inputs>
        <param name="infile" format="gspan,json" type="data" label="Path to your graph file" help="GSPAN or JSON encoded networkx graph (--input-file)" />

        <param name="reweight" type="float" value="1.0"
            label="Update the 'weight' information as a linear combination of the previuous weight and  the absolute value of the margin" help="(--reweight-factor)">
            <validator type="in_range" min="0" max="1" />
        </param>
    </inputs>
    <outputs>
        <data format="json" name="ofile_node_link_data" from_work_dir="annotated_node_link_data" label="${tool.name} on ${on_string}"/>
    </outputs>
    <tests>
        <test>
        </test>
    </tests>
    <help>
<![CDATA[

.. class:: infomark

**What it does**

The linear model is induced using the accelerated stochastic gradient descent technique by LÃ©on Bottou and Yann LeCun.
When the target information is 0, a self-training algorithm is used to impute a positive or negative class to the unsupervised instances.
If the target information is imbalanced a minority class resampling technique is used to rebalance the training set.

Explicit Decomposition with Neighborhood Utility program.
Annotate graphs using a predictive model.

@references@

]]>
    </help>
</tool>
