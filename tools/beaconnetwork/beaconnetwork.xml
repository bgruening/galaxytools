<tool id="beaconnetwork" name="Beacon Network" version="0.1.0">
    <requirements>
    </requirements>
    <stdio>
        <exit_code range="1:" />
    </stdio>
    <command><![CDATA[
        python "$beacon_network_script" '$inputs'
    ]]></command>
    <configfiles>
        <inputs name="inputs"/>
        <configfile name="beacon_network_script">
<![CDATA[
#!/usr/bin/env python

import argparse
import json
import sys
import tempfile
import requests
from numpy import savetxt

BEACON_NETWORK_API_URL = 'https://beacon-network.org/api/responses/'
parameters = {}
input_json_path = sys.argv[1]
params__ = json.load(open(input_json_path, "r"))
#for i in params__:
    #if params__[i] != "":
        parameters[i] = params__[i]
    #end if
#end for


r = requests.get(BEACON_NETWORK_API_URL, headers={'Accept-encoding': 'gzip'}, params=parameters, timeout=12)

print r


]]>
        </configfile>
    </configfiles>
    <inputs>
    <param name="chrom" type="text" value="" label="Chromosome(s)" help="Chromosome ID. Accepted values: 1-22, X, Y, MT. Note: For compatibility with conventions set by some of the existing beacons, an arbitrary prefix is accepted as well (e.g. chr1 is equivalent to chrom1 and 1)."/>
    <param name="pos" type="text" value="" label="Coordinate" help="Coordinate within a chromosome. Position is a number and is 0-based."/>
    <param name="allele" type="text" value="" label="Allele" help="Any string of nucleotides A,C,T,G or D, I for deletion and insertion, respectively. Note: For compatibility with conventions set by some of the existing beacons, DEL and INS identifiers are also accepted."/>
    <param name="ref" type="text" value="" label="Genome ID" help="Genome ID. If not specified, all the genomes supported by the given beacons are queried. Note: For compatibility with conventions set by some of the existing beacons, both GRC or HG notation are accepted, case insensitive. Optional parameter."/>
    <param name="beacon" type="text" value="" label="Beacon IDs" help="Beacon IDs. If specified, only beacons with the given IDs are queried. Responses from all the supported beacons are obtained otherwise. Format: [id1,id2]. Optional parameter."/>
    </inputs>
    <outputs>
    <data format="json" name="output_of_query"/>
    </outputs>
    <help><![CDATA[
        TODO: Fill in help.
    ]]></help>
</tool>