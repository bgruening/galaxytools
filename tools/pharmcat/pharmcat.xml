<tool id="pharmcat" name="pharmCAT" version="@WRAPPER_VERSION@+@VERSION_SUFFIX@" profile="20.01">
    <description>
        Pharmacogenomics Clinical Annotation Tool new and improved
    </description>
    <macros>
        <token name="@WRAPPER_VERSION@">1.8.0</token>
        <token name="@VERSION_SUFFIX@">galaxy0</token>
        <xml name="bio_tools">
            <xrefs>
                <xref type="bio.tools">PharmCAT</xref>
            </xrefs>
        </xml>
    </macros>
    <requirements>
        <container type="docker">pgkb/pharmcat:@WRAPPER_VERSION@</container>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
    ## NAMECALLER FUNCTION
        #if $function_select.function == 'name':
            ln -s '$function_select.input' ./input.vcf &&
            java -cp /pharmcat/pharmcat.jar
            org.pharmgkb.pharmcat.haplotype.NamedAlleleMatcher
            -vcf input.vcf
            #if $function_select.definitions:
                -d $function_select.definitions
            #end if
            -json output.json
            -html output.html

    ## PHENOTYPE CALLER FUNCTION
        #else if $function_select.function == 'pheno':
            #if $function_select.method.pheno_function == 'vcf':
                ln -s '$function_select.method.input' ./input.vcf &&
                java -cp /pharmcat/pharmcat.jar
                org.pharmgkb.pharmcat.phenotype.Phenotyper
                -vcf input.vcf
            #else:
                ln -s '$function_select.method.input' ./input.json &&
                java -cp /pharmcat/pharmcat.jar
                org.pharmgkb.pharmcat.phenotype.Phenotyper
                -c input.json
            #end if
            #if $function_select.outside_call:
                -o $function_select.outside_call
            #end if
            -f output.json
    ## REPORTER FUNCTION
        #else if $function_select.function == 'report':
            ln -s '$function_select.input' ./input.json &&
            java -cp /pharmcat/pharmcat.jar
            org.pharmgkb.pharmcat.reporter.Reporter
            -p input.json
            #if $function_select.title:
                -t '$function_select.title'
            #end if
             #if $function_select.guidelines:
                -g $function_select.guidelines
            #end if
            -j output.json
            -o output.html
    
    ## ALL FUNCTIONS
        #else:
            ln -s '$function_select.input' ./input.vcf &&
            java -jar /pharmcat/pharmcat.jar
            -vcf input.vcf
            -o output
            -f pharmCAT_report_Galaxy
            #if $function_select.outside_call:
                -a $function_select.outside_call
            #end if
            #if $function_select.definitions:
                -na $function_select.definitions
            #end if
            $function_select.json
            $function_select.phenojson
         #end if
    ]]></command>
    <inputs>
        <conditional name="function_select">
            <param name="function" type="select" label="Which function of PharmCAT should be run?">
                <option value="all">Full PharmCAT pipeline</option>
                <option value="name">Only named allele matcher</option>
                <option value="pheno">Only phenotyper</option>
                <option value="report">Only reporter</option>
            </param>
            <when value="all">
                    <param name="input" argument="-vcf" type="data" format="vcf" label="Input vcf file" help="Must be formatted in modified official VCF format as detailed here: https://github.com/PharmGKB/PharmCAT/wiki/VCF-Requirements"/>
                    <param name="outside_call" argument="-a" type="data" format="tsv,tabular" label="Gene call TSV file from an outside tool" optional="true"/>
                    <param name="json" argument="-j" type="boolean" truevalue="-j" falsevalue="" label="Output reporter JSON report"/>
                    <param name="phenojson" argument="-pj" type="boolean" truevalue="-pj" falsevalue="" label="Output phenotyper JSON report"/>
                    <param name="definitions" argument="-na" type="data" format="list" label="Alternative allele definitions" optional='true' help="a directory containing allele definitions to use instead of the default packaged allele definitions" /> 
            </when>
            <when value="name">
                <param name="input" argument="-vcf" type="data" format="vcf" label="Input vcf file" help="Must be formatted in modified official VCF format as detailed here: https://github.com/PharmGKB/PharmCAT/wiki/VCF-Requirements"/>
                <param name="definitions" argument="-d" type="data" format="list" label="Alternative allele definitions" optional='true' help="a directory containing allele definitions to use instead of the default packaged allele definitions"/>
            </when>
            <when value="pheno">
                <conditional name="method">
                    <param name="pheno_function" type="select" label="Which function of PharmCAT should be run?">
                        <option value="vcf">Run directly from vcf samples</option>
                        <option value="named">Run from the output of the NamedAlleleMatcher</option>
                    </param>
                    <when value="vcf">
                        <param name="input" argument="-vcf" type="data" format="vcf" label="Input vcf file" help="Must be formatted in modified official VCF format as detailed here: https://github.com/PharmGKB/PharmCAT/wiki/VCF-Requirements"/>
                    </when>
                    <when value="named">
                        <param name="input" argument="-c" type="data" format="json" label="Input json file" help="JSON output of the NamedAlleleCaller pharmcat function"/>
                    </when>
                </conditional>
                <param name="outside_call" argument="-o" type="data" format="tabular,tsv" label="Optional TSV of outside caller information" optional="true"/>
            </when>
            <when value="report">
                <param name="input" argument="-p" type="data" format="json" label="JSON call data output from Phenotyper pharmCAT function"/>
                <param name="title" argument="-t" type="text" label="text to add to the report title" optional="true"/>
                <param name="guidelines" argument="-g" type="data" format="list" label="Alternative dosing guidelines" optional='true' help="directory containing JSON files of dosing guidelines instead of the default packaged guidelines"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="all_out" from_work_dir="output/pharmCAT_report_Galaxy.report.html" format="html" label="Full pharmCAT report on ${on_string}">
            <filter>function_select['function'] == "all"</filter>
        </data>
        <data name="all_pheno" from_work_dir="output/pharmCAT_report_Galaxy.phenotyper.json" format="json" label="pharmCAT Phenotyper report on ${on_string}">
            <filter>function_select['function'] == "all" and function_select["phenojson"]</filter>
        </data>
        <data name="all_out_json" from_work_dir="output/pharmCAT_report_Galaxy.report.json" format="json" label="pharmCAT Reporter JSON on ${on_string}">
            <filter>function_select['function'] == "all" and function_select["json"]</filter>
        </data>
        <data name="namer_html" from_work_dir="output.html" format="html" label="pharmCAT NamedAlleleMatcher html report on ${on_string}">
            <filter>function_select['function'] == "name"</filter>
        </data>
        <data name="namer_json" from_work_dir="output.json" format="json" label="pharmCAT NamedAlleleMatcher json report on ${on_string}">
            <filter>function_select['function'] == "name"</filter>
        </data>
        <data name="pheno_json" from_work_dir="output.json" format="json" label="pharmCAT Phenotyper report on ${on_string}">
            <filter>function_select['function'] == "pheno"</filter>
        </data>
        <data name="report_html" from_work_dir="output.html" format="html" label="pharmCAT Reporter html report on ${on_string}">
            <filter>function_select['function'] == "report"</filter>
        </data>
        <data name="report_json" from_work_dir="output.json" format="json" label="pharmCAT Reporter json report on ${on_string}">
            <filter>function_select['function'] == "report"</filter>
        </data>
    </outputs>
        <tests>
    <!-- ALL FUNCTION -->
        <test expect_num_outputs="3">
            <conditional name="function_select">
                <param name="input" ftype="vcf" value="test.vcf"/>
                <param name="outside_call" ftype="tabular" value="test.tsv"/>
                <param name="json" value="-j"/>
                <param name="phenojson" value="-pj"/>
            </conditional>
            <output name="all_out">
                <assert_contents>
                    <has_text text="Possibly higher atomoxetine concentrations as compared to normal metabolizers but questionable clinical significance. Intermediate metabolizers with an activity score of 1 may be at an increased risk of discontinuation as compared to poor metabolizers."/>
                    <has_text text="Start with normal starting dose (e.g., 2-3 mg/kg/day) and adjust doses of azathioprine based on disease-specific guidelines. Allow 2 weeks to reach steady-state after each dose adjustment (PMID 20354201, 11302950, 15606506)."/>
                    <has_text text="Consider a 25% reduction of recommended starting dose. Utilize therapeutic drug monitoring to guide dose adjustments."/>
                </assert_contents>
            </output>
            <output name="all_pheno" file="test_1.pheno.json" lines_diff="1"/>
            <output name="all_out_json" file="test_1_all_out.json" lines_diff="2">
            </output>
        </test>
    <!-- NAMECALLER -->
        <test expect_num_outputs="2">
            <conditional name="function_select">
                <param name="function" value="name"/>
                <param name="input" ftype="vcf" value="test.vcf"/>
            </conditional>
            <output name="namer_html">
                <assert_contents>
                    <has_text text="Called *1 without g.94938719T>G, g.94938788C>T, g.94938800G>A, g.94941975G>A, g.94942243T>G, g.94942306C>T, g.94942308C>T, g.94947939G>T, g.94949145C>T, g.94949163del, g.94972183A>T, g.94981258C>T, g.94986136A>C, g.94986174G>C"/>
                    <has_text text="ivacaftor non-responsive CFTR sequence/ivacaftor non-responsive CFTR sequence (78)"/>
                    <has_text text="rs12979860 reference (C)/rs12979860 reference (C) (2)"/>
                </assert_contents>
            </output>
            <output name="namer_json" file="test_2.json" lines_diff="2"/>
        </test>
    <!-- PHENOTYPER FROM VCF WITH OUTSIDE CALLER-->
        <test expect_num_outputs="1">
            <conditional name="function_select">
                <param name="function" value="pheno"/>
                <conditional name="method">
                    <param name="pheno_function" value="vcf"/>
                    <param name="input" ftype="vcf" value="test.vcf"/>
                </conditional>
                <param name="outside_call" value="test.tsv"/>
            </conditional>
            <output name="pheno_json" file="test_3.json" lines_diff="1"/>
        </test>
    <!-- PHENOTYPER FROM NAMECALLER AND NO OUTSIDE CALLER-->
        <test expect_num_outputs="1">
            <conditional name="function_select">
                <param name="function" value="pheno"/>
                <conditional name="method">
                    <param name="pheno_function" value="named"/>
                    <param name="input" value="test_2.json"/>
                </conditional>
            </conditional>
            <output name="pheno_json" file="test_4.json" lines_diff="1"/>
        </test>
    <!-- REPORTER -->
        <test expect_num_outputs="2">
            <conditional name="function_select">
                <param name="function" value="report"/>
                    <param name="input" value="test_3.json"/>
                    <param name="text" value="test text"/>
            </conditional>
            <output name="report_json">
                <assert_contents>
                    <has_text text="Implication for CYP2C19"/>
                    <has_text text="Lower dose-adjusted trough concentrations of tacrolimus and decreased chance of achieving target tacrolimus concentrations."/>
                    <has_text text="c.1840C\u003eT"/>
                </assert_contents>
            </output>
            <output name="report_html">
                <assert_contents>
                    <has_text text="Two ivacaftor non-responsive alleles"/>
                    <has_text text="rs12979860 reference (C)/rs12979860 reference (C)"/>
                    <has_text text="MT-RNR1: 1555A"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[

    .. class:: infomark

    **What it does**

        PharmCAT is a tool to extract all CPIC guideline gene variants from a genetic dataset (represented as a VCF file), interpret the variant alleles, and generate a report.

---- 

Inputs:
=======

    **VCF File:**

    PharmCAT expects the incoming VCF files to follow the official VCF spec.

    In addition, PharmCAT expects incoming VCF to have the following properties:

    1.   Build version must be aligned to the **GRCh38 assembly** (aka b38, hg38, etc.).
    2.   **Any position not in the input VCF is assumed to be a “no call”**. Missing positions will not be interpreted as reference. You must specify all positions in the input VCF that you want to be considered.
    3.   Use a parsimonious, left aligned variant representation format.
    4.   Have insertions and deletions normalized to the expected representation.
    5.   The CHROM field must be in the format **chr##**.
    6.   The QUAL and FILTER columns are **not interpreted**. It is left to the user to remove data not meeting quality criteria before passing it to PharmCAT.
    7.   Should only have data for a **single sample**. If it's a multi-sample VCF file, **only the first sample is used**.

    The Following table gives an example of a properly formated VCF file:

========= ============== =============== ========= ========= ========= ========= ========= ========= =========
#CHROM    POS            ID              REF       ALT       QUAL      FILTER    INFO      FORMAT    PharmCAT
--------- -------------- --------------- --------- --------- --------- --------- --------- --------- ---------
chr1      97078987       rs114096998     G         T         .         PASS      PX=DPYD   GT        0/0 
--------- -------------- --------------- --------- --------- --------- --------- --------- --------- ---------
chr1      97078993       rs148799944     C         G         .         PASS      PX=DPYD   GT        0/0
--------- -------------- --------------- --------- --------- --------- --------- --------- --------- ---------
chr7      99665212       rs10264272      C         T         .         PASS      PX=CYP3A5 GT        0/0
========= ============== =============== ========= ========= ========= ========= ========= ========= =========

---- 

    **Outside Call Files:**

    Typically, PharmCAT uses variant call data to match diplotypes used to find annotations. However, you can also give diplotypes to PharmCAT that were called by other tools. This is especially useful for genes that PharmCAT will not match like CYP2D6.

    The outside call file format is a tab-separated file.

    Each line starts with the HGNC gene symbol, then a tab, then the diplotype (e.g. 1/3). Lines starting with # will be ignored.

    Here's an example of an outside call file:

    ======= ==========================
    CYP2D6  1/3
    ------- --------------------------
    G6PD    B (wildtype)/B (wildtype)
    ------- --------------------------
    MT-RNR1 1555A>G
    ======= ==========================


----

**Outputs**


**NamedAlleleMatcher output:** 

The NamedAlleleMatcher component generates both HTML and JSON files with detailed information about how data in the sample VCF matches up with haplotype definitions.

**Phenotyper output:**

The Phenotyper component takes data from the NamedAlleleMatcher and combines it with outside call data to assign function and metabolizer values.

**Reporter output:**

The Reporter component takes data from the Phenotyper and matches phenotypes to information found in CPIC guideline data. This data is visible in an HTML report and also in a JSON file for machine parsing.

    ]]></help>
    <citations>
        <citation type="doi" >10.1002/cpt.928</citation>
    </citations>
</tool>