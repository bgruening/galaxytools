<tool id="imagej2_find_edges" name="Find edges" version="@WRAPPER_VERSION@.1">
    <description></description>
    <macros>
        <import>imagej2_macros.xml</import>
    </macros>
    <expand macro="fiji_requirements" />
    <command detect_errors="exit_code"><![CDATA[
#import os
#set error_log = '$output_log.txt'
#set input_sans_ext = $os.path.splitext($os.path.basename($input.file_name))[0]
#set input_with_ext = '.'.join([input_sans_ext, $input.ext])
ln -s '$input.file_name' '$input_with_ext' &&
#set output_filename = '.'.join(['output', $input.ext])
touch '$output_filename' &&
ImageJ --ij2 --headless --debug
--jython '$__tool_directory__/imagej2_find_edges_jython_script.py'
'$error_log'
'$input_with_ext'
'$output_filename'
'$input.ext'
&>'$error_log';
if [[ $? -ne 0 ]]; then
    cat '$error_log' >&2;
else
    mv '$output_filename' '$output';
fi
]]></command>
    <inputs>
        <expand macro="param_input"/>
    </inputs>
    <outputs>
        <data name="output" format_source="input"/>
    </outputs>
    <tests>
        <test>
            <param name="input" value="blobs.gif"/>
            <output name="output" file="blobs_find_edges.gif" compare="sim_size"/>
        </test>
    </tests>
    <help>

**What it does**

Uses a Sobel edge detector to highlight sharp changes in intensity in the active image.
The two 3x3 convolution kernels shown below are used to generate vertical and horizontal
derivatives.  The final image is produced by combining the two derivatives using the square
root of the sum of the squares.

``1  2  1     1  0 -1``

``0  0  0     2  0 -2``

``-1 -2 -1    1  0 -1``

    </help>
    <expand macro="fiji_headless_citations"/>
</tool>
