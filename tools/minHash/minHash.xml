<tool id="minHashTool" name="MinHash approx k-neighbors" version="0.1">
  <description>approximate k-neighbors computation for sparse datasets</description>
  <command>
    <![CDATA[
    python "$minHash_script" '$inputs'
    ]]>
  </command>
  <configfiles>
    <inputs name="inputs" />
    <configfile name="minHash_script">
      <![CDATA[
from bioinf_learn import MinHash
import sys
from numpy import savetxt
import json
from scipy.io import mmread

input_json_path = sys.argv[1]
input_json_raw = open(input_json_path, 'r')
params = json.load(input_json_raw)
print sys.argv
# options = params["inputs"]["algorithm_options"]
data_matrix = mmread("$input_file")
minHash = MinHash(n_neighbors = $advanced_options.k_neighbors, radius = $advanced_options.radius, fast=$advanced_options.fast, 
                number_of_hash_functions=$advanced_options.number_of_hash_functions,
                max_bin_size = $advanced_options.max_bin_size, minimal_blocks_in_common = $advanced_options.minimal_blocks_in_common,
                shingle_size = $advanced_options.shingle_size, excess_factor = $advanced_options.excess_factor,
                similarity=$advanced_options.similarity, number_of_cores=$advanced_options.number_of_cores,
                chunk_size=$advanced_options.chunk_size, prune_inverse_index=$advanced_options.prune_inverse_index,
                prune_inverse_index_after_instance=$advanced_options.prune_inverse_index_after_instance, 
                remove_hash_function_with_less_entries_as=$advanced_options.remove_hash_functions_with_less_entries_as, 
                block_size = $advanced_options.block_size, shingle=$advanced_options.shingle,
                store_value_with_least_sigificant_bit=$advanced_options.store_value_with_least_significant_bit,
                gpu_hashing=$advanced_options.gpu_hashing)
dist, indices = minHash.fit_kneighbors(data_matrix)
savetxt("$dist", dist, fmt='%f')
savetxt("$indices", indices, fmt='%i')
      ]]>
    </configfile>
  </configfiles>

  
    <inputs>
        <param name="input_file" type="data" label="Source file" help="Needs to be a sparse matrix from scipy in csr format."/>

        <section name="advanced_options" title="Advanced options">
            <conditional name="computing_method">
                <param name="method" type="select" label="Radius search or closest k-neighbors.">
                    <option value="radius">Radius</option>
                    <option value="kneighbors" selected="true">k-neighbors</option>
                </param>
                <when value="radius">
                    <param name="radius" type="float" value="1.0" help="Range of parameter space to use by default for radius_neighbors queries."/>
                </when>
                <when value="kneighbors">
                    <param name="k_neighbors" type="integer" value="5" label="Number of neighbors"/>
                </when>
            </conditional>
            <param name="fast" type="boolean" truevalue="True", falsevalue="False" label="Fast version of MinHash, less accurate"/>
            <param name="number_of_hash_functions" type="integer" value="400" label="Number of hash function that should be used for the approximation."/>
            <param name="max_bin_size" type="integer" value="50" label="The number of maximal collisions for one hash value of one hash function. "/>
            <param name="minimal_blocks_in_common" type="integer" value="1" label="The minimal number of hash collisions two instances have to be in common to be recognised."/>
            <param name="excess_factor" type="integer" value="5" label="Factor to return more neighbors internally as defined with n_neighbors."/>
            <param name="similarity" type="boolean" truevalue="True" falsevalue="False" label="Use cosine similarity or euclidean distance as a measurement."/>
            <param name="number_of_cores" type="integer" value="4" label="Number of cores that are used by the parallelization."/>
            <param name="chunk_size" type="integer" value="0" label="Elements per core."/>
            <param name="prune_inverse_index" type="integer" value="-1" label="Remove every hash value with less occurence than: "/>
            <param name="prune_inverse_index_after_instance" type="float" value="-1.0" label="Prune inverse index after x% of the data"/>
            <param name="remove_hash_functions_with_less_entries_as" type="integer" value="-1" label="Remove every hash function with less hash values as: "/>
            <param name="shingle_size" type="integer" value="4" label="Reduction factor for the signature size."/>
            <param name="block_size" type="integer" value="5" label="How many "/>
            <param name="shingle" type="integer" value="0" label="Shingle size"/>
            <param name="store_value_with_least_significant_bit" type="integer" value="0" label="Store n least significant bits"/>
            <param name="gpu_hashing" type="boolean" truevalue="1" falsevalue="0" label="Use GPU hashing" help="Use GPU hashing with NVIDIAs CUDA to significant improve the runtime. Works only if your hardware is supporting it and CUDA is installed."/>
        </section>
    </inputs>
    <outputs>
    <data format="txt" name="dist" />
    <data format="txt" name="indices" />

    </outputs>


    <help>
    This tool computes the approximate k-nearest neighbors and works only on sparse datasets.
    </help>

    </tool>