name: Galaxy Tool Linting and Tests for push and PR
on: [push, pull_request]
env:
  GALAXY_REPO: https://github.com/galaxyproject/galaxy
  GALAXY_RELEASE: release_20.05
jobs:
  # the setup job does two things:
  # 1. cache the pip cache and .planemo
  # 2. determine the list of changed repositories
  # it produces one artifact which contains
  # - a file with the latest SHA from the chosen branch of the Galaxy repo
  # - a file containing the list of changed repositories
  # which are needed in subsequent steps.
  # deploy the tools to the toolsheds (first TTS for testing)

  # Planemo test the changed repositories, each chunk creates an artifact
  # containing HTML and JSON reports for the executed tests
  test:
    name: Test tools
    # This job runs on Linux
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        chunk: [0, 1, 2, 3]
        python-version: [3.7]
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
    # checkout the repository
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    #- name: Setup tmate session
    #  uses: mxschmitt/action-tmate@v3
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: Workflow artifacts
        path: ../workflow_artifacts/
    - name: Determine latest galaxy commit
      run: echo ::set-env name=GALAXY_HEAD_SHA::$(cat ../workflow_artifacts/galaxy.sha)
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ env.GALAXY_HEAD_SHA }}
    - name: Cache .planemo
      uses: actions/cache@v2
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ env.GALAXY_HEAD_SHA }}
    - name: Install Planemo
      run: pip install planemo
    - name: install condor
      run: sudo apt-get install htcondor -y
    - name: 'configure htcondor'
      run: echo 'TRUST_UID_DOMAIN = true'| sudo tee -a  /etc/condor/condor_config
    - name: start htcondor
      run: sudo systemctl start condor
    - name: Planemo ci_find_tools
      run: |
        touch changed_repositories_chunk.list changed_tools_chunk.list
        if [ -s ../workflow_artifacts/changed_repositories.list ]; then
            if [ $(wc -l < ../workflow_artifacts/changed_repositories.list) -eq 1 ]; then
                planemo ci_find_tools --chunk_count 4 --chunk ${{ matrix.chunk }} \
                               --output changed_tools_chunk.list \
                               $(cat ../workflow_artifacts/changed_repositories.list)
            else
                planemo ci_find_repos --chunk_count 4 --chunk ${{ matrix.chunk }} \
                               --output changed_repositories_chunk.list \
                               $(cat ../workflow_artifacts/changed_repositories.list)
            fi
        fi
    - name: Show changed tools/repositories chunk list
      run: cat changed_tools_chunk.list changed_repositories_chunk.list
    - name: Planemo test tools
      run: |
        if grep -lqf .tt_biocontainer_skip changed_tools_chunk.list changed_repositories_chunk.list; then
                PLANEMO_OPTIONS="--job_config_file job_conf.xml_condor"
        else
                PLANEMO_OPTIONS="--biocontainers --no_dependency_resolution --no_conda_auto_init --job_config_file job_conf.xml_condor"
        fi
        if [ -s changed_tools_chunk.list ]; then
            PIP_QUIET=1 planemo test --database_connection postgresql://postgres:postgres@localhost:5432/galaxy $PLANEMO_OPTIONS --galaxy_source $GALAXY_REPO --galaxy_branch $GALAXY_RELEASE --galaxy_python_version ${{ matrix.python-version }} --test_output_json tool_test_output.json $(cat changed_tools_chunk.list) || true
            docker system prune --all --force --volumes || true
        elif [ -s changed_repositories_chunk.list ]; then
            while read -r DIR; do
                if [[ "$DIR" =~ ^data_managers.* ]]; then
                    TESTPATH=$(planemo ci_find_tools "$DIR")
                else
                    TESTPATH="$DIR"
                fi
                PIP_QUIET=1 planemo test --database_connection postgresql://postgres:postgres@localhost:5432/galaxy $PLANEMO_OPTIONS --galaxy_source $GALAXY_REPO --galaxy_branch $GALAXY_RELEASE --galaxy_python_version ${{ matrix.python-version }} --test_output_json "$DIR"/tool_test_output.json "$TESTPATH" || true
                docker system prune --all --force --volumes || true
            done < changed_repositories_chunk.list
        else
            echo '{"tests":[]}' > tool_test_output.json
        fi
    - name: Merge tool_test_output.json files
      run: find . -name tool_test_output.json -exec sh -c 'planemo merge_test_reports "$@" tool_test_output.json' sh {} +
    - name: Create tool_test_output.html
      run: planemo test_reports tool_test_output.json --test_output tool_test_output.html
    - name: Copy artifacts into place
      run: |
        mkdir upload
        mv tool_test_output.json tool_test_output.html upload/
    - uses: actions/upload-artifact@v2.0.1
      with:
        name: 'Tool test output ${{ matrix.chunk  }}'
        path: upload

  # - combine the results of the test chunks (which will never fail due
  #   to `|| true`) and create a global test report as json and html which
  #   is provided as artifact
  # - check if any tool test actually failed (by lookup in the combined json)
  #   and fail this step if this is the case
  combine_outputs:
    name: Combine chunked test results
    needs: test
    strategy:
      matrix:
        python-version: [3.7]
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: artifacts
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine latest galaxy commit
      run: echo ::set-env name=GALAXY_HEAD_SHA::$(cat "artifacts/Workflow artifacts/galaxy.sha")
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ env.GALAXY_HEAD_SHA }}
    - name: Install Planemo
      run: pip install planemo
    - name: Install jq
      run: sudo apt-get install jq
    - name: Combine outputs
      run: find artifacts/ -name tool_test_output.json -exec sh -c 'planemo merge_test_reports "$@" tool_test_output.json' sh {} +
    - name: Create tool_test_output.html
      run: planemo test_reports tool_test_output.json --test_output tool_test_output.html
    - name: Copy artifacts into place
      run: |
        mkdir upload
        mv tool_test_output.json tool_test_output.html upload/
    - uses: actions/upload-artifact@v2.0.1
      with:
        name: 'All tool test results'
        path: upload
    - name: Check status of combined status
      run: |
        if jq '.["tests"][]["data"]["status"]' upload/tool_test_output.json | grep -v "success"; then
            echo "Unsuccessful tests found, inspect the 'All tool test results' artifact for details."
            exit 1
        fi
  deploy:
    name: Deploy
    strategy:
      matrix:
        python-version: [3.7]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: Workflow artifacts
        path: ../workflow_artifacts/
    - name: Determine latest galaxy commit
      run: echo ::set-env name=GALAXY_HEAD_SHA::$(cat ../workflow_artifacts/galaxy.sha)
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ env.GALAXY_HEAD_SHA }}
    - name: Install Planemo
      run: pip install planemo
    - name: Deploy on testtoolshed
      env:
        SHED_KEY: ${{ secrets.tts_api_key }}
      run: |
        while read -r DIR; do
            planemo shed_update --shed_target testtoolshed --shed_key "${{ env.SHED_KEY }}" --force_repository_creation "$DIR" || exit 1;
        done < ../workflow_artifacts/changed_repositories.list
      continue-on-error: true
    - name: Deploy on toolshed
      env:
        SHED_KEY: ${{ secrets.ts_api_key }}
      run: |
        while read -r DIR; do
            planemo shed_update --shed_target toolshed --shed_key "${{ env.SHED_KEY }}" --force_repository_creation "$DIR" || exit 1;
        done < ../workflow_artifacts/changed_repositories.list

