<tool id="homer_findMotifsGenome" name="identify Motifs" version="0.1.2">
    <description></description>
    <expand macro="requirements" />
    <macros>
        <import>homer_macros.xml</import>
    </macros>
    <command>
<![CDATA[
        #import os
        #import tempfile

        #set $tmpdir = os.path.abspath( tempfile.mkdtemp() )
        export PATH=\$PATH:$database.fields.path;

        findMotifsGenome.pl $infile ${infile.metadata.dbkey} $tmpdir

        -p 4
        $mask
        -size $size
        -len $motif_len
        -mis $mismatches
        -S $number_of_motifs
        $noweight
        $cpg
        -nlen $nlen
        -olen $olen
        $hypergeometric
        $norevopp
        $rna

        #if $bg_infile:
            -bg $bg_infile
        #end if

        #if $logfile_output:
            2> $out_logfile
        #else:
            2>&1
        #end if

        ;
        cp $tmpdir/knownResults.txt $known_results_tabular;

        #if $concat_motifs_output:
            cp $tmpdir/homerMotifs.all.motifs $out_concat_motifs;
        #end if

        #if $html_output:
            #set $go_path = os.path.join($tmpdir, 'geneOntology.html')

            mkdir $denovo_results_html.files_path;
            cp $tmpdir/homerResults.html $denovo_results_html;
            cp $tmpdir/homerResults.html "$denovo_results_html.files_path";
            cp -r $tmpdir/homerResults/ "$denovo_results_html.files_path";


            mkdir "$known_results_html.files_path";
            cp $tmpdir/knownResults.html $known_results_html;
            cp $tmpdir/knownResults.html "$known_results_html.files_path";
            cp $tmpdir/homerResults.html "$known_results_html.files_path";
            cp -r $tmpdir/knownResults/ "$known_results_html.files_path";

            #if os.path.exists( $go_path ):
                cp $go_path "$denovo_results_html.files_path";
                cp $go_path "$known_results_html.files_path";
            #end if

        #end if

        ##rm -rf $tmpdir

]]>
    </command>
    <inputs>
        <expand macro="input_choose_homer_version" />

        <param name="infile" format="bed" type="data" label="BED file" help="a file containing genomic coordinates">
            <validator type="dataset_metadata_in_file" filename="homer_available_genomes.loc" metadata_name="dbkey" metadata_column="0" message="No HOMER genome build available for your species." />
        </param>

        <param name="rna" type="boolean" truevalue="-rna" falsevalue="" checked="False" label="Search for RNA motifs" help="If looking at RNA data (i.e. Clip-Seq or similar), this option will restrict HOMER to only search the + strand (relative to the peak), and will output RNA motif logos (i.e. U instead of T).  It will also try to compare found motifs to an RNA motif database, which sadly, only contains miRNAs right now... I guess chuck roundhouse kicked all of the splicing and other RNA motifs into hard to find databases."/>
        <param name="norevopp" type="boolean" truevalue="-norevopp" falsevalue="" checked="False" label="Only search for motifs on + strand" help=""/>
        <param name="hypergeometric" type="boolean" truevalue="-h" falsevalue="" checked="False" label="Hypergeometric enrichment scoring" help="By default, findMotifsGenome.pl uses the binomial distribution to score motifs.  This works well when the number of background sequences greatly out number the target sequences - however, if you are using '-bg' option above, and the number of background sequences is smaller than target sequences, it is a good idea to use the hypergeometric distribution instead.  FYI - The binomial is faster to compute, hence it's use for motif finding in large numbers of regions."/>
        <param name="olen" type="integer" value="0" label="Motif level autonormalization" help ="0 means disabled"/>
        <param name="nlen" type="integer" value="3" label="Region level autonormalization" help ="0 to disable"/>
        <param name="noweight" type="boolean" truevalue="-noweight" falsevalue="" checked="False" label="disabling GC/CpG normalization" help=""/>
        <param name="cpg" type="boolean" truevalue="-cpg" falsevalue="" checked="False" label="normalize CpG% content instead of GC% content" help=""/>
        <param name="number_of_motifs" type="integer" value="25" label="Number of motifs to find" help ="The more mismatches you allow, the more sensitive the algorithm, particularly for longer motifs.  However, this also slows down the algorithm a bit.  If searching for motifs longer than 12-15 bp, it's best to increase this value to at least 3 or even 4."/>
        <param name="mismatches" type="integer" value="2" label="Mismatches allowed in global optimization phase" help ="The more mismatches you allow, the more sensitive the algorithm, particularly for longer motifs.  However, this also slows down the algorithm a bit.  If searching for motifs longer than 12-15 bp, it's best to increase this value to at least 3 or even 4."/>
        <param name="mask" type="boolean" truevalue="-mask" falsevalue="" checked="True" label="Use masked version of the genome" help=""/>
        <param name="size" type="integer" value="200" label="The size of the region used for motif finding" help =" If analyzing ChIP-Seq peaks from a transcription factor, Chuck would recommend 50 bp for establishing the primary motif bound by a given transcription factor and 200 bp for finding both primary and 'co-enriched' motifs for a transcription factor.  When looking at histone marked regions, 500-1000 bp is probably a good idea (i.e. H3K4me or H3/H4 acetylated regions).  In theory, HOMER can work with very large regions (i.e. 10kb), but with the larger the regions comes more sequence and longer execution time."/>
        <param name="motif_len" type="text" value="8,10,12" label="Specifies the length of motifs to be found" help ="HOMER will find motifs of each size separately and then combine the results at the end.  The length of time it takes to find motifs increases greatly with increasing size.  In general, it's best to try out enrichment with shorter lengths (i.e. less than 15) before trying longer lengths.  Much longer motifs can be found with HOMER, but it's best to use smaller sets of sequence when trying to find long motifs (i.e. use '-len 20 -size 50'), otherwise it may take way too long (or take too much memory).  The other trick to reduce the total resource consumption is to reduce the number of background sequences (-N #)."/>

        <param name="bg_infile" format="bed" type="data" optional="True" label="User defined background regions" help="These will still be normalized for CpG% or GC% content just like randomly chosen sequences and autonormalized unless these options are turned off (i.e. '-nlen 0 -noweight').  This can be very useful since HOMER is a differential motif discovery algorithm.  For example, you can give HOMER a set of peaks co-bound by another factor and compare them to the rest of the peaks.  HOMER will automatically check if the background peaks overlap with the target peaks using mergePeaks, and discard overlapping regions."/>

        <param name="concat_motifs_output" type="boolean" truevalue="" falsevalue="" checked="True" label="Output concatenated file composed of all motifs" help=""/>
        <param name="html_output" type="boolean" truevalue="" falsevalue="" checked="True" label="Output HOMER visual summaries" help=""/>
        <param name="logfile_output" type="boolean" truevalue="" falsevalue="" label="Output HOMER logfile" help=""/>

    </inputs>
    <outputs>
        <data format="tabular" name="known_results_tabular" label="HOMER known motifs" />
        <data format="html" name="denovo_results_html" label="HOMER de novo motifs">
            <filter>html_output is True</filter>
        </data>
        <data format="html" name="known_results_html" label="HOMER known motifs">
            <filter>html_output is True</filter>
        </data>
        <data format="txt" name="out_concat_motifs" label="HOMER concatenated motif files">
            <filter>concat_motifs_output is True</filter>
        </data>
        <data name="out_logfile" type="data" format="txt" label="HOMER logfile: motifs from  ${on_string}">
            <filter>logfile_output is True</filter>
        </data>
    </outputs>
    <tests>
        <test>

        </test>
    </tests>

    <help>
<![CDATA[

  .. class:: infomark

  **Homer findMotifsGenome**

Autonormalization attempts to remove sequence bias from lower order oligos (1-mers, 2-mers ... up to #).
Region level autonormalization, which is for 1/2/3 mers by default, attempts to normalize background regions by adjusting their weights.
If this isn't getting the job done (autonormalization is not guaranteed to remove all sequence bias), you can try the more aggressive motif level autonormalization (-olen #).
This performs the autonormalization routine on the oligo table during de novo motif discovery.

]]>
    </help>
</tool>

